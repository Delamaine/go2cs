<# // This template creates a <PackageName>_<InterfaceName>Interface.cs file #>
<#@ template language="C#" inherits="TemplateBase" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="go2cs.Metadata" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on <#=GeneratedTime#>
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
<#=string.Join(Environment.NewLine, UsingStatements)#>
<#if (!NamespacePrefix.Equals("go")) {#>
using go;
<#}#>

#pragma warning disable CS0660, CS0661

<#=NamespaceHeader#>
    public static partial class <#=PackageName#>_package
    {
        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> partial interface <#=InterfaceName#> : EmptyInterface
        {
        }

        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> struct <#=InterfaceName#><T> : <#=InterfaceName#>
        {
            private T m_target;

            public T Target => m_target;<#
        
            foreach (var decl in Functions)
            {
                #><#=new InterfaceFuncDeclTemplate
                {
                    FunctionName = decl.Name,
                    Scope = "public",
                    ParameterSignature = decl.Signature.GenerateParametersSignature(false),
                    ParameterNames = GetParameterNames(decl),
                    ParameterTypes = GetParameterTypes(decl),
                    ResultType = decl.Signature.GenerateResultSignature()
                }
                .TransformText()#><#
            }#>


            [DebuggerStepperBoundary]
            static <#=InterfaceName#>()
            {
                Type targetType = typeof(T);
                MethodInfo extensionMethod;<#
                
                foreach (var decl in Functions)
                {
                    #><#=new InterfaceFuncInitTemplate
                    {
                        FunctionName = decl.Name,
                        InterfaceName = InterfaceName
                    }
                    .TransformText()#><#
                }#>

            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator <#=InterfaceName#><T>(T target) => new <#=InterfaceName#><T> { m_target = target };

            // Enable comparisons between nil and <#=InterfaceName#><T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(<#=InterfaceName#><T> value, NilType nil) => Activator.CreateInstance<<#=InterfaceName#><T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(<#=InterfaceName#><T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, <#=InterfaceName#><T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, <#=InterfaceName#><T> value) => value != nil;
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        <#=Scope#> static <#=InterfaceName#> <#=InterfaceName#>_cast<T>(T target)
        {
            if (typeof(<#=InterfaceName#>).IsAssignableFrom(typeof(T)))
                return target as <#=InterfaceName#>;

            return (<#=InterfaceName#><T>)target;
        }
    }
<#=NamespaceFooter#>

namespace go
{
    public partial class NilType
    {
        // Enable comparisons between nil and <#=InterfaceName#> interface
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> value, NilType nil) => (object)value == null || Activator.CreateInstance(value.GetType()).Equals(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> value, NilType nil) => !(value == nil);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(NilType nil, <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> value) => value == nil;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(NilType nil, <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> value) => value != nil;
    }

    public static class <#=PackageName#>_<#=InterfaceName#>Extensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T TypeAssert<T>(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target)
        {
            try
            {
                return ((<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#><T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"panic: interface conversion: {target.GetType().FullName} is not {typeof(T).FullName}: missing method {ex.InnerException?.Message}");
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool TryTypeAssert<T>(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, out T result)
        {
            try
            {
                result = target.TypeAssert<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default(T);
                return false;
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object TypeAssert(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, Type type)
        {
            try
            {
                MethodInfo conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#><>).GetExplicitGenericConversionOperator(type));

                if ((object)conversionOperator == null)
                    throw new PanicException($"panic: interface conversion: failed to create converter for {target.GetType().FullName} to {type.FullName}");

                dynamic result = conversionOperator.Invoke(null, new object[] { target });
                return result.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"panic: interface conversion: {target.GetType().FullName} is not {type.FullName}: missing method {ex.InnerException?.Message}");
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool TryTypeAssert(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, Type type, out object result)
        {
            try
            {
                result = target.TypeAssert(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}<#+
// Template Parameters
public string NamespacePrefix;
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string InterfaceName;
public string Scope;
public InterfaceInfo Interface;
public IEnumerable<FunctionSignature> Functions;
public IEnumerable<string> UsingStatements;

private string GetParameterNames(FunctionSignature function)
{
    string parameterNames = function.GetParameterNames();

    if (parameterNames.Length > 0)
        parameterNames = ", " + parameterNames;

    return parameterNames;
}

private string GetParameterTypes(FunctionSignature function)
{
    string parameterTypes = function.GetParameterTypes();

    if (parameterTypes.Length > 0)
        parameterTypes = ", " + parameterTypes;

    return parameterTypes;
}
#>