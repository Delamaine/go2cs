//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:10:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using reflect = go.reflect_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace database {
namespace sql
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface RowsNextResultSet
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RowsNextResultSet As<T>(in T target) => (RowsNextResultSet<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RowsNextResultSet As<T>(ptr<T> target_ptr) => (RowsNextResultSet<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RowsNextResultSet? As(object target) =>
                typeof(RowsNextResultSet<>).CreateInterfaceHandler<RowsNextResultSet>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class RowsNextResultSet<T> : RowsNextResultSet
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public RowsNextResultSet(in T target) => m_target = target;

            public RowsNextResultSet(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error HasNextResultSetByRef(ref T value);
            private delegate error HasNextResultSetByVal(T value);

            private static readonly HasNextResultSetByRef s_HasNextResultSetByRef;
            private static readonly HasNextResultSetByVal s_HasNextResultSetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error HasNextResultSet()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_HasNextResultSetByRef is null)
                    return s_HasNextResultSetByVal!(target);

                return s_HasNextResultSetByRef(ref target);
            }

            private delegate error NextResultSetByRef(ref T value);
            private delegate error NextResultSetByVal(T value);

            private static readonly NextResultSetByRef s_NextResultSetByRef;
            private static readonly NextResultSetByVal s_NextResultSetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error NextResultSet()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NextResultSetByRef is null)
                    return s_NextResultSetByVal!(target);

                return s_NextResultSetByRef(ref target);
            }

            private delegate error ColumnsByRef(ref T value);
            private delegate error ColumnsByVal(T value);

            private static readonly ColumnsByRef s_ColumnsByRef;
            private static readonly ColumnsByVal s_ColumnsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Columns()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ColumnsByRef is null)
                    return s_ColumnsByVal!(target);

                return s_ColumnsByRef(ref target);
            }

            private delegate error CloseByRef(ref T value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByRef s_CloseByRef;
            private static readonly CloseByVal s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_CloseByRef is null)
                    return s_CloseByVal!(target);

                return s_CloseByRef(ref target);
            }

            private delegate error NextByRef(ref T value, slice<Value> dest);
            private delegate error NextByVal(T value, slice<Value> dest);

            private static readonly NextByRef s_NextByRef;
            private static readonly NextByVal s_NextByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Next(slice<Value> dest)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NextByRef is null)
                    return s_NextByVal!(target, dest);

                return s_NextByRef(ref target, dest);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static RowsNextResultSet()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("HasNextResultSet");

                if (!(extensionMethod is null))
                    s_HasNextResultSetByRef = extensionMethod.CreateStaticDelegate(typeof(HasNextResultSetByRef)) as HasNextResultSetByRef;

                if (s_HasNextResultSetByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("HasNextResultSet");

                    if (!(extensionMethod is null))
                        s_HasNextResultSetByVal = extensionMethod.CreateStaticDelegate(typeof(HasNextResultSetByVal)) as HasNextResultSetByVal;
                }

                if (s_HasNextResultSetByRef is null && s_HasNextResultSetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RowsNextResultSet.HasNextResultSet method", new Exception("HasNextResultSet"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NextResultSet");

                if (!(extensionMethod is null))
                    s_NextResultSetByRef = extensionMethod.CreateStaticDelegate(typeof(NextResultSetByRef)) as NextResultSetByRef;

                if (s_NextResultSetByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NextResultSet");

                    if (!(extensionMethod is null))
                        s_NextResultSetByVal = extensionMethod.CreateStaticDelegate(typeof(NextResultSetByVal)) as NextResultSetByVal;
                }

                if (s_NextResultSetByRef is null && s_NextResultSetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RowsNextResultSet.NextResultSet method", new Exception("NextResultSet"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Columns");

                if (!(extensionMethod is null))
                    s_ColumnsByRef = extensionMethod.CreateStaticDelegate(typeof(ColumnsByRef)) as ColumnsByRef;

                if (s_ColumnsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Columns");

                    if (!(extensionMethod is null))
                        s_ColumnsByVal = extensionMethod.CreateStaticDelegate(typeof(ColumnsByVal)) as ColumnsByVal;
                }

                if (s_ColumnsByRef is null && s_ColumnsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RowsNextResultSet.Columns method", new Exception("Columns"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByRef = extensionMethod.CreateStaticDelegate(typeof(CloseByRef)) as CloseByRef;

                if (s_CloseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Close");

                    if (!(extensionMethod is null))
                        s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;
                }

                if (s_CloseByRef is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RowsNextResultSet.Close method", new Exception("Close"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Next");

                if (!(extensionMethod is null))
                    s_NextByRef = extensionMethod.CreateStaticDelegate(typeof(NextByRef)) as NextByRef;

                if (s_NextByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Next");

                    if (!(extensionMethod is null))
                        s_NextByVal = extensionMethod.CreateStaticDelegate(typeof(NextByVal)) as NextByVal;
                }

                if (s_NextByRef is null && s_NextByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RowsNextResultSet.Next method", new Exception("Next"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator RowsNextResultSet<T>(in ptr<T> target_ptr) => new RowsNextResultSet<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator RowsNextResultSet<T>(in T target) => new RowsNextResultSet<T>(target);

            // Enable comparisons between nil and RowsNextResultSet<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(RowsNextResultSet<T> value, NilType nil) => Activator.CreateInstance<RowsNextResultSet<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(RowsNextResultSet<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, RowsNextResultSet<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, RowsNextResultSet<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class driver_RowsNextResultSetExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.database.sql.driver_package.RowsNextResultSet target)
        {
            try
            {
                return ((go.database.sql.driver_package.RowsNextResultSet<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.database.sql.driver_package.RowsNextResultSet target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.database.sql.driver_package.RowsNextResultSet target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.database.sql.driver_package.RowsNextResultSet<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.database.sql.driver_package.RowsNextResultSet target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}