//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:10:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using reflect = go.reflect_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace database {
namespace sql
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Connector
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Connector As<T>(in T target) => (Connector<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Connector As<T>(ptr<T> target_ptr) => (Connector<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Connector? As(object target) =>
                typeof(Connector<>).CreateInterfaceHandler<Connector>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Connector<T> : Connector
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Connector(in T target) => m_target = target;

            public Connector(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate Driver ConnectByRef(ref T value, context.Context _p0);
            private delegate Driver ConnectByVal(T value, context.Context _p0);

            private static readonly ConnectByRef s_ConnectByRef;
            private static readonly ConnectByVal s_ConnectByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public Driver Connect(context.Context _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ConnectByRef is null)
                    return s_ConnectByVal!(target, _p0);

                return s_ConnectByRef(ref target, _p0);
            }

            private delegate Driver DriverByRef(ref T value);
            private delegate Driver DriverByVal(T value);

            private static readonly DriverByRef s_DriverByRef;
            private static readonly DriverByVal s_DriverByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public Driver Driver()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_DriverByRef is null)
                    return s_DriverByVal!(target);

                return s_DriverByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Connector()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Connect");

                if (!(extensionMethod is null))
                    s_ConnectByRef = extensionMethod.CreateStaticDelegate(typeof(ConnectByRef)) as ConnectByRef;

                if (s_ConnectByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Connect");

                    if (!(extensionMethod is null))
                        s_ConnectByVal = extensionMethod.CreateStaticDelegate(typeof(ConnectByVal)) as ConnectByVal;
                }

                if (s_ConnectByRef is null && s_ConnectByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Connector.Connect method", new Exception("Connect"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Driver");

                if (!(extensionMethod is null))
                    s_DriverByRef = extensionMethod.CreateStaticDelegate(typeof(DriverByRef)) as DriverByRef;

                if (s_DriverByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Driver");

                    if (!(extensionMethod is null))
                        s_DriverByVal = extensionMethod.CreateStaticDelegate(typeof(DriverByVal)) as DriverByVal;
                }

                if (s_DriverByRef is null && s_DriverByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Connector.Driver method", new Exception("Driver"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Connector<T>(in ptr<T> target_ptr) => new Connector<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Connector<T>(in T target) => new Connector<T>(target);

            // Enable comparisons between nil and Connector<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Connector<T> value, NilType nil) => Activator.CreateInstance<Connector<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Connector<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Connector<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Connector<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class driver_ConnectorExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.database.sql.driver_package.Connector target)
        {
            try
            {
                return ((go.database.sql.driver_package.Connector<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.database.sql.driver_package.Connector target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.database.sql.driver_package.Connector target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.database.sql.driver_package.Connector<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.database.sql.driver_package.Connector target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}