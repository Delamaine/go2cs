//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:11:00 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using driver = go.database.sql.driver_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using go;

namespace go {
namespace database
{
    public static partial class sql_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct DB
        {
            // Constructors
            public DB(NilType _)
            {
                this.connector = default;
                this.numClosed = default;
                this.mu = default;
                this.freeConn = default;
                this.connRequests = default;
                this.nextRequest = default;
                this.numOpen = default;
                this.openerCh = default;
                this.resetterCh = default;
                this.closed = default;
                this.dep = default;
                this.lastPut = default;
                this.maxIdle = default;
                this.maxOpen = default;
                this.maxLifetime = default;
                this.cleanerCh = default;
                this.stop = default;
            }

            public DB(driver.Connector connector = default, ulong numClosed = default, sync.Mutex mu = default, slice<ref driverConn> freeConn = default, map<ulong, channel<connRequest>> connRequests = default, ulong nextRequest = default, long numOpen = default, channel<object> openerCh = default, channel<ref driverConn> resetterCh = default, bool closed = default, map<finalCloser, depSet> dep = default, map<ref driverConn, @string> lastPut = default, long maxIdle = default, long maxOpen = default, time.Duration maxLifetime = default, channel<object> cleanerCh = default, Action stop = default)
            {
                this.connector = connector;
                this.numClosed = numClosed;
                this.mu = mu;
                this.freeConn = freeConn;
                this.connRequests = connRequests;
                this.nextRequest = nextRequest;
                this.numOpen = numOpen;
                this.openerCh = openerCh;
                this.resetterCh = resetterCh;
                this.closed = closed;
                this.dep = dep;
                this.lastPut = lastPut;
                this.maxIdle = maxIdle;
                this.maxOpen = maxOpen;
                this.maxLifetime = maxLifetime;
                this.cleanerCh = cleanerCh;
                this.stop = stop;
            }

            // Enable comparisons between nil and DB struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(DB value, NilType nil) => value.Equals(default(DB));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(DB value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, DB value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, DB value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator DB(NilType nil) => default(DB);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static DB DB_cast(dynamic value)
        {
            return new DB(value.connector, value.numClosed, value.mu, value.freeConn, value.connRequests, value.nextRequest, value.numOpen, value.openerCh, value.resetterCh, value.closed, value.dep, value.lastPut, value.maxIdle, value.maxOpen, value.maxLifetime, value.cleanerCh, value.stop);
        }
    }
}}