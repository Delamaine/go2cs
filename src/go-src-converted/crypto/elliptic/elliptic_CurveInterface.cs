//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:29:39 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using big = go.math.big_package;
using sync = go.sync_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class elliptic_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Curve
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Curve As<T>(in T target) => (Curve<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Curve As<T>(ptr<T> target_ptr) => (Curve<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Curve? As(object target) =>
                typeof(Curve<>).CreateInterfaceHandler<Curve>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Curve<T> : Curve
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Curve(in T target) => m_target = target;

            public Curve(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ref big.Int, ref big.Int) ParamsByRef(ref T value);
            private delegate (ref big.Int, ref big.Int) ParamsByVal(T value);

            private static readonly ParamsByRef s_ParamsByRef;
            private static readonly ParamsByVal s_ParamsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) Params()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ParamsByRef is null)
                    return s_ParamsByVal!(target);

                return s_ParamsByRef(ref target);
            }

            private delegate (ref big.Int, ref big.Int) IsOnCurveByRef(ref T value, ref big.Int x, ref big.Int y);
            private delegate (ref big.Int, ref big.Int) IsOnCurveByVal(T value, ref big.Int x, ref big.Int y);

            private static readonly IsOnCurveByRef s_IsOnCurveByRef;
            private static readonly IsOnCurveByVal s_IsOnCurveByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) IsOnCurve(ref big.Int x, ref big.Int y)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_IsOnCurveByRef is null)
                    return s_IsOnCurveByVal!(target, x, y);

                return s_IsOnCurveByRef(ref target, x, y);
            }

            private delegate (ref big.Int, ref big.Int) AddByRef(ref T value, ref big.Int x1, ref big.Int y1, ref big.Int x2, ref big.Int y2);
            private delegate (ref big.Int, ref big.Int) AddByVal(T value, ref big.Int x1, ref big.Int y1, ref big.Int x2, ref big.Int y2);

            private static readonly AddByRef s_AddByRef;
            private static readonly AddByVal s_AddByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) Add(ref big.Int x1, ref big.Int y1, ref big.Int x2, ref big.Int y2)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_AddByRef is null)
                    return s_AddByVal!(target, x1, y1, x2, y2);

                return s_AddByRef(ref target, x1, y1, x2, y2);
            }

            private delegate (ref big.Int, ref big.Int) DoubleByRef(ref T value, ref big.Int x1, ref big.Int y1);
            private delegate (ref big.Int, ref big.Int) DoubleByVal(T value, ref big.Int x1, ref big.Int y1);

            private static readonly DoubleByRef s_DoubleByRef;
            private static readonly DoubleByVal s_DoubleByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) Double(ref big.Int x1, ref big.Int y1)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_DoubleByRef is null)
                    return s_DoubleByVal!(target, x1, y1);

                return s_DoubleByRef(ref target, x1, y1);
            }

            private delegate (ref big.Int, ref big.Int) ScalarMultByRef(ref T value, ref big.Int x1, ref big.Int y1, slice<byte> k);
            private delegate (ref big.Int, ref big.Int) ScalarMultByVal(T value, ref big.Int x1, ref big.Int y1, slice<byte> k);

            private static readonly ScalarMultByRef s_ScalarMultByRef;
            private static readonly ScalarMultByVal s_ScalarMultByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) ScalarMult(ref big.Int x1, ref big.Int y1, slice<byte> k)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ScalarMultByRef is null)
                    return s_ScalarMultByVal!(target, x1, y1, k);

                return s_ScalarMultByRef(ref target, x1, y1, k);
            }

            private delegate (ref big.Int, ref big.Int) ScalarBaseMultByRef(ref T value, slice<byte> k);
            private delegate (ref big.Int, ref big.Int) ScalarBaseMultByVal(T value, slice<byte> k);

            private static readonly ScalarBaseMultByRef s_ScalarBaseMultByRef;
            private static readonly ScalarBaseMultByVal s_ScalarBaseMultByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref big.Int, ref big.Int) ScalarBaseMult(slice<byte> k)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ScalarBaseMultByRef is null)
                    return s_ScalarBaseMultByVal!(target, k);

                return s_ScalarBaseMultByRef(ref target, k);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Curve()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Params");

                if (!(extensionMethod is null))
                    s_ParamsByRef = extensionMethod.CreateStaticDelegate(typeof(ParamsByRef)) as ParamsByRef;

                if (s_ParamsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Params");

                    if (!(extensionMethod is null))
                        s_ParamsByVal = extensionMethod.CreateStaticDelegate(typeof(ParamsByVal)) as ParamsByVal;
                }

                if (s_ParamsByRef is null && s_ParamsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.Params method", new Exception("Params"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("IsOnCurve");

                if (!(extensionMethod is null))
                    s_IsOnCurveByRef = extensionMethod.CreateStaticDelegate(typeof(IsOnCurveByRef)) as IsOnCurveByRef;

                if (s_IsOnCurveByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("IsOnCurve");

                    if (!(extensionMethod is null))
                        s_IsOnCurveByVal = extensionMethod.CreateStaticDelegate(typeof(IsOnCurveByVal)) as IsOnCurveByVal;
                }

                if (s_IsOnCurveByRef is null && s_IsOnCurveByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.IsOnCurve method", new Exception("IsOnCurve"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Add");

                if (!(extensionMethod is null))
                    s_AddByRef = extensionMethod.CreateStaticDelegate(typeof(AddByRef)) as AddByRef;

                if (s_AddByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Add");

                    if (!(extensionMethod is null))
                        s_AddByVal = extensionMethod.CreateStaticDelegate(typeof(AddByVal)) as AddByVal;
                }

                if (s_AddByRef is null && s_AddByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.Add method", new Exception("Add"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Double");

                if (!(extensionMethod is null))
                    s_DoubleByRef = extensionMethod.CreateStaticDelegate(typeof(DoubleByRef)) as DoubleByRef;

                if (s_DoubleByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Double");

                    if (!(extensionMethod is null))
                        s_DoubleByVal = extensionMethod.CreateStaticDelegate(typeof(DoubleByVal)) as DoubleByVal;
                }

                if (s_DoubleByRef is null && s_DoubleByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.Double method", new Exception("Double"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("ScalarMult");

                if (!(extensionMethod is null))
                    s_ScalarMultByRef = extensionMethod.CreateStaticDelegate(typeof(ScalarMultByRef)) as ScalarMultByRef;

                if (s_ScalarMultByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ScalarMult");

                    if (!(extensionMethod is null))
                        s_ScalarMultByVal = extensionMethod.CreateStaticDelegate(typeof(ScalarMultByVal)) as ScalarMultByVal;
                }

                if (s_ScalarMultByRef is null && s_ScalarMultByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.ScalarMult method", new Exception("ScalarMult"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("ScalarBaseMult");

                if (!(extensionMethod is null))
                    s_ScalarBaseMultByRef = extensionMethod.CreateStaticDelegate(typeof(ScalarBaseMultByRef)) as ScalarBaseMultByRef;

                if (s_ScalarBaseMultByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ScalarBaseMult");

                    if (!(extensionMethod is null))
                        s_ScalarBaseMultByVal = extensionMethod.CreateStaticDelegate(typeof(ScalarBaseMultByVal)) as ScalarBaseMultByVal;
                }

                if (s_ScalarBaseMultByRef is null && s_ScalarBaseMultByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Curve.ScalarBaseMult method", new Exception("ScalarBaseMult"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Curve<T>(in ptr<T> target_ptr) => new Curve<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Curve<T>(in T target) => new Curve<T>(target);

            // Enable comparisons between nil and Curve<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Curve<T> value, NilType nil) => Activator.CreateInstance<Curve<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Curve<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Curve<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Curve<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class elliptic_CurveExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.elliptic_package.Curve target)
        {
            try
            {
                return ((go.crypto.elliptic_package.Curve<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.elliptic_package.Curve target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.elliptic_package.Curve target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.elliptic_package.Curve<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.elliptic_package.Curve target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}