//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:31:25 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using strings = go.strings_package;
using go;

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct clientHelloMsg
        {
            // Constructors
            public clientHelloMsg(NilType _)
            {
                this.raw = default;
                this.vers = default;
                this.random = default;
                this.sessionId = default;
                this.cipherSuites = default;
                this.compressionMethods = default;
                this.nextProtoNeg = default;
                this.serverName = default;
                this.ocspStapling = default;
                this.scts = default;
                this.supportedCurves = default;
                this.supportedPoints = default;
                this.ticketSupported = default;
                this.sessionTicket = default;
                this.supportedSignatureAlgorithms = default;
                this.secureRenegotiation = default;
                this.secureRenegotiationSupported = default;
                this.alpnProtocols = default;
            }

            public clientHelloMsg(slice<byte> raw = default, ushort vers = default, slice<byte> random = default, slice<byte> sessionId = default, slice<ushort> cipherSuites = default, slice<byte> compressionMethods = default, bool nextProtoNeg = default, @string serverName = default, bool ocspStapling = default, bool scts = default, slice<CurveID> supportedCurves = default, slice<byte> supportedPoints = default, bool ticketSupported = default, slice<byte> sessionTicket = default, slice<SignatureScheme> supportedSignatureAlgorithms = default, slice<byte> secureRenegotiation = default, bool secureRenegotiationSupported = default, slice<@string> alpnProtocols = default)
            {
                this.raw = raw;
                this.vers = vers;
                this.random = random;
                this.sessionId = sessionId;
                this.cipherSuites = cipherSuites;
                this.compressionMethods = compressionMethods;
                this.nextProtoNeg = nextProtoNeg;
                this.serverName = serverName;
                this.ocspStapling = ocspStapling;
                this.scts = scts;
                this.supportedCurves = supportedCurves;
                this.supportedPoints = supportedPoints;
                this.ticketSupported = ticketSupported;
                this.sessionTicket = sessionTicket;
                this.supportedSignatureAlgorithms = supportedSignatureAlgorithms;
                this.secureRenegotiation = secureRenegotiation;
                this.secureRenegotiationSupported = secureRenegotiationSupported;
                this.alpnProtocols = alpnProtocols;
            }

            // Enable comparisons between nil and clientHelloMsg struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(clientHelloMsg value, NilType nil) => value.Equals(default(clientHelloMsg));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(clientHelloMsg value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, clientHelloMsg value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, clientHelloMsg value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator clientHelloMsg(NilType nil) => default(clientHelloMsg);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static clientHelloMsg clientHelloMsg_cast(dynamic value)
        {
            return new clientHelloMsg(value.raw, value.vers, value.random, value.sessionId, value.cipherSuites, value.compressionMethods, value.nextProtoNeg, value.serverName, value.ocspStapling, value.scts, value.supportedCurves, value.supportedPoints, value.ticketSupported, value.sessionTicket, value.supportedSignatureAlgorithms, value.secureRenegotiation, value.secureRenegotiationSupported, value.alpnProtocols);
        }
    }
}}