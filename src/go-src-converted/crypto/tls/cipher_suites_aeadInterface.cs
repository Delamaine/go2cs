//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:28:30 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using aes = go.crypto.aes_package;
using cipher = go.crypto.cipher_package;
using des = go.crypto.des_package;
using hmac = go.crypto.hmac_package;
using rc4 = go.crypto.rc4_package;
using sha1 = go.crypto.sha1_package;
using sha256 = go.crypto.sha256_package;
using x509 = go.crypto.x509_package;
using hash = go.hash_package;
using chacha20poly1305 = go.golang_org.x.crypto.chacha20poly1305_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface aead
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static aead As<T>(in T target) => (aead<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static aead As<T>(ptr<T> target_ptr) => (aead<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static aead? As(object target) =>
                typeof(aead<>).CreateInterfaceHandler<aead>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class aead<T> : aead
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public aead(in T target) => m_target = target;

            public aead(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate long explicitNonceLenByRef(ref T value);
            private delegate long explicitNonceLenByVal(T value);

            private static readonly explicitNonceLenByRef s_explicitNonceLenByRef;
            private static readonly explicitNonceLenByVal s_explicitNonceLenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long explicitNonceLen()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_explicitNonceLenByRef is null)
                    return s_explicitNonceLenByVal!(target);

                return s_explicitNonceLenByRef(ref target);
            }

            private delegate (slice<byte>, error) NonceSizeByRef(ref T value);
            private delegate (slice<byte>, error) NonceSizeByVal(T value);

            private static readonly NonceSizeByRef s_NonceSizeByRef;
            private static readonly NonceSizeByVal s_NonceSizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) NonceSize()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NonceSizeByRef is null)
                    return s_NonceSizeByVal!(target);

                return s_NonceSizeByRef(ref target);
            }

            private delegate (slice<byte>, error) OverheadByRef(ref T value);
            private delegate (slice<byte>, error) OverheadByVal(T value);

            private static readonly OverheadByRef s_OverheadByRef;
            private static readonly OverheadByVal s_OverheadByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) Overhead()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_OverheadByRef is null)
                    return s_OverheadByVal!(target);

                return s_OverheadByRef(ref target);
            }

            private delegate (slice<byte>, error) SealByRef(ref T value, slice<byte> dst, slice<byte> nonce, slice<byte> plaintext, slice<byte> additionalData);
            private delegate (slice<byte>, error) SealByVal(T value, slice<byte> dst, slice<byte> nonce, slice<byte> plaintext, slice<byte> additionalData);

            private static readonly SealByRef s_SealByRef;
            private static readonly SealByVal s_SealByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) Seal(slice<byte> dst, slice<byte> nonce, slice<byte> plaintext, slice<byte> additionalData)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SealByRef is null)
                    return s_SealByVal!(target, dst, nonce, plaintext, additionalData);

                return s_SealByRef(ref target, dst, nonce, plaintext, additionalData);
            }

            private delegate (slice<byte>, error) OpenByRef(ref T value, slice<byte> dst, slice<byte> nonce, slice<byte> ciphertext, slice<byte> additionalData);
            private delegate (slice<byte>, error) OpenByVal(T value, slice<byte> dst, slice<byte> nonce, slice<byte> ciphertext, slice<byte> additionalData);

            private static readonly OpenByRef s_OpenByRef;
            private static readonly OpenByVal s_OpenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) Open(slice<byte> dst, slice<byte> nonce, slice<byte> ciphertext, slice<byte> additionalData)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_OpenByRef is null)
                    return s_OpenByVal!(target, dst, nonce, ciphertext, additionalData);

                return s_OpenByRef(ref target, dst, nonce, ciphertext, additionalData);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static aead()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("explicitNonceLen");

                if (!(extensionMethod is null))
                    s_explicitNonceLenByRef = extensionMethod.CreateStaticDelegate(typeof(explicitNonceLenByRef)) as explicitNonceLenByRef;

                if (s_explicitNonceLenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("explicitNonceLen");

                    if (!(extensionMethod is null))
                        s_explicitNonceLenByVal = extensionMethod.CreateStaticDelegate(typeof(explicitNonceLenByVal)) as explicitNonceLenByVal;
                }

                if (s_explicitNonceLenByRef is null && s_explicitNonceLenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement aead.explicitNonceLen method", new Exception("explicitNonceLen"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NonceSize");

                if (!(extensionMethod is null))
                    s_NonceSizeByRef = extensionMethod.CreateStaticDelegate(typeof(NonceSizeByRef)) as NonceSizeByRef;

                if (s_NonceSizeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NonceSize");

                    if (!(extensionMethod is null))
                        s_NonceSizeByVal = extensionMethod.CreateStaticDelegate(typeof(NonceSizeByVal)) as NonceSizeByVal;
                }

                if (s_NonceSizeByRef is null && s_NonceSizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement aead.NonceSize method", new Exception("NonceSize"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Overhead");

                if (!(extensionMethod is null))
                    s_OverheadByRef = extensionMethod.CreateStaticDelegate(typeof(OverheadByRef)) as OverheadByRef;

                if (s_OverheadByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Overhead");

                    if (!(extensionMethod is null))
                        s_OverheadByVal = extensionMethod.CreateStaticDelegate(typeof(OverheadByVal)) as OverheadByVal;
                }

                if (s_OverheadByRef is null && s_OverheadByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement aead.Overhead method", new Exception("Overhead"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Seal");

                if (!(extensionMethod is null))
                    s_SealByRef = extensionMethod.CreateStaticDelegate(typeof(SealByRef)) as SealByRef;

                if (s_SealByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Seal");

                    if (!(extensionMethod is null))
                        s_SealByVal = extensionMethod.CreateStaticDelegate(typeof(SealByVal)) as SealByVal;
                }

                if (s_SealByRef is null && s_SealByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement aead.Seal method", new Exception("Seal"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Open");

                if (!(extensionMethod is null))
                    s_OpenByRef = extensionMethod.CreateStaticDelegate(typeof(OpenByRef)) as OpenByRef;

                if (s_OpenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Open");

                    if (!(extensionMethod is null))
                        s_OpenByVal = extensionMethod.CreateStaticDelegate(typeof(OpenByVal)) as OpenByVal;
                }

                if (s_OpenByRef is null && s_OpenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement aead.Open method", new Exception("Open"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator aead<T>(in ptr<T> target_ptr) => new aead<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator aead<T>(in T target) => new aead<T>(target);

            // Enable comparisons between nil and aead<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(aead<T> value, NilType nil) => Activator.CreateInstance<aead<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(aead<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, aead<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, aead<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class tls_aeadExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.tls_package.aead target)
        {
            try
            {
                return ((go.crypto.tls_package.aead<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.tls_package.aead target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.tls_package.aead target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.tls_package.aead<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.tls_package.aead target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}