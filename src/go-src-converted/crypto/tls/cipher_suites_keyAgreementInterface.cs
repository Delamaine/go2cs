//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:28:30 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using aes = go.crypto.aes_package;
using cipher = go.crypto.cipher_package;
using des = go.crypto.des_package;
using hmac = go.crypto.hmac_package;
using rc4 = go.crypto.rc4_package;
using sha1 = go.crypto.sha1_package;
using sha256 = go.crypto.sha256_package;
using x509 = go.crypto.x509_package;
using hash = go.hash_package;
using chacha20poly1305 = go.golang_org.x.crypto.chacha20poly1305_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface keyAgreement
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement As<T>(in T target) => (keyAgreement<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement As<T>(ptr<T> target_ptr) => (keyAgreement<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement? As(object target) =>
                typeof(keyAgreement<>).CreateInterfaceHandler<keyAgreement>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class keyAgreement<T> : keyAgreement
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public keyAgreement(in T target) => m_target = target;

            public keyAgreement(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) generateServerKeyExchangeByRef(ref T value, ref Config _p0, ref Certificate _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0);
            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) generateServerKeyExchangeByVal(T value, ref Config _p0, ref Certificate _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0);

            private static readonly generateServerKeyExchangeByRef s_generateServerKeyExchangeByRef;
            private static readonly generateServerKeyExchangeByVal s_generateServerKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ref clientKeyExchangeMsg, error) generateServerKeyExchange(ref Config _p0, ref Certificate _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_generateServerKeyExchangeByRef is null)
                    return s_generateServerKeyExchangeByVal!(target, _p0, _p0, _p0, _p0);

                return s_generateServerKeyExchangeByRef(ref target, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) processClientKeyExchangeByRef(ref T value, ref Config _p0, ref Certificate _p0, ref clientKeyExchangeMsg _p0, ushort _p0);
            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) processClientKeyExchangeByVal(T value, ref Config _p0, ref Certificate _p0, ref clientKeyExchangeMsg _p0, ushort _p0);

            private static readonly processClientKeyExchangeByRef s_processClientKeyExchangeByRef;
            private static readonly processClientKeyExchangeByVal s_processClientKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ref clientKeyExchangeMsg, error) processClientKeyExchange(ref Config _p0, ref Certificate _p0, ref clientKeyExchangeMsg _p0, ushort _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_processClientKeyExchangeByRef is null)
                    return s_processClientKeyExchangeByVal!(target, _p0, _p0, _p0, _p0);

                return s_processClientKeyExchangeByRef(ref target, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) processServerKeyExchangeByRef(ref T value, ref Config _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0, ref x509.Certificate _p0, ref serverKeyExchangeMsg _p0);
            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) processServerKeyExchangeByVal(T value, ref Config _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0, ref x509.Certificate _p0, ref serverKeyExchangeMsg _p0);

            private static readonly processServerKeyExchangeByRef s_processServerKeyExchangeByRef;
            private static readonly processServerKeyExchangeByVal s_processServerKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ref clientKeyExchangeMsg, error) processServerKeyExchange(ref Config _p0, ref clientHelloMsg _p0, ref serverHelloMsg _p0, ref x509.Certificate _p0, ref serverKeyExchangeMsg _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_processServerKeyExchangeByRef is null)
                    return s_processServerKeyExchangeByVal!(target, _p0, _p0, _p0, _p0, _p0);

                return s_processServerKeyExchangeByRef(ref target, _p0, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) generateClientKeyExchangeByRef(ref T value, ref Config _p0, ref clientHelloMsg _p0, ref x509.Certificate _p0);
            private delegate (slice<byte>, ref clientKeyExchangeMsg, error) generateClientKeyExchangeByVal(T value, ref Config _p0, ref clientHelloMsg _p0, ref x509.Certificate _p0);

            private static readonly generateClientKeyExchangeByRef s_generateClientKeyExchangeByRef;
            private static readonly generateClientKeyExchangeByVal s_generateClientKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ref clientKeyExchangeMsg, error) generateClientKeyExchange(ref Config _p0, ref clientHelloMsg _p0, ref x509.Certificate _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_generateClientKeyExchangeByRef is null)
                    return s_generateClientKeyExchangeByVal!(target, _p0, _p0, _p0);

                return s_generateClientKeyExchangeByRef(ref target, _p0, _p0, _p0);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static keyAgreement()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("generateServerKeyExchange");

                if (!(extensionMethod is null))
                    s_generateServerKeyExchangeByRef = extensionMethod.CreateStaticDelegate(typeof(generateServerKeyExchangeByRef)) as generateServerKeyExchangeByRef;

                if (s_generateServerKeyExchangeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("generateServerKeyExchange");

                    if (!(extensionMethod is null))
                        s_generateServerKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(generateServerKeyExchangeByVal)) as generateServerKeyExchangeByVal;
                }

                if (s_generateServerKeyExchangeByRef is null && s_generateServerKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.generateServerKeyExchange method", new Exception("generateServerKeyExchange"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("processClientKeyExchange");

                if (!(extensionMethod is null))
                    s_processClientKeyExchangeByRef = extensionMethod.CreateStaticDelegate(typeof(processClientKeyExchangeByRef)) as processClientKeyExchangeByRef;

                if (s_processClientKeyExchangeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("processClientKeyExchange");

                    if (!(extensionMethod is null))
                        s_processClientKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(processClientKeyExchangeByVal)) as processClientKeyExchangeByVal;
                }

                if (s_processClientKeyExchangeByRef is null && s_processClientKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.processClientKeyExchange method", new Exception("processClientKeyExchange"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("processServerKeyExchange");

                if (!(extensionMethod is null))
                    s_processServerKeyExchangeByRef = extensionMethod.CreateStaticDelegate(typeof(processServerKeyExchangeByRef)) as processServerKeyExchangeByRef;

                if (s_processServerKeyExchangeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("processServerKeyExchange");

                    if (!(extensionMethod is null))
                        s_processServerKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(processServerKeyExchangeByVal)) as processServerKeyExchangeByVal;
                }

                if (s_processServerKeyExchangeByRef is null && s_processServerKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.processServerKeyExchange method", new Exception("processServerKeyExchange"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("generateClientKeyExchange");

                if (!(extensionMethod is null))
                    s_generateClientKeyExchangeByRef = extensionMethod.CreateStaticDelegate(typeof(generateClientKeyExchangeByRef)) as generateClientKeyExchangeByRef;

                if (s_generateClientKeyExchangeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("generateClientKeyExchange");

                    if (!(extensionMethod is null))
                        s_generateClientKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(generateClientKeyExchangeByVal)) as generateClientKeyExchangeByVal;
                }

                if (s_generateClientKeyExchangeByRef is null && s_generateClientKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.generateClientKeyExchange method", new Exception("generateClientKeyExchange"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator keyAgreement<T>(in ptr<T> target_ptr) => new keyAgreement<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator keyAgreement<T>(in T target) => new keyAgreement<T>(target);

            // Enable comparisons between nil and keyAgreement<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(keyAgreement<T> value, NilType nil) => Activator.CreateInstance<keyAgreement<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(keyAgreement<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, keyAgreement<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, keyAgreement<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class tls_keyAgreementExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.tls_package.keyAgreement target)
        {
            try
            {
                return ((go.crypto.tls_package.keyAgreement<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.tls_package.keyAgreement target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.tls_package.keyAgreement target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.tls_package.keyAgreement<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.tls_package.keyAgreement target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}