//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:31:03 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using list = go.container.list_package;
using crypto = go.crypto_package;
using cipherhw = go.crypto.@internal.cipherhw_package;
using rand = go.crypto.rand_package;
using sha512 = go.crypto.sha512_package;
using x509 = go.crypto.x509_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using big = go.math.big_package;
using net = go.net_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ClientSessionCache
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientSessionCache As<T>(in T target) => (ClientSessionCache<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientSessionCache As<T>(ptr<T> target_ptr) => (ClientSessionCache<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientSessionCache? As(object target) =>
                typeof(ClientSessionCache<>).CreateInterfaceHandler<ClientSessionCache>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ClientSessionCache<T> : ClientSessionCache
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public ClientSessionCache(in T target) => m_target = target;

            public ClientSessionCache(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ref ClientSessionState, bool) GetByRef(ref T value, @string sessionKey);
            private delegate (ref ClientSessionState, bool) GetByVal(T value, @string sessionKey);

            private static readonly GetByRef s_GetByRef;
            private static readonly GetByVal s_GetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref ClientSessionState, bool) Get(@string sessionKey)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_GetByRef is null)
                    return s_GetByVal!(target, sessionKey);

                return s_GetByRef(ref target, sessionKey);
            }

            private delegate (ref ClientSessionState, bool) PutByRef(ref T value, @string sessionKey, ref ClientSessionState cs);
            private delegate (ref ClientSessionState, bool) PutByVal(T value, @string sessionKey, ref ClientSessionState cs);

            private static readonly PutByRef s_PutByRef;
            private static readonly PutByVal s_PutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref ClientSessionState, bool) Put(@string sessionKey, ref ClientSessionState cs)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PutByRef is null)
                    return s_PutByVal!(target, sessionKey, cs);

                return s_PutByRef(ref target, sessionKey, cs);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static ClientSessionCache()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Get");

                if (!(extensionMethod is null))
                    s_GetByRef = extensionMethod.CreateStaticDelegate(typeof(GetByRef)) as GetByRef;

                if (s_GetByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Get");

                    if (!(extensionMethod is null))
                        s_GetByVal = extensionMethod.CreateStaticDelegate(typeof(GetByVal)) as GetByVal;
                }

                if (s_GetByRef is null && s_GetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientSessionCache.Get method", new Exception("Get"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Put");

                if (!(extensionMethod is null))
                    s_PutByRef = extensionMethod.CreateStaticDelegate(typeof(PutByRef)) as PutByRef;

                if (s_PutByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Put");

                    if (!(extensionMethod is null))
                        s_PutByVal = extensionMethod.CreateStaticDelegate(typeof(PutByVal)) as PutByVal;
                }

                if (s_PutByRef is null && s_PutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientSessionCache.Put method", new Exception("Put"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ClientSessionCache<T>(in ptr<T> target_ptr) => new ClientSessionCache<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ClientSessionCache<T>(in T target) => new ClientSessionCache<T>(target);

            // Enable comparisons between nil and ClientSessionCache<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ClientSessionCache<T> value, NilType nil) => Activator.CreateInstance<ClientSessionCache<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ClientSessionCache<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ClientSessionCache<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ClientSessionCache<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class tls_ClientSessionCacheExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.tls_package.ClientSessionCache target)
        {
            try
            {
                return ((go.crypto.tls_package.ClientSessionCache<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.tls_package.ClientSessionCache target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.tls_package.ClientSessionCache target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.tls_package.ClientSessionCache<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.tls_package.ClientSessionCache target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}