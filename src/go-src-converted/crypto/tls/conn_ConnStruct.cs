//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:31:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using cipher = go.crypto.cipher_package;
using subtle = go.crypto.subtle_package;
using x509 = go.crypto.x509_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using net = go.net_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using go;

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Conn
        {
            // Constructors
            public Conn(NilType _)
            {
                this.conn = default;
                this.isClient = default;
                this.handshakeMutex = default;
                this.handshakeCond = default;
                this.handshakeErr = default;
                this.vers = default;
                this.haveVers = default;
                this.config = default;
                this.handshakeComplete = default;
                this.handshakes = default;
                this.didResume = default;
                this.cipherSuite = default;
                this.ocspResponse = default;
                this.scts = default;
                this.peerCertificates = default;
                this.verifiedChains = default;
                this.serverName = default;
                this.secureRenegotiation = default;
                this.clientFinishedIsFirst = default;
                this.closeNotifyErr = default;
                this.closeNotifySent = default;
                this.clientFinished = default;
                this.serverFinished = default;
                this.clientProtocol = default;
                this.clientProtocolFallback = default;
                this.@in = default;
                this.@out = default;
                this.rawInput = default;
                this.input = default;
                this.hand = default;
                this.buffering = default;
                this.sendBuf = default;
                this.bytesSent = default;
                this.packetsSent = default;
                this.warnCount = default;
                this.activeCall = default;
                this.tmp = default;
            }

            public Conn(net.Conn conn = default, bool isClient = default, sync.Mutex handshakeMutex = default, ref ptr<sync.Cond> handshakeCond = default, error handshakeErr = default, ushort vers = default, bool haveVers = default, ref ptr<Config> config = default, bool handshakeComplete = default, long handshakes = default, bool didResume = default, ushort cipherSuite = default, slice<byte> ocspResponse = default, slice<slice<byte>> scts = default, slice<ref x509.Certificate> peerCertificates = default, slice<slice<ref x509.Certificate>> verifiedChains = default, @string serverName = default, bool secureRenegotiation = default, bool clientFinishedIsFirst = default, error closeNotifyErr = default, bool closeNotifySent = default, array<byte> clientFinished = default, array<byte> serverFinished = default, @string clientProtocol = default, bool clientProtocolFallback = default, halfConn @in = default, halfConn @out = default, ref ptr<block> rawInput = default, ref ptr<block> input = default, bytes.Buffer hand = default, bool buffering = default, slice<byte> sendBuf = default, long bytesSent = default, long packetsSent = default, long warnCount = default, int activeCall = default, array<byte> tmp = default)
            {
                this.conn = conn;
                this.isClient = isClient;
                this.handshakeMutex = handshakeMutex;
                this.handshakeCond = handshakeCond;
                this.handshakeErr = handshakeErr;
                this.vers = vers;
                this.haveVers = haveVers;
                this.config = config;
                this.handshakeComplete = handshakeComplete;
                this.handshakes = handshakes;
                this.didResume = didResume;
                this.cipherSuite = cipherSuite;
                this.ocspResponse = ocspResponse;
                this.scts = scts;
                this.peerCertificates = peerCertificates;
                this.verifiedChains = verifiedChains;
                this.serverName = serverName;
                this.secureRenegotiation = secureRenegotiation;
                this.clientFinishedIsFirst = clientFinishedIsFirst;
                this.closeNotifyErr = closeNotifyErr;
                this.closeNotifySent = closeNotifySent;
                this.clientFinished = clientFinished;
                this.serverFinished = serverFinished;
                this.clientProtocol = clientProtocol;
                this.clientProtocolFallback = clientProtocolFallback;
                this.@in = @in;
                this.@out = @out;
                this.rawInput = rawInput;
                this.input = input;
                this.hand = hand;
                this.buffering = buffering;
                this.sendBuf = sendBuf;
                this.bytesSent = bytesSent;
                this.packetsSent = packetsSent;
                this.warnCount = warnCount;
                this.activeCall = activeCall;
                this.tmp = tmp;
            }

            // Enable comparisons between nil and Conn struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Conn value, NilType nil) => value.Equals(default(Conn));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Conn value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Conn value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Conn value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Conn(NilType nil) => default(Conn);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Conn Conn_cast(dynamic value)
        {
            return new Conn(value.conn, value.isClient, value.handshakeMutex, ref value.handshakeCond, value.handshakeErr, value.vers, value.haveVers, ref value.config, value.handshakeComplete, value.handshakes, value.didResume, value.cipherSuite, value.ocspResponse, value.scts, value.peerCertificates, value.verifiedChains, value.serverName, value.secureRenegotiation, value.clientFinishedIsFirst, value.closeNotifyErr, value.closeNotifySent, value.clientFinished, value.serverFinished, value.clientProtocol, value.clientProtocolFallback, value.@in, value.@out, ref value.rawInput, ref value.input, value.hand, value.buffering, value.sendBuf, value.bytesSent, value.packetsSent, value.warnCount, value.activeCall, value.tmp);
        }
    }
}}