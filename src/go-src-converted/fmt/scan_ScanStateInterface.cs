//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:45:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using io = go.io_package;
using math = go.math_package;
using os = go.os_package;
using reflect = go.reflect_package;
using strconv = go.strconv_package;
using sync = go.sync_package;
using utf8 = go.unicode.utf8_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class fmt_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ScanState
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ScanState As<T>(in T target) => (ScanState<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ScanState As<T>(ptr<T> target_ptr) => (ScanState<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ScanState? As(object target) =>
                typeof(ScanState<>).CreateInterfaceHandler<ScanState>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ScanState<T> : ScanState
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public ScanState(in T target) => m_target = target;

            public ScanState(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (long, error) ReadRuneByRef(ref T value);
            private delegate (long, error) ReadRuneByVal(T value);

            private static readonly ReadRuneByRef s_ReadRuneByRef;
            private static readonly ReadRuneByVal s_ReadRuneByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) ReadRune()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ReadRuneByRef is null)
                    return s_ReadRuneByVal!(target);

                return s_ReadRuneByRef(ref target);
            }

            private delegate (long, error) UnreadRuneByRef(ref T value);
            private delegate (long, error) UnreadRuneByVal(T value);

            private static readonly UnreadRuneByRef s_UnreadRuneByRef;
            private static readonly UnreadRuneByVal s_UnreadRuneByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) UnreadRune()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_UnreadRuneByRef is null)
                    return s_UnreadRuneByVal!(target);

                return s_UnreadRuneByRef(ref target);
            }

            private delegate (long, error) SkipSpaceByRef(ref T value);
            private delegate (long, error) SkipSpaceByVal(T value);

            private static readonly SkipSpaceByRef s_SkipSpaceByRef;
            private static readonly SkipSpaceByVal s_SkipSpaceByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) SkipSpace()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SkipSpaceByRef is null)
                    return s_SkipSpaceByVal!(target);

                return s_SkipSpaceByRef(ref target);
            }

            private delegate (long, error) TokenByRef(ref T value, bool skipSpace, Func<int, bool> f);
            private delegate (long, error) TokenByVal(T value, bool skipSpace, Func<int, bool> f);

            private static readonly TokenByRef s_TokenByRef;
            private static readonly TokenByVal s_TokenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) Token(bool skipSpace, Func<int, bool> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_TokenByRef is null)
                    return s_TokenByVal!(target, skipSpace, f);

                return s_TokenByRef(ref target, skipSpace, f);
            }

            private delegate (long, error) WidthByRef(ref T value);
            private delegate (long, error) WidthByVal(T value);

            private static readonly WidthByRef s_WidthByRef;
            private static readonly WidthByVal s_WidthByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) Width()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WidthByRef is null)
                    return s_WidthByVal!(target);

                return s_WidthByRef(ref target);
            }

            private delegate (long, error) ReadByRef(ref T value, slice<byte> buf);
            private delegate (long, error) ReadByVal(T value, slice<byte> buf);

            private static readonly ReadByRef s_ReadByRef;
            private static readonly ReadByVal s_ReadByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) Read(slice<byte> buf)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ReadByRef is null)
                    return s_ReadByVal!(target, buf);

                return s_ReadByRef(ref target, buf);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static ScanState()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("ReadRune");

                if (!(extensionMethod is null))
                    s_ReadRuneByRef = extensionMethod.CreateStaticDelegate(typeof(ReadRuneByRef)) as ReadRuneByRef;

                if (s_ReadRuneByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ReadRune");

                    if (!(extensionMethod is null))
                        s_ReadRuneByVal = extensionMethod.CreateStaticDelegate(typeof(ReadRuneByVal)) as ReadRuneByVal;
                }

                if (s_ReadRuneByRef is null && s_ReadRuneByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.ReadRune method", new Exception("ReadRune"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("UnreadRune");

                if (!(extensionMethod is null))
                    s_UnreadRuneByRef = extensionMethod.CreateStaticDelegate(typeof(UnreadRuneByRef)) as UnreadRuneByRef;

                if (s_UnreadRuneByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("UnreadRune");

                    if (!(extensionMethod is null))
                        s_UnreadRuneByVal = extensionMethod.CreateStaticDelegate(typeof(UnreadRuneByVal)) as UnreadRuneByVal;
                }

                if (s_UnreadRuneByRef is null && s_UnreadRuneByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.UnreadRune method", new Exception("UnreadRune"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("SkipSpace");

                if (!(extensionMethod is null))
                    s_SkipSpaceByRef = extensionMethod.CreateStaticDelegate(typeof(SkipSpaceByRef)) as SkipSpaceByRef;

                if (s_SkipSpaceByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SkipSpace");

                    if (!(extensionMethod is null))
                        s_SkipSpaceByVal = extensionMethod.CreateStaticDelegate(typeof(SkipSpaceByVal)) as SkipSpaceByVal;
                }

                if (s_SkipSpaceByRef is null && s_SkipSpaceByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.SkipSpace method", new Exception("SkipSpace"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Token");

                if (!(extensionMethod is null))
                    s_TokenByRef = extensionMethod.CreateStaticDelegate(typeof(TokenByRef)) as TokenByRef;

                if (s_TokenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Token");

                    if (!(extensionMethod is null))
                        s_TokenByVal = extensionMethod.CreateStaticDelegate(typeof(TokenByVal)) as TokenByVal;
                }

                if (s_TokenByRef is null && s_TokenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.Token method", new Exception("Token"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Width");

                if (!(extensionMethod is null))
                    s_WidthByRef = extensionMethod.CreateStaticDelegate(typeof(WidthByRef)) as WidthByRef;

                if (s_WidthByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Width");

                    if (!(extensionMethod is null))
                        s_WidthByVal = extensionMethod.CreateStaticDelegate(typeof(WidthByVal)) as WidthByVal;
                }

                if (s_WidthByRef is null && s_WidthByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.Width method", new Exception("Width"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Read");

                if (!(extensionMethod is null))
                    s_ReadByRef = extensionMethod.CreateStaticDelegate(typeof(ReadByRef)) as ReadByRef;

                if (s_ReadByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Read");

                    if (!(extensionMethod is null))
                        s_ReadByVal = extensionMethod.CreateStaticDelegate(typeof(ReadByVal)) as ReadByVal;
                }

                if (s_ReadByRef is null && s_ReadByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ScanState.Read method", new Exception("Read"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ScanState<T>(in ptr<T> target_ptr) => new ScanState<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ScanState<T>(in T target) => new ScanState<T>(target);

            // Enable comparisons between nil and ScanState<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ScanState<T> value, NilType nil) => Activator.CreateInstance<ScanState<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ScanState<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ScanState<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ScanState<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class fmt_ScanStateExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.fmt_package.ScanState target)
        {
            try
            {
                return ((go.fmt_package.ScanState<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.fmt_package.ScanState target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.fmt_package.ScanState target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.fmt_package.ScanState<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.fmt_package.ScanState target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}