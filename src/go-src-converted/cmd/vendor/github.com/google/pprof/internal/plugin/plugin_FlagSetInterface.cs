//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:05:43 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using http = go.net.http_package;
using regexp = go.regexp_package;
using time = go.time_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class plugin_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface FlagSet
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet As<T>(in T target) => (FlagSet<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet As<T>(ptr<T> target_ptr) => (FlagSet<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet? As(object target) =>
                typeof(FlagSet<>).CreateInterfaceHandler<FlagSet>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class FlagSet<T> : FlagSet
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public FlagSet(in T target) => m_target = target;

            public FlagSet(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate slice<@string> BoolByRef(ref T value, @string name, bool def, @string usage);
            private delegate slice<@string> BoolByVal(T value, @string name, bool def, @string usage);

            private static readonly BoolByRef s_BoolByRef;
            private static readonly BoolByVal s_BoolByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Bool(@string name, bool def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BoolByRef is null)
                    return s_BoolByVal!(target, name, def, usage);

                return s_BoolByRef(ref target, name, def, usage);
            }

            private delegate slice<@string> IntByRef(ref T value, @string name, long def, @string usage);
            private delegate slice<@string> IntByVal(T value, @string name, long def, @string usage);

            private static readonly IntByRef s_IntByRef;
            private static readonly IntByVal s_IntByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Int(@string name, long def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_IntByRef is null)
                    return s_IntByVal!(target, name, def, usage);

                return s_IntByRef(ref target, name, def, usage);
            }

            private delegate slice<@string> Float64ByRef(ref T value, @string name, double def, @string usage);
            private delegate slice<@string> Float64ByVal(T value, @string name, double def, @string usage);

            private static readonly Float64ByRef s_Float64ByRef;
            private static readonly Float64ByVal s_Float64ByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Float64(@string name, double def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_Float64ByRef is null)
                    return s_Float64ByVal!(target, name, def, usage);

                return s_Float64ByRef(ref target, name, def, usage);
            }

            private delegate slice<@string> StringByRef(ref T value, @string name, @string def, @string usage);
            private delegate slice<@string> StringByVal(T value, @string name, @string def, @string usage);

            private static readonly StringByRef s_StringByRef;
            private static readonly StringByVal s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> String(@string name, @string def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringByRef is null)
                    return s_StringByVal!(target, name, def, usage);

                return s_StringByRef(ref target, name, def, usage);
            }

            private delegate slice<@string> BoolVarByRef(ref T value, ref bool pointer, @string name, bool def, @string usage);
            private delegate slice<@string> BoolVarByVal(T value, ref bool pointer, @string name, bool def, @string usage);

            private static readonly BoolVarByRef s_BoolVarByRef;
            private static readonly BoolVarByVal s_BoolVarByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> BoolVar(ref bool pointer, @string name, bool def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BoolVarByRef is null)
                    return s_BoolVarByVal!(target, pointer, name, def, usage);

                return s_BoolVarByRef(ref target, pointer, name, def, usage);
            }

            private delegate slice<@string> IntVarByRef(ref T value, ref long pointer, @string name, long def, @string usage);
            private delegate slice<@string> IntVarByVal(T value, ref long pointer, @string name, long def, @string usage);

            private static readonly IntVarByRef s_IntVarByRef;
            private static readonly IntVarByVal s_IntVarByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> IntVar(ref long pointer, @string name, long def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_IntVarByRef is null)
                    return s_IntVarByVal!(target, pointer, name, def, usage);

                return s_IntVarByRef(ref target, pointer, name, def, usage);
            }

            private delegate slice<@string> Float64VarByRef(ref T value, ref double pointer, @string name, double def, @string usage);
            private delegate slice<@string> Float64VarByVal(T value, ref double pointer, @string name, double def, @string usage);

            private static readonly Float64VarByRef s_Float64VarByRef;
            private static readonly Float64VarByVal s_Float64VarByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Float64Var(ref double pointer, @string name, double def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_Float64VarByRef is null)
                    return s_Float64VarByVal!(target, pointer, name, def, usage);

                return s_Float64VarByRef(ref target, pointer, name, def, usage);
            }

            private delegate slice<@string> StringVarByRef(ref T value, ref @string pointer, @string name, @string def, @string usage);
            private delegate slice<@string> StringVarByVal(T value, ref @string pointer, @string name, @string def, @string usage);

            private static readonly StringVarByRef s_StringVarByRef;
            private static readonly StringVarByVal s_StringVarByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> StringVar(ref @string pointer, @string name, @string def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringVarByRef is null)
                    return s_StringVarByVal!(target, pointer, name, def, usage);

                return s_StringVarByRef(ref target, pointer, name, def, usage);
            }

            private delegate slice<@string> StringListByRef(ref T value, @string name, @string def, @string usage);
            private delegate slice<@string> StringListByVal(T value, @string name, @string def, @string usage);

            private static readonly StringListByRef s_StringListByRef;
            private static readonly StringListByVal s_StringListByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> StringList(@string name, @string def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringListByRef is null)
                    return s_StringListByVal!(target, name, def, usage);

                return s_StringListByRef(ref target, name, def, usage);
            }

            private delegate slice<@string> ExtraUsageByRef(ref T value);
            private delegate slice<@string> ExtraUsageByVal(T value);

            private static readonly ExtraUsageByRef s_ExtraUsageByRef;
            private static readonly ExtraUsageByVal s_ExtraUsageByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> ExtraUsage()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ExtraUsageByRef is null)
                    return s_ExtraUsageByVal!(target);

                return s_ExtraUsageByRef(ref target);
            }

            private delegate slice<@string> ParseByRef(ref T value, Action usage);
            private delegate slice<@string> ParseByVal(T value, Action usage);

            private static readonly ParseByRef s_ParseByRef;
            private static readonly ParseByVal s_ParseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Parse(Action usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ParseByRef is null)
                    return s_ParseByVal!(target, usage);

                return s_ParseByRef(ref target, usage);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static FlagSet()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Bool");

                if (!(extensionMethod is null))
                    s_BoolByRef = extensionMethod.CreateStaticDelegate(typeof(BoolByRef)) as BoolByRef;

                if (s_BoolByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Bool");

                    if (!(extensionMethod is null))
                        s_BoolByVal = extensionMethod.CreateStaticDelegate(typeof(BoolByVal)) as BoolByVal;
                }

                if (s_BoolByRef is null && s_BoolByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Bool method", new Exception("Bool"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Int");

                if (!(extensionMethod is null))
                    s_IntByRef = extensionMethod.CreateStaticDelegate(typeof(IntByRef)) as IntByRef;

                if (s_IntByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Int");

                    if (!(extensionMethod is null))
                        s_IntByVal = extensionMethod.CreateStaticDelegate(typeof(IntByVal)) as IntByVal;
                }

                if (s_IntByRef is null && s_IntByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Int method", new Exception("Int"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Float64");

                if (!(extensionMethod is null))
                    s_Float64ByRef = extensionMethod.CreateStaticDelegate(typeof(Float64ByRef)) as Float64ByRef;

                if (s_Float64ByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Float64");

                    if (!(extensionMethod is null))
                        s_Float64ByVal = extensionMethod.CreateStaticDelegate(typeof(Float64ByVal)) as Float64ByVal;
                }

                if (s_Float64ByRef is null && s_Float64ByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Float64 method", new Exception("Float64"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByRef = extensionMethod.CreateStaticDelegate(typeof(StringByRef)) as StringByRef;

                if (s_StringByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("String");

                    if (!(extensionMethod is null))
                        s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;
                }

                if (s_StringByRef is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.String method", new Exception("String"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("BoolVar");

                if (!(extensionMethod is null))
                    s_BoolVarByRef = extensionMethod.CreateStaticDelegate(typeof(BoolVarByRef)) as BoolVarByRef;

                if (s_BoolVarByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("BoolVar");

                    if (!(extensionMethod is null))
                        s_BoolVarByVal = extensionMethod.CreateStaticDelegate(typeof(BoolVarByVal)) as BoolVarByVal;
                }

                if (s_BoolVarByRef is null && s_BoolVarByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.BoolVar method", new Exception("BoolVar"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("IntVar");

                if (!(extensionMethod is null))
                    s_IntVarByRef = extensionMethod.CreateStaticDelegate(typeof(IntVarByRef)) as IntVarByRef;

                if (s_IntVarByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("IntVar");

                    if (!(extensionMethod is null))
                        s_IntVarByVal = extensionMethod.CreateStaticDelegate(typeof(IntVarByVal)) as IntVarByVal;
                }

                if (s_IntVarByRef is null && s_IntVarByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.IntVar method", new Exception("IntVar"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Float64Var");

                if (!(extensionMethod is null))
                    s_Float64VarByRef = extensionMethod.CreateStaticDelegate(typeof(Float64VarByRef)) as Float64VarByRef;

                if (s_Float64VarByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Float64Var");

                    if (!(extensionMethod is null))
                        s_Float64VarByVal = extensionMethod.CreateStaticDelegate(typeof(Float64VarByVal)) as Float64VarByVal;
                }

                if (s_Float64VarByRef is null && s_Float64VarByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Float64Var method", new Exception("Float64Var"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StringVar");

                if (!(extensionMethod is null))
                    s_StringVarByRef = extensionMethod.CreateStaticDelegate(typeof(StringVarByRef)) as StringVarByRef;

                if (s_StringVarByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StringVar");

                    if (!(extensionMethod is null))
                        s_StringVarByVal = extensionMethod.CreateStaticDelegate(typeof(StringVarByVal)) as StringVarByVal;
                }

                if (s_StringVarByRef is null && s_StringVarByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.StringVar method", new Exception("StringVar"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StringList");

                if (!(extensionMethod is null))
                    s_StringListByRef = extensionMethod.CreateStaticDelegate(typeof(StringListByRef)) as StringListByRef;

                if (s_StringListByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StringList");

                    if (!(extensionMethod is null))
                        s_StringListByVal = extensionMethod.CreateStaticDelegate(typeof(StringListByVal)) as StringListByVal;
                }

                if (s_StringListByRef is null && s_StringListByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.StringList method", new Exception("StringList"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("ExtraUsage");

                if (!(extensionMethod is null))
                    s_ExtraUsageByRef = extensionMethod.CreateStaticDelegate(typeof(ExtraUsageByRef)) as ExtraUsageByRef;

                if (s_ExtraUsageByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ExtraUsage");

                    if (!(extensionMethod is null))
                        s_ExtraUsageByVal = extensionMethod.CreateStaticDelegate(typeof(ExtraUsageByVal)) as ExtraUsageByVal;
                }

                if (s_ExtraUsageByRef is null && s_ExtraUsageByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.ExtraUsage method", new Exception("ExtraUsage"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Parse");

                if (!(extensionMethod is null))
                    s_ParseByRef = extensionMethod.CreateStaticDelegate(typeof(ParseByRef)) as ParseByRef;

                if (s_ParseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Parse");

                    if (!(extensionMethod is null))
                        s_ParseByVal = extensionMethod.CreateStaticDelegate(typeof(ParseByVal)) as ParseByVal;
                }

                if (s_ParseByRef is null && s_ParseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Parse method", new Exception("Parse"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator FlagSet<T>(in ptr<T> target_ptr) => new FlagSet<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator FlagSet<T>(in T target) => new FlagSet<T>(target);

            // Enable comparisons between nil and FlagSet<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(FlagSet<T> value, NilType nil) => Activator.CreateInstance<FlagSet<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(FlagSet<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, FlagSet<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, FlagSet<T> value) => value != nil;
        }
    }
}}}}}}}

namespace go
{
    public static class plugin_FlagSetExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.FlagSet target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}