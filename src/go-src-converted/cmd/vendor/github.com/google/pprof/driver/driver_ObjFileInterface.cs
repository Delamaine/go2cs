//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:05:09 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using regexp = go.regexp_package;
using time = go.time_package;
using internaldriver = go.github.com.google.pprof.@internal.driver_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ObjFile
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile As<T>(in T target) => (ObjFile<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile As<T>(ptr<T> target_ptr) => (ObjFile<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile? As(object target) =>
                typeof(ObjFile<>).CreateInterfaceHandler<ObjFile>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ObjFile<T> : ObjFile
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public ObjFile(in T target) => m_target = target;

            public ObjFile(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error NameByRef(ref T value);
            private delegate error NameByVal(T value);

            private static readonly NameByRef s_NameByRef;
            private static readonly NameByVal s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Name()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NameByRef is null)
                    return s_NameByVal!(target);

                return s_NameByRef(ref target);
            }

            private delegate error BaseByRef(ref T value);
            private delegate error BaseByVal(T value);

            private static readonly BaseByRef s_BaseByRef;
            private static readonly BaseByVal s_BaseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Base()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BaseByRef is null)
                    return s_BaseByVal!(target);

                return s_BaseByRef(ref target);
            }

            private delegate error BuildIDByRef(ref T value);
            private delegate error BuildIDByVal(T value);

            private static readonly BuildIDByRef s_BuildIDByRef;
            private static readonly BuildIDByVal s_BuildIDByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error BuildID()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BuildIDByRef is null)
                    return s_BuildIDByVal!(target);

                return s_BuildIDByRef(ref target);
            }

            private delegate error SourceLineByRef(ref T value, ulong addr);
            private delegate error SourceLineByVal(T value, ulong addr);

            private static readonly SourceLineByRef s_SourceLineByRef;
            private static readonly SourceLineByVal s_SourceLineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error SourceLine(ulong addr)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SourceLineByRef is null)
                    return s_SourceLineByVal!(target, addr);

                return s_SourceLineByRef(ref target, addr);
            }

            private delegate error SymbolsByRef(ref T value, ref regexp.Regexp r, ulong addr);
            private delegate error SymbolsByVal(T value, ref regexp.Regexp r, ulong addr);

            private static readonly SymbolsByRef s_SymbolsByRef;
            private static readonly SymbolsByVal s_SymbolsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Symbols(ref regexp.Regexp r, ulong addr)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SymbolsByRef is null)
                    return s_SymbolsByVal!(target, r, addr);

                return s_SymbolsByRef(ref target, r, addr);
            }

            private delegate error CloseByRef(ref T value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByRef s_CloseByRef;
            private static readonly CloseByVal s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_CloseByRef is null)
                    return s_CloseByVal!(target);

                return s_CloseByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static ObjFile()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Name");

                if (!(extensionMethod is null))
                    s_NameByRef = extensionMethod.CreateStaticDelegate(typeof(NameByRef)) as NameByRef;

                if (s_NameByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Name");

                    if (!(extensionMethod is null))
                        s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;
                }

                if (s_NameByRef is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Name method", new Exception("Name"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Base");

                if (!(extensionMethod is null))
                    s_BaseByRef = extensionMethod.CreateStaticDelegate(typeof(BaseByRef)) as BaseByRef;

                if (s_BaseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Base");

                    if (!(extensionMethod is null))
                        s_BaseByVal = extensionMethod.CreateStaticDelegate(typeof(BaseByVal)) as BaseByVal;
                }

                if (s_BaseByRef is null && s_BaseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Base method", new Exception("Base"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("BuildID");

                if (!(extensionMethod is null))
                    s_BuildIDByRef = extensionMethod.CreateStaticDelegate(typeof(BuildIDByRef)) as BuildIDByRef;

                if (s_BuildIDByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("BuildID");

                    if (!(extensionMethod is null))
                        s_BuildIDByVal = extensionMethod.CreateStaticDelegate(typeof(BuildIDByVal)) as BuildIDByVal;
                }

                if (s_BuildIDByRef is null && s_BuildIDByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.BuildID method", new Exception("BuildID"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("SourceLine");

                if (!(extensionMethod is null))
                    s_SourceLineByRef = extensionMethod.CreateStaticDelegate(typeof(SourceLineByRef)) as SourceLineByRef;

                if (s_SourceLineByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SourceLine");

                    if (!(extensionMethod is null))
                        s_SourceLineByVal = extensionMethod.CreateStaticDelegate(typeof(SourceLineByVal)) as SourceLineByVal;
                }

                if (s_SourceLineByRef is null && s_SourceLineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.SourceLine method", new Exception("SourceLine"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Symbols");

                if (!(extensionMethod is null))
                    s_SymbolsByRef = extensionMethod.CreateStaticDelegate(typeof(SymbolsByRef)) as SymbolsByRef;

                if (s_SymbolsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Symbols");

                    if (!(extensionMethod is null))
                        s_SymbolsByVal = extensionMethod.CreateStaticDelegate(typeof(SymbolsByVal)) as SymbolsByVal;
                }

                if (s_SymbolsByRef is null && s_SymbolsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Symbols method", new Exception("Symbols"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByRef = extensionMethod.CreateStaticDelegate(typeof(CloseByRef)) as CloseByRef;

                if (s_CloseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Close");

                    if (!(extensionMethod is null))
                        s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;
                }

                if (s_CloseByRef is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Close method", new Exception("Close"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjFile<T>(in ptr<T> target_ptr) => new ObjFile<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjFile<T>(in T target) => new ObjFile<T>(target);

            // Enable comparisons between nil and ObjFile<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ObjFile<T> value, NilType nil) => Activator.CreateInstance<ObjFile<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ObjFile<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ObjFile<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ObjFile<T> value) => value != nil;
        }
    }
}}}}}}

namespace go
{
    public static class driver_ObjFileExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjFile target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}