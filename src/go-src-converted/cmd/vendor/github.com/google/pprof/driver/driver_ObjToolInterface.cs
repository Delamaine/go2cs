//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:05:09 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using regexp = go.regexp_package;
using time = go.time_package;
using internaldriver = go.github.com.google.pprof.@internal.driver_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ObjTool
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjTool As<T>(in T target) => (ObjTool<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjTool As<T>(ptr<T> target_ptr) => (ObjTool<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjTool? As(object target) =>
                typeof(ObjTool<>).CreateInterfaceHandler<ObjTool>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ObjTool<T> : ObjTool
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public ObjTool(in T target) => m_target = target;

            public ObjTool(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (slice<Inst>, error) OpenByRef(ref T value, @string file, ulong start, ulong limit, ulong offset);
            private delegate (slice<Inst>, error) OpenByVal(T value, @string file, ulong start, ulong limit, ulong offset);

            private static readonly OpenByRef s_OpenByRef;
            private static readonly OpenByVal s_OpenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<Inst>, error) Open(@string file, ulong start, ulong limit, ulong offset)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_OpenByRef is null)
                    return s_OpenByVal!(target, file, start, limit, offset);

                return s_OpenByRef(ref target, file, start, limit, offset);
            }

            private delegate (slice<Inst>, error) DisasmByRef(ref T value, @string file, ulong start, ulong end);
            private delegate (slice<Inst>, error) DisasmByVal(T value, @string file, ulong start, ulong end);

            private static readonly DisasmByRef s_DisasmByRef;
            private static readonly DisasmByVal s_DisasmByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<Inst>, error) Disasm(@string file, ulong start, ulong end)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_DisasmByRef is null)
                    return s_DisasmByVal!(target, file, start, end);

                return s_DisasmByRef(ref target, file, start, end);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static ObjTool()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Open");

                if (!(extensionMethod is null))
                    s_OpenByRef = extensionMethod.CreateStaticDelegate(typeof(OpenByRef)) as OpenByRef;

                if (s_OpenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Open");

                    if (!(extensionMethod is null))
                        s_OpenByVal = extensionMethod.CreateStaticDelegate(typeof(OpenByVal)) as OpenByVal;
                }

                if (s_OpenByRef is null && s_OpenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjTool.Open method", new Exception("Open"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Disasm");

                if (!(extensionMethod is null))
                    s_DisasmByRef = extensionMethod.CreateStaticDelegate(typeof(DisasmByRef)) as DisasmByRef;

                if (s_DisasmByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Disasm");

                    if (!(extensionMethod is null))
                        s_DisasmByVal = extensionMethod.CreateStaticDelegate(typeof(DisasmByVal)) as DisasmByVal;
                }

                if (s_DisasmByRef is null && s_DisasmByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjTool.Disasm method", new Exception("Disasm"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjTool<T>(in ptr<T> target_ptr) => new ObjTool<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjTool<T>(in T target) => new ObjTool<T>(target);

            // Enable comparisons between nil and ObjTool<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ObjTool<T> value, NilType nil) => Activator.CreateInstance<ObjTool<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ObjTool<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ObjTool<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ObjTool<T> value) => value != nil;
        }
    }
}}}}}}

namespace go
{
    public static class driver_ObjToolExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.driver_package.ObjTool target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}