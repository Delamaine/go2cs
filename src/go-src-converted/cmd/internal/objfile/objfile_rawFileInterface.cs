//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:46:27 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using dwarf = go.debug.dwarf_package;
using gosym = go.debug.gosym_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using sort = go.sort_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace @internal
{
    public static partial class objfile_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface rawFile
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile As<T>(in T target) => (rawFile<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile As<T>(ptr<T> target_ptr) => (rawFile<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile? As(object target) =>
                typeof(rawFile<>).CreateInterfaceHandler<rawFile>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class rawFile<T> : rawFile
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public rawFile(in T target) => m_target = target;

            public rawFile(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ref dwarf.Data, error) symbolsByRef(ref T value);
            private delegate (ref dwarf.Data, error) symbolsByVal(T value);

            private static readonly symbolsByRef s_symbolsByRef;
            private static readonly symbolsByVal s_symbolsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) symbols()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_symbolsByRef is null)
                    return s_symbolsByVal!(target);

                return s_symbolsByRef(ref target);
            }

            private delegate (ref dwarf.Data, error) pclnByRef(ref T value);
            private delegate (ref dwarf.Data, error) pclnByVal(T value);

            private static readonly pclnByRef s_pclnByRef;
            private static readonly pclnByVal s_pclnByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) pcln()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_pclnByRef is null)
                    return s_pclnByVal!(target);

                return s_pclnByRef(ref target);
            }

            private delegate (ref dwarf.Data, error) textByRef(ref T value);
            private delegate (ref dwarf.Data, error) textByVal(T value);

            private static readonly textByRef s_textByRef;
            private static readonly textByVal s_textByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) text()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_textByRef is null)
                    return s_textByVal!(target);

                return s_textByRef(ref target);
            }

            private delegate (ref dwarf.Data, error) goarchByRef(ref T value);
            private delegate (ref dwarf.Data, error) goarchByVal(T value);

            private static readonly goarchByRef s_goarchByRef;
            private static readonly goarchByVal s_goarchByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) goarch()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_goarchByRef is null)
                    return s_goarchByVal!(target);

                return s_goarchByRef(ref target);
            }

            private delegate (ref dwarf.Data, error) loadAddressByRef(ref T value);
            private delegate (ref dwarf.Data, error) loadAddressByVal(T value);

            private static readonly loadAddressByRef s_loadAddressByRef;
            private static readonly loadAddressByVal s_loadAddressByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) loadAddress()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_loadAddressByRef is null)
                    return s_loadAddressByVal!(target);

                return s_loadAddressByRef(ref target);
            }

            private delegate (ref dwarf.Data, error) dwarfByRef(ref T value);
            private delegate (ref dwarf.Data, error) dwarfByVal(T value);

            private static readonly dwarfByRef s_dwarfByRef;
            private static readonly dwarfByVal s_dwarfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dwarf.Data, error) dwarf()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_dwarfByRef is null)
                    return s_dwarfByVal!(target);

                return s_dwarfByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static rawFile()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("symbols");

                if (!(extensionMethod is null))
                    s_symbolsByRef = extensionMethod.CreateStaticDelegate(typeof(symbolsByRef)) as symbolsByRef;

                if (s_symbolsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("symbols");

                    if (!(extensionMethod is null))
                        s_symbolsByVal = extensionMethod.CreateStaticDelegate(typeof(symbolsByVal)) as symbolsByVal;
                }

                if (s_symbolsByRef is null && s_symbolsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.symbols method", new Exception("symbols"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("pcln");

                if (!(extensionMethod is null))
                    s_pclnByRef = extensionMethod.CreateStaticDelegate(typeof(pclnByRef)) as pclnByRef;

                if (s_pclnByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("pcln");

                    if (!(extensionMethod is null))
                        s_pclnByVal = extensionMethod.CreateStaticDelegate(typeof(pclnByVal)) as pclnByVal;
                }

                if (s_pclnByRef is null && s_pclnByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.pcln method", new Exception("pcln"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("text");

                if (!(extensionMethod is null))
                    s_textByRef = extensionMethod.CreateStaticDelegate(typeof(textByRef)) as textByRef;

                if (s_textByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("text");

                    if (!(extensionMethod is null))
                        s_textByVal = extensionMethod.CreateStaticDelegate(typeof(textByVal)) as textByVal;
                }

                if (s_textByRef is null && s_textByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.text method", new Exception("text"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("goarch");

                if (!(extensionMethod is null))
                    s_goarchByRef = extensionMethod.CreateStaticDelegate(typeof(goarchByRef)) as goarchByRef;

                if (s_goarchByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("goarch");

                    if (!(extensionMethod is null))
                        s_goarchByVal = extensionMethod.CreateStaticDelegate(typeof(goarchByVal)) as goarchByVal;
                }

                if (s_goarchByRef is null && s_goarchByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.goarch method", new Exception("goarch"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("loadAddress");

                if (!(extensionMethod is null))
                    s_loadAddressByRef = extensionMethod.CreateStaticDelegate(typeof(loadAddressByRef)) as loadAddressByRef;

                if (s_loadAddressByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("loadAddress");

                    if (!(extensionMethod is null))
                        s_loadAddressByVal = extensionMethod.CreateStaticDelegate(typeof(loadAddressByVal)) as loadAddressByVal;
                }

                if (s_loadAddressByRef is null && s_loadAddressByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.loadAddress method", new Exception("loadAddress"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("dwarf");

                if (!(extensionMethod is null))
                    s_dwarfByRef = extensionMethod.CreateStaticDelegate(typeof(dwarfByRef)) as dwarfByRef;

                if (s_dwarfByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("dwarf");

                    if (!(extensionMethod is null))
                        s_dwarfByVal = extensionMethod.CreateStaticDelegate(typeof(dwarfByVal)) as dwarfByVal;
                }

                if (s_dwarfByRef is null && s_dwarfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.dwarf method", new Exception("dwarf"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator rawFile<T>(in ptr<T> target_ptr) => new rawFile<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator rawFile<T>(in T target) => new rawFile<T>(target);

            // Enable comparisons between nil and rawFile<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(rawFile<T> value, NilType nil) => Activator.CreateInstance<rawFile<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(rawFile<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, rawFile<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, rawFile<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class objfile_rawFileExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.@internal.objfile_package.rawFile target)
        {
            try
            {
                return ((go.cmd.@internal.objfile_package.rawFile<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.@internal.objfile_package.rawFile target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.@internal.objfile_package.rawFile target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.@internal.objfile_package.rawFile<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.@internal.objfile_package.rawFile target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}