//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:51:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using fmt = go.fmt_package;
using sort = go.sort_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace @internal
{
    public static partial class dwarf_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Var
        {
            // Constructors
            public Var(NilType _)
            {
                this.Name = default;
                this.Abbrev = default;
                this.IsReturnValue = default;
                this.IsInlFormal = default;
                this.StackOffset = default;
                this.LocationList = default;
                this.Scope = default;
                this.Type = default;
                this.DeclFile = default;
                this.DeclLine = default;
                this.DeclCol = default;
                this.InlIndex = default;
                this.ChildIndex = default;
                this.IsInAbstract = default;
            }

            public Var(@string Name = default, long Abbrev = default, bool IsReturnValue = default, bool IsInlFormal = default, int StackOffset = default, slice<Location> LocationList = default, int Scope = default, Sym Type = default, @string DeclFile = default, ulong DeclLine = default, ulong DeclCol = default, int InlIndex = default, int ChildIndex = default, bool IsInAbstract = default)
            {
                this.Name = Name;
                this.Abbrev = Abbrev;
                this.IsReturnValue = IsReturnValue;
                this.IsInlFormal = IsInlFormal;
                this.StackOffset = StackOffset;
                this.LocationList = LocationList;
                this.Scope = Scope;
                this.Type = Type;
                this.DeclFile = DeclFile;
                this.DeclLine = DeclLine;
                this.DeclCol = DeclCol;
                this.InlIndex = InlIndex;
                this.ChildIndex = ChildIndex;
                this.IsInAbstract = IsInAbstract;
            }

            // Enable comparisons between nil and Var struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Var value, NilType nil) => value.Equals(default(Var));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Var value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Var value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Var value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Var(NilType nil) => default(Var);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Var Var_cast(dynamic value)
        {
            return new Var(value.Name, value.Abbrev, value.IsReturnValue, value.IsInlFormal, value.StackOffset, value.LocationList, value.Scope, value.Type, value.DeclFile, value.DeclLine, value.DeclCol, value.InlIndex, value.ChildIndex, value.IsInAbstract);
        }
    }
}}}