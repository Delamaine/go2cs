//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:51:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using fmt = go.fmt_package;
using sort = go.sort_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace @internal
{
    public static partial class dwarf_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Piece
        {
            // Constructors
            public Piece(NilType _)
            {
                this.Length = default;
                this.StackOffset = default;
                this.RegNum = default;
                this.Missing = default;
                this.OnStack = default;
            }

            public Piece(long Length = default, int StackOffset = default, short RegNum = default, bool Missing = default, bool OnStack = default)
            {
                this.Length = Length;
                this.StackOffset = StackOffset;
                this.RegNum = RegNum;
                this.Missing = Missing;
                this.OnStack = OnStack;
            }

            // Enable comparisons between nil and Piece struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Piece value, NilType nil) => value.Equals(default(Piece));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Piece value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Piece value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Piece value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Piece(NilType nil) => default(Piece);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Piece Piece_cast(dynamic value)
        {
            return new Piece(value.Length, value.StackOffset, value.RegNum, value.Missing, value.OnStack);
        }
    }
}}}