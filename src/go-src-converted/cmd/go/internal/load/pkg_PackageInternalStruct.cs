//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:01:01 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using build = go.go.build_package;
using token = go.go.token_package;
using ioutil = go.io.ioutil_package;
using os = go.os_package;
using pathpkg = go.path_package;
using filepath = go.path.filepath_package;
using sort = go.sort_package;
using strings = go.strings_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using @base = go.cmd.go.@internal.@base_package;
using cfg = go.cmd.go.@internal.cfg_package;
using str = go.cmd.go.@internal.str_package;
using go;

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class load_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct PackageInternal
        {
            // Constructors
            public PackageInternal(NilType _)
            {
                this.Build = default;
                this.Imports = default;
                this.RawImports = default;
                this.ForceLibrary = default;
                this.CmdlineFiles = default;
                this.CmdlinePkg = default;
                this.Local = default;
                this.LocalPrefix = default;
                this.ExeName = default;
                this.CoverMode = default;
                this.CoverVars = default;
                this.OmitDebug = default;
                this.GobinSubdir = default;
                this.Asmflags = default;
                this.Gcflags = default;
                this.Ldflags = default;
                this.Gccgoflags = default;
            }

            public PackageInternal(ref ptr<build.Package> Build = default, slice<ref Package> Imports = default, slice<@string> RawImports = default, bool ForceLibrary = default, bool CmdlineFiles = default, bool CmdlinePkg = default, bool Local = default, @string LocalPrefix = default, @string ExeName = default, @string CoverMode = default, map<@string, ref CoverVar> CoverVars = default, bool OmitDebug = default, bool GobinSubdir = default, slice<@string> Asmflags = default, slice<@string> Gcflags = default, slice<@string> Ldflags = default, slice<@string> Gccgoflags = default)
            {
                this.Build = Build;
                this.Imports = Imports;
                this.RawImports = RawImports;
                this.ForceLibrary = ForceLibrary;
                this.CmdlineFiles = CmdlineFiles;
                this.CmdlinePkg = CmdlinePkg;
                this.Local = Local;
                this.LocalPrefix = LocalPrefix;
                this.ExeName = ExeName;
                this.CoverMode = CoverMode;
                this.CoverVars = CoverVars;
                this.OmitDebug = OmitDebug;
                this.GobinSubdir = GobinSubdir;
                this.Asmflags = Asmflags;
                this.Gcflags = Gcflags;
                this.Ldflags = Ldflags;
                this.Gccgoflags = Gccgoflags;
            }

            // Enable comparisons between nil and PackageInternal struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(PackageInternal value, NilType nil) => value.Equals(default(PackageInternal));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(PackageInternal value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, PackageInternal value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, PackageInternal value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator PackageInternal(NilType nil) => default(PackageInternal);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static PackageInternal PackageInternal_cast(dynamic value)
        {
            return new PackageInternal(ref value.Build, value.Imports, value.RawImports, value.ForceLibrary, value.CmdlineFiles, value.CmdlinePkg, value.Local, value.LocalPrefix, value.ExeName, value.CoverMode, value.CoverVars, value.OmitDebug, value.GobinSubdir, value.Asmflags, value.Gcflags, value.Ldflags, value.Gccgoflags);
        }
    }
}}}}