//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:01:46 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using sha256 = go.crypto.sha256_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using build = go.go.build_package;
using doc = go.go.doc_package;
using parser = go.go.parser_package;
using token = go.go.token_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using os = go.os_package;
using exec = go.os.exec_package;
using path = go.path_package;
using filepath = go.path.filepath_package;
using regexp = go.regexp_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using template = go.text.template_package;
using time = go.time_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using @base = go.cmd.go.@internal.@base_package;
using cache = go.cmd.go.@internal.cache_package;
using cfg = go.cmd.go.@internal.cfg_package;
using load = go.cmd.go.@internal.load_package;
using str = go.cmd.go.@internal.str_package;
using work = go.cmd.go.@internal.work_package;
using test2json = go.cmd.@internal.test2json_package;
using go;

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class test_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct testFuncs
        {
            // Constructors
            public testFuncs(NilType _)
            {
                this.Tests = default;
                this.Benchmarks = default;
                this.Examples = default;
                this.TestMain = default;
                this.Package = default;
                this.ImportTest = default;
                this.NeedTest = default;
                this.ImportXtest = default;
                this.NeedXtest = default;
                this.Cover = default;
            }

            public testFuncs(slice<testFunc> Tests = default, slice<testFunc> Benchmarks = default, slice<testFunc> Examples = default, ref ptr<testFunc> TestMain = default, ref ptr<load.Package> Package = default, bool ImportTest = default, bool NeedTest = default, bool ImportXtest = default, bool NeedXtest = default, slice<coverInfo> Cover = default)
            {
                this.Tests = Tests;
                this.Benchmarks = Benchmarks;
                this.Examples = Examples;
                this.TestMain = TestMain;
                this.Package = Package;
                this.ImportTest = ImportTest;
                this.NeedTest = NeedTest;
                this.ImportXtest = ImportXtest;
                this.NeedXtest = NeedXtest;
                this.Cover = Cover;
            }

            // Enable comparisons between nil and testFuncs struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(testFuncs value, NilType nil) => value.Equals(default(testFuncs));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(testFuncs value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, testFuncs value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, testFuncs value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator testFuncs(NilType nil) => default(testFuncs);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static testFuncs testFuncs_cast(dynamic value)
        {
            return new testFuncs(value.Tests, value.Benchmarks, value.Examples, ref value.TestMain, ref value.Package, value.ImportTest, value.NeedTest, value.ImportXtest, value.NeedXtest, value.Cover);
        }
    }
}}}}