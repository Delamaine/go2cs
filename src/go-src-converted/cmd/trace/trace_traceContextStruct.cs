//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:05:08 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using json = go.encoding.json_package;
using fmt = go.fmt_package;
using trace = go.@internal.trace_package;
using log = go.log_package;
using http = go.net.http_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using time = go.time_package;

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(traceParams))]
        private partial struct traceContext
        {
            // traceParams structure promotion - sourced from pointer
            private readonly ptr<traceParams> m_traceParamsRef;

            private ref traceParams traceParams_ptr => ref m_traceParamsRef.Value;

            public ref trace.ParseResult parsed => ref m_traceParamsRef.Value.parsed;

            public ref bool gtrace => ref m_traceParamsRef.Value.gtrace;

            public ref long startTime => ref m_traceParamsRef.Value.startTime;

            public ref long endTime => ref m_traceParamsRef.Value.endTime;

            public ref ulong maing => ref m_traceParamsRef.Value.maing;

            public ref map<ulong, bool> gs => ref m_traceParamsRef.Value.gs;

            // Constructors
            public traceContext(NilType _)
            {
                this.m_traceParamsRef = new ptr<traceParams>(new traceParams(nil));
                this.data = default;
                this.frameTree = default;
                this.frameSeq = default;
                this.arrowSeq = default;
                this.gcount = default;
                this.heapStats = default;
                this.prevHeapStats = default;
                this.threadStats = default;
                this.prevThreadStats = default;
                this.gstates = default;
                this.prevGstates = default;
            }

            public traceContext(ref traceParams traceParams = default, ViewerData data = default, frameNode frameTree = default, long frameSeq = default, ulong arrowSeq = default, ulong gcount = default, heapStats heapStats = default, heapStats prevHeapStats = default, threadStats threadStats = default, threadStats prevThreadStats = default, array<long> gstates = default, array<long> prevGstates = default)
            {
                this.m_traceParamsRef = new ptr<traceParams>(ref traceParams);
                this.data = data;
                this.frameTree = frameTree;
                this.frameSeq = frameSeq;
                this.arrowSeq = arrowSeq;
                this.gcount = gcount;
                this.heapStats = heapStats;
                this.prevHeapStats = prevHeapStats;
                this.threadStats = threadStats;
                this.prevThreadStats = prevThreadStats;
                this.gstates = gstates;
                this.prevGstates = prevGstates;
            }

            // Enable comparisons between nil and traceContext struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(traceContext value, NilType nil) => value.Equals(default(traceContext));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(traceContext value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, traceContext value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, traceContext value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator traceContext(NilType nil) => default(traceContext);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static traceContext traceContext_cast(dynamic value)
        {
            return new traceContext(ref value.traceParams, value.data, value.frameTree, value.frameSeq, value.arrowSeq, value.gcount, value.heapStats, value.prevHeapStats, value.threadStats, value.prevThreadStats, value.gstates, value.prevGstates);
        }
    }
}