// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// package main -- go2cs converted at 2020 August 29 09:59:41 UTC
// Original source: C:\Go\src\cmd\dist\buildruntime.go
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using os = go.os_package;
using strings = go.strings_package;
using static go.builtin;

namespace go
{
    public static partial class main_package
    {
        /*
         * Helpers for building runtime.
         */

        // mkzversion writes zversion.go:
        //
        //    package sys
        //
        //    const TheVersion = <version>
        //    const Goexperiment = <goexperiment>
        //    const StackGuardMultiplier = <multiplier value>
        //
        private static void mkzversion(@string dir, @string file)
        {
            bytes.Buffer buf = default;
            fmt.Fprintf(ref buf, "// Code generated by go tool dist; DO NOT EDIT.\n");
            fmt.Fprintln(ref buf);
            fmt.Fprintf(ref buf, "package sys\n");
            fmt.Fprintln(ref buf);
            fmt.Fprintf(ref buf, "const TheVersion = `%s`\n", findgoversion());
            fmt.Fprintf(ref buf, "const Goexperiment = `%s`\n", os.Getenv("GOEXPERIMENT"));
            fmt.Fprintf(ref buf, "const StackGuardMultiplier = %d\n", stackGuardMultiplier());

            writefile(buf.String(), file, writeSkipSame);
        }

        // mkzbootstrap writes cmd/internal/objabi/zbootstrap.go:
        //
        //    package objabi
        //
        //    const defaultGOROOT = <goroot>
        //    const defaultGO386 = <go386>
        //    const defaultGOARM = <goarm>
        //    const defaultGOMIPS = <gomips>
        //    const defaultGOOS = runtime.GOOS
        //    const defaultGOARCH = runtime.GOARCH
        //    const defaultGO_EXTLINK_ENABLED = <goextlinkenabled>
        //    const version = <version>
        //    const stackGuardMultiplier = <multiplier value>
        //    const goexperiment = <goexperiment>
        //
        // The use of runtime.GOOS and runtime.GOARCH makes sure that
        // a cross-compiled compiler expects to compile for its own target
        // system. That is, if on a Mac you do:
        //
        //    GOOS=linux GOARCH=ppc64 go build cmd/compile
        //
        // the resulting compiler will default to generating linux/ppc64 object files.
        // This is more useful than having it default to generating objects for the
        // original target (in this example, a Mac).
        private static void mkzbootstrap(@string file)
        {
            bytes.Buffer buf = default;
            fmt.Fprintf(ref buf, "// Code generated by go tool dist; DO NOT EDIT.\n");
            fmt.Fprintln(ref buf);
            fmt.Fprintf(ref buf, "package objabi\n");
            fmt.Fprintln(ref buf);
            fmt.Fprintf(ref buf, "import \"runtime\"\n");
            fmt.Fprintln(ref buf);
            fmt.Fprintf(ref buf, "const defaultGO386 = `%s`\n", go386);
            fmt.Fprintf(ref buf, "const defaultGOARM = `%s`\n", goarm);
            fmt.Fprintf(ref buf, "const defaultGOMIPS = `%s`\n", gomips);
            fmt.Fprintf(ref buf, "const defaultGOOS = runtime.GOOS\n");
            fmt.Fprintf(ref buf, "const defaultGOARCH = runtime.GOARCH\n");
            fmt.Fprintf(ref buf, "const defaultGO_EXTLINK_ENABLED = `%s`\n", goextlinkenabled);
            fmt.Fprintf(ref buf, "const version = `%s`\n", findgoversion());
            fmt.Fprintf(ref buf, "const stackGuardMultiplier = %d\n", stackGuardMultiplier());
            fmt.Fprintf(ref buf, "const goexperiment = `%s`\n", os.Getenv("GOEXPERIMENT"));

            writefile(buf.String(), file, writeSkipSame);
        }

        // stackGuardMultiplier returns a multiplier to apply to the default
        // stack guard size. Larger multipliers are used for non-optimized
        // builds that have larger stack frames.
        private static long stackGuardMultiplier()
        {
            foreach (var (_, s) in strings.Split(os.Getenv("GO_GCFLAGS"), " "))
            {
                if (s == "-N")
                {
                    return 2L;
                }
            }
            return 1L;
        }
    }
}
