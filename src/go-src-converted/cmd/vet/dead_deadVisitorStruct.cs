//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:08:51 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using ast = go.go.ast_package;
using constant = go.go.constant_package;

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct deadVisitor
        {
            // Constructors
            public deadVisitor(NilType _)
            {
                this.f = default;
            }

            public deadVisitor(ref ptr<File> f = default)
            {
                this.f = f;
            }

            // Enable comparisons between nil and deadVisitor struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(deadVisitor value, NilType nil) => value.Equals(default(deadVisitor));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(deadVisitor value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, deadVisitor value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, deadVisitor value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator deadVisitor(NilType nil) => default(deadVisitor);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static deadVisitor deadVisitor_cast(dynamic value)
        {
            return new deadVisitor(ref value.f);
        }
    }
}