//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:09:28 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using flag = go.flag_package;
using ast = go.go.ast_package;
using token = go.go.token_package;
using types = go.go.types_package;

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Span
        {
            // Constructors
            public Span(NilType _)
            {
                this.min = default;
                this.max = default;
            }

            public Span(token.Pos min = default, token.Pos max = default)
            {
                this.min = min;
                this.max = max;
            }

            // Enable comparisons between nil and Span struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Span value, NilType nil) => value.Equals(default(Span));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Span value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Span value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Span value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Span(NilType nil) => default(Span);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Span Span_cast(dynamic value)
        {
            return new Span(value.min, value.max);
        }
    }
}