//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:10:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using @unsafe = go.@unsafe_package;
using go;

namespace go {
namespace cmd {
namespace vet
{
    public static partial class testdata_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Tlock
        {
            // Constructors
            public Tlock(NilType _)
            {
                this.once = default;
            }

            public Tlock(sync.Once once = default)
            {
                this.once = once;
            }

            // Enable comparisons between nil and Tlock struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Tlock value, NilType nil) => value.Equals(default(Tlock));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Tlock value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Tlock value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Tlock value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Tlock(NilType nil) => default(Tlock);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Tlock Tlock_cast(dynamic value)
        {
            return new Tlock(value.once);
        }
    }
}}}