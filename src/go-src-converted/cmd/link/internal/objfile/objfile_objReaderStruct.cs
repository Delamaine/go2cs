//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:04:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using bio = go.cmd.@internal.bio_package;
using dwarf = go.cmd.@internal.dwarf_package;
using objabi = go.cmd.@internal.objabi_package;
using sys = go.cmd.@internal.sys_package;
using sym = go.cmd.link.@internal.sym_package;
using io = go.io_package;
using log = go.log_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace link {
namespace @internal
{
    public static partial class objfile_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct objReader
        {
            // Constructors
            public objReader(NilType _)
            {
                this.rd = default;
                this.arch = default;
                this.syms = default;
                this.lib = default;
                this.pn = default;
                this.dupSym = default;
                this.localSymVersion = default;
                this.rdBuf = default;
                this.refs = default;
                this.data = default;
                this.reloc = default;
                this.pcdata = default;
                this.autom = default;
                this.funcdata = default;
                this.funcdataoff = default;
                this.file = default;
            }

            public objReader(ref ptr<bufio.Reader> rd = default, ref ptr<sys.Arch> arch = default, ref ptr<sym.Symbols> syms = default, ref ptr<sym.Library> lib = default, @string pn = default, ref ptr<sym.Symbol> dupSym = default, long localSymVersion = default, slice<byte> rdBuf = default, slice<ref sym.Symbol> refs = default, slice<byte> data = default, slice<sym.Reloc> reloc = default, slice<sym.Pcdata> pcdata = default, slice<sym.Auto> autom = default, slice<ref sym.Symbol> funcdata = default, slice<long> funcdataoff = default, slice<ref sym.Symbol> file = default)
            {
                this.rd = rd;
                this.arch = arch;
                this.syms = syms;
                this.lib = lib;
                this.pn = pn;
                this.dupSym = dupSym;
                this.localSymVersion = localSymVersion;
                this.rdBuf = rdBuf;
                this.refs = refs;
                this.data = data;
                this.reloc = reloc;
                this.pcdata = pcdata;
                this.autom = autom;
                this.funcdata = funcdata;
                this.funcdataoff = funcdataoff;
                this.file = file;
            }

            // Enable comparisons between nil and objReader struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(objReader value, NilType nil) => value.Equals(default(objReader));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(objReader value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, objReader value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, objReader value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator objReader(NilType nil) => default(objReader);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static objReader objReader_cast(dynamic value)
        {
            return new objReader(ref value.rd, ref value.arch, ref value.syms, ref value.lib, value.pn, ref value.dupSym, value.localSymVersion, value.rdBuf, value.refs, value.data, value.reloc, value.pcdata, value.autom, value.funcdata, value.funcdataoff, value.file);
        }
    }
}}}}