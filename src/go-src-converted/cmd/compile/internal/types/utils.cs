// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// package types -- go2cs converted at 2020 August 29 08:53:19 UTC
// import "cmd/compile/internal/types" ==> using types = go.cmd.compile.@internal.types_package
// Original source: C:\Go\src\cmd\compile\internal\types\utils.go
using obj = go.cmd.@internal.obj_package;
using fmt = go.fmt_package;
using static go.builtin;
using System;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class types_package
    {
        public static readonly long BADWIDTH = -1000000000L;

        // Initialized by frontend. Exists only here.


        // Initialized by frontend. Exists only here.
        public static EType Tptr = default; // either TPTR32 or TPTR64

        // The following variables must be initialized early by the frontend.
        // They are here to break import cycles.
        // TODO(gri) eliminate these dependencies.
        public static long Widthptr = default;        public static Action<ref Type> Dowidth = default;        public static Action<@string, object> Fatalf = default;        public static Func<ref Sym, long, long, @string> Sconv = default;        public static Func<ref Type, long, long, long, @string> Tconv = default;        public static Action<ref Sym, fmt.State, int, long> FormatSym = default;        public static Action<ref Type, fmt.State, int, long> FormatType = default;        public static Func<ref Type, ref obj.LSym> TypeLinkSym = default;        public static ref obj.Link Ctxt = default;        public static long FmtLeft = default;        public static long FmtUnsigned = default;        public static long FErr = default;

        private static @string String(this ref Sym s)
        {
            return Sconv(s, 0L, FErr);
        }

        private static void Format(this ref Sym sym, fmt.State s, int verb)
        {
            FormatSym(sym, s, verb, FErr);
        }

        private static @string String(this ref Type t)
        { 
            // This is an external entry point, so we pass depth 0 to tconv.
            // The implementation of tconv (including typefmt and fldconv)
            // must take care not to use a type in a formatting string
            // to avoid resetting the recursion counter.
            return Tconv(t, 0L, FErr, 0L);
        }

        // ShortString generates a short description of t.
        // It is used in autogenerated method names, reflection,
        // and itab names.
        private static @string ShortString(this ref Type t)
        {
            return Tconv(t, FmtLeft, FErr, 0L);
        }

        // LongString generates a complete description of t.
        // It is useful for reflection,
        // or when a unique fingerprint or hash of a type is required.
        private static @string LongString(this ref Type t)
        {
            return Tconv(t, FmtLeft | FmtUnsigned, FErr, 0L);
        }

        private static void Format(this ref Type t, fmt.State s, int verb)
        {
            FormatType(t, s, verb, FErr);
        }

        private partial struct bitset8 // : byte
        {
        }

        private static void set(this ref bitset8 f, byte mask, bool b)
        {
            if (b)
            {
                (uint8.Value)(f).Value;

                mask;
            }
            else
            {
                (uint8.Value)(f).Value;

                mask;
            }
        }
    }
}}}}
