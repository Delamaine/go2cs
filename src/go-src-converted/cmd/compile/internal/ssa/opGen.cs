// Code generated from gen/*Ops.go; DO NOT EDIT.

// package ssa -- go2cs converted at 2020 August 29 08:54:39 UTC
// import "cmd/compile/internal/ssa" ==> using ssa = go.cmd.compile.@internal.ssa_package
// Original source: C:\Go\src\cmd\compile\internal\ssa\opGen.go
using obj = go.cmd.@internal.obj_package;
using arm = go.cmd.@internal.obj.arm_package;
using arm64 = go.cmd.@internal.obj.arm64_package;
using mips = go.cmd.@internal.obj.mips_package;
using ppc64 = go.cmd.@internal.obj.ppc64_package;
using s390x = go.cmd.@internal.obj.s390x_package;
using x86 = go.cmd.@internal.obj.x86_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        public static readonly BlockKind BlockInvalid = iota;

        public static readonly var Block386EQ = 0;
        public static readonly var Block386NE = 1;
        public static readonly var Block386LT = 2;
        public static readonly var Block386LE = 3;
        public static readonly var Block386GT = 4;
        public static readonly var Block386GE = 5;
        public static readonly var Block386ULT = 6;
        public static readonly var Block386ULE = 7;
        public static readonly var Block386UGT = 8;
        public static readonly var Block386UGE = 9;
        public static readonly var Block386EQF = 10;
        public static readonly var Block386NEF = 11;
        public static readonly var Block386ORD = 12;
        public static readonly var Block386NAN = 13;

        public static readonly var BlockAMD64EQ = 14;
        public static readonly var BlockAMD64NE = 15;
        public static readonly var BlockAMD64LT = 16;
        public static readonly var BlockAMD64LE = 17;
        public static readonly var BlockAMD64GT = 18;
        public static readonly var BlockAMD64GE = 19;
        public static readonly var BlockAMD64ULT = 20;
        public static readonly var BlockAMD64ULE = 21;
        public static readonly var BlockAMD64UGT = 22;
        public static readonly var BlockAMD64UGE = 23;
        public static readonly var BlockAMD64EQF = 24;
        public static readonly var BlockAMD64NEF = 25;
        public static readonly var BlockAMD64ORD = 26;
        public static readonly var BlockAMD64NAN = 27;

        public static readonly var BlockARMEQ = 28;
        public static readonly var BlockARMNE = 29;
        public static readonly var BlockARMLT = 30;
        public static readonly var BlockARMLE = 31;
        public static readonly var BlockARMGT = 32;
        public static readonly var BlockARMGE = 33;
        public static readonly var BlockARMULT = 34;
        public static readonly var BlockARMULE = 35;
        public static readonly var BlockARMUGT = 36;
        public static readonly var BlockARMUGE = 37;

        public static readonly var BlockARM64EQ = 38;
        public static readonly var BlockARM64NE = 39;
        public static readonly var BlockARM64LT = 40;
        public static readonly var BlockARM64LE = 41;
        public static readonly var BlockARM64GT = 42;
        public static readonly var BlockARM64GE = 43;
        public static readonly var BlockARM64ULT = 44;
        public static readonly var BlockARM64ULE = 45;
        public static readonly var BlockARM64UGT = 46;
        public static readonly var BlockARM64UGE = 47;
        public static readonly var BlockARM64Z = 48;
        public static readonly var BlockARM64NZ = 49;
        public static readonly var BlockARM64ZW = 50;
        public static readonly var BlockARM64NZW = 51;
        public static readonly var BlockARM64TBZ = 52;
        public static readonly var BlockARM64TBNZ = 53;

        public static readonly var BlockMIPSEQ = 54;
        public static readonly var BlockMIPSNE = 55;
        public static readonly var BlockMIPSLTZ = 56;
        public static readonly var BlockMIPSLEZ = 57;
        public static readonly var BlockMIPSGTZ = 58;
        public static readonly var BlockMIPSGEZ = 59;
        public static readonly var BlockMIPSFPT = 60;
        public static readonly var BlockMIPSFPF = 61;

        public static readonly var BlockMIPS64EQ = 62;
        public static readonly var BlockMIPS64NE = 63;
        public static readonly var BlockMIPS64LTZ = 64;
        public static readonly var BlockMIPS64LEZ = 65;
        public static readonly var BlockMIPS64GTZ = 66;
        public static readonly var BlockMIPS64GEZ = 67;
        public static readonly var BlockMIPS64FPT = 68;
        public static readonly var BlockMIPS64FPF = 69;

        public static readonly var BlockPPC64EQ = 70;
        public static readonly var BlockPPC64NE = 71;
        public static readonly var BlockPPC64LT = 72;
        public static readonly var BlockPPC64LE = 73;
        public static readonly var BlockPPC64GT = 74;
        public static readonly var BlockPPC64GE = 75;
        public static readonly var BlockPPC64FLT = 76;
        public static readonly var BlockPPC64FLE = 77;
        public static readonly var BlockPPC64FGT = 78;
        public static readonly var BlockPPC64FGE = 79;

        public static readonly var BlockS390XEQ = 80;
        public static readonly var BlockS390XNE = 81;
        public static readonly var BlockS390XLT = 82;
        public static readonly var BlockS390XLE = 83;
        public static readonly var BlockS390XGT = 84;
        public static readonly var BlockS390XGE = 85;
        public static readonly var BlockS390XGTF = 86;
        public static readonly var BlockS390XGEF = 87;

        public static readonly var BlockPlain = 88;
        public static readonly var BlockIf = 89;
        public static readonly var BlockDefer = 90;
        public static readonly var BlockRet = 91;
        public static readonly var BlockRetJmp = 92;
        public static readonly var BlockExit = 93;
        public static readonly var BlockFirst = 94;

        private static array<@string> blockString = new array<@string>(InitKeyedValues<@string>((BlockInvalid, "BlockInvalid"), (Block386EQ, "EQ"), (Block386NE, "NE"), (Block386LT, "LT"), (Block386LE, "LE"), (Block386GT, "GT"), (Block386GE, "GE"), (Block386ULT, "ULT"), (Block386ULE, "ULE"), (Block386UGT, "UGT"), (Block386UGE, "UGE"), (Block386EQF, "EQF"), (Block386NEF, "NEF"), (Block386ORD, "ORD"), (Block386NAN, "NAN"), (BlockAMD64EQ, "EQ"), (BlockAMD64NE, "NE"), (BlockAMD64LT, "LT"), (BlockAMD64LE, "LE"), (BlockAMD64GT, "GT"), (BlockAMD64GE, "GE"), (BlockAMD64ULT, "ULT"), (BlockAMD64ULE, "ULE"), (BlockAMD64UGT, "UGT"), (BlockAMD64UGE, "UGE"), (BlockAMD64EQF, "EQF"), (BlockAMD64NEF, "NEF"), (BlockAMD64ORD, "ORD"), (BlockAMD64NAN, "NAN"), (BlockARMEQ, "EQ"), (BlockARMNE, "NE"), (BlockARMLT, "LT"), (BlockARMLE, "LE"), (BlockARMGT, "GT"), (BlockARMGE, "GE"), (BlockARMULT, "ULT"), (BlockARMULE, "ULE"), (BlockARMUGT, "UGT"), (BlockARMUGE, "UGE"), (BlockARM64EQ, "EQ"), (BlockARM64NE, "NE"), (BlockARM64LT, "LT"), (BlockARM64LE, "LE"), (BlockARM64GT, "GT"), (BlockARM64GE, "GE"), (BlockARM64ULT, "ULT"), (BlockARM64ULE, "ULE"), (BlockARM64UGT, "UGT"), (BlockARM64UGE, "UGE"), (BlockARM64Z, "Z"), (BlockARM64NZ, "NZ"), (BlockARM64ZW, "ZW"), (BlockARM64NZW, "NZW"), (BlockARM64TBZ, "TBZ"), (BlockARM64TBNZ, "TBNZ"), (BlockMIPSEQ, "EQ"), (BlockMIPSNE, "NE"), (BlockMIPSLTZ, "LTZ"), (BlockMIPSLEZ, "LEZ"), (BlockMIPSGTZ, "GTZ"), (BlockMIPSGEZ, "GEZ"), (BlockMIPSFPT, "FPT"), (BlockMIPSFPF, "FPF"), (BlockMIPS64EQ, "EQ"), (BlockMIPS64NE, "NE"), (BlockMIPS64LTZ, "LTZ"), (BlockMIPS64LEZ, "LEZ"), (BlockMIPS64GTZ, "GTZ"), (BlockMIPS64GEZ, "GEZ"), (BlockMIPS64FPT, "FPT"), (BlockMIPS64FPF, "FPF"), (BlockPPC64EQ, "EQ"), (BlockPPC64NE, "NE"), (BlockPPC64LT, "LT"), (BlockPPC64LE, "LE"), (BlockPPC64GT, "GT"), (BlockPPC64GE, "GE"), (BlockPPC64FLT, "FLT"), (BlockPPC64FLE, "FLE"), (BlockPPC64FGT, "FGT"), (BlockPPC64FGE, "FGE"), (BlockS390XEQ, "EQ"), (BlockS390XNE, "NE"), (BlockS390XLT, "LT"), (BlockS390XLE, "LE"), (BlockS390XGT, "GT"), (BlockS390XGE, "GE"), (BlockS390XGTF, "GTF"), (BlockS390XGEF, "GEF"), (BlockPlain, "Plain"), (BlockIf, "If"), (BlockDefer, "Defer"), (BlockRet, "Ret"), (BlockRetJmp, "RetJmp"), (BlockExit, "Exit"), (BlockFirst, "First")));

        public static @string String(this BlockKind k)
        {
            return blockString[k];
        }

        public static readonly Op OpInvalid = iota;

        public static readonly var Op386ADDSS = 0;
        public static readonly var Op386ADDSD = 1;
        public static readonly var Op386SUBSS = 2;
        public static readonly var Op386SUBSD = 3;
        public static readonly var Op386MULSS = 4;
        public static readonly var Op386MULSD = 5;
        public static readonly var Op386DIVSS = 6;
        public static readonly var Op386DIVSD = 7;
        public static readonly var Op386MOVSSload = 8;
        public static readonly var Op386MOVSDload = 9;
        public static readonly var Op386MOVSSconst = 10;
        public static readonly var Op386MOVSDconst = 11;
        public static readonly var Op386MOVSSloadidx1 = 12;
        public static readonly var Op386MOVSSloadidx4 = 13;
        public static readonly var Op386MOVSDloadidx1 = 14;
        public static readonly var Op386MOVSDloadidx8 = 15;
        public static readonly var Op386MOVSSstore = 16;
        public static readonly var Op386MOVSDstore = 17;
        public static readonly var Op386MOVSSstoreidx1 = 18;
        public static readonly var Op386MOVSSstoreidx4 = 19;
        public static readonly var Op386MOVSDstoreidx1 = 20;
        public static readonly var Op386MOVSDstoreidx8 = 21;
        public static readonly var Op386ADDL = 22;
        public static readonly var Op386ADDLconst = 23;
        public static readonly var Op386ADDLcarry = 24;
        public static readonly var Op386ADDLconstcarry = 25;
        public static readonly var Op386ADCL = 26;
        public static readonly var Op386ADCLconst = 27;
        public static readonly var Op386SUBL = 28;
        public static readonly var Op386SUBLconst = 29;
        public static readonly var Op386SUBLcarry = 30;
        public static readonly var Op386SUBLconstcarry = 31;
        public static readonly var Op386SBBL = 32;
        public static readonly var Op386SBBLconst = 33;
        public static readonly var Op386MULL = 34;
        public static readonly var Op386MULLconst = 35;
        public static readonly var Op386HMULL = 36;
        public static readonly var Op386HMULLU = 37;
        public static readonly var Op386MULLQU = 38;
        public static readonly var Op386AVGLU = 39;
        public static readonly var Op386DIVL = 40;
        public static readonly var Op386DIVW = 41;
        public static readonly var Op386DIVLU = 42;
        public static readonly var Op386DIVWU = 43;
        public static readonly var Op386MODL = 44;
        public static readonly var Op386MODW = 45;
        public static readonly var Op386MODLU = 46;
        public static readonly var Op386MODWU = 47;
        public static readonly var Op386ANDL = 48;
        public static readonly var Op386ANDLconst = 49;
        public static readonly var Op386ORL = 50;
        public static readonly var Op386ORLconst = 51;
        public static readonly var Op386XORL = 52;
        public static readonly var Op386XORLconst = 53;
        public static readonly var Op386CMPL = 54;
        public static readonly var Op386CMPW = 55;
        public static readonly var Op386CMPB = 56;
        public static readonly var Op386CMPLconst = 57;
        public static readonly var Op386CMPWconst = 58;
        public static readonly var Op386CMPBconst = 59;
        public static readonly var Op386UCOMISS = 60;
        public static readonly var Op386UCOMISD = 61;
        public static readonly var Op386TESTL = 62;
        public static readonly var Op386TESTW = 63;
        public static readonly var Op386TESTB = 64;
        public static readonly var Op386TESTLconst = 65;
        public static readonly var Op386TESTWconst = 66;
        public static readonly var Op386TESTBconst = 67;
        public static readonly var Op386SHLL = 68;
        public static readonly var Op386SHLLconst = 69;
        public static readonly var Op386SHRL = 70;
        public static readonly var Op386SHRW = 71;
        public static readonly var Op386SHRB = 72;
        public static readonly var Op386SHRLconst = 73;
        public static readonly var Op386SHRWconst = 74;
        public static readonly var Op386SHRBconst = 75;
        public static readonly var Op386SARL = 76;
        public static readonly var Op386SARW = 77;
        public static readonly var Op386SARB = 78;
        public static readonly var Op386SARLconst = 79;
        public static readonly var Op386SARWconst = 80;
        public static readonly var Op386SARBconst = 81;
        public static readonly var Op386ROLLconst = 82;
        public static readonly var Op386ROLWconst = 83;
        public static readonly var Op386ROLBconst = 84;
        public static readonly var Op386NEGL = 85;
        public static readonly var Op386NOTL = 86;
        public static readonly var Op386BSFL = 87;
        public static readonly var Op386BSFW = 88;
        public static readonly var Op386BSRL = 89;
        public static readonly var Op386BSRW = 90;
        public static readonly var Op386BSWAPL = 91;
        public static readonly var Op386SQRTSD = 92;
        public static readonly var Op386SBBLcarrymask = 93;
        public static readonly var Op386SETEQ = 94;
        public static readonly var Op386SETNE = 95;
        public static readonly var Op386SETL = 96;
        public static readonly var Op386SETLE = 97;
        public static readonly var Op386SETG = 98;
        public static readonly var Op386SETGE = 99;
        public static readonly var Op386SETB = 100;
        public static readonly var Op386SETBE = 101;
        public static readonly var Op386SETA = 102;
        public static readonly var Op386SETAE = 103;
        public static readonly var Op386SETEQF = 104;
        public static readonly var Op386SETNEF = 105;
        public static readonly var Op386SETORD = 106;
        public static readonly var Op386SETNAN = 107;
        public static readonly var Op386SETGF = 108;
        public static readonly var Op386SETGEF = 109;
        public static readonly var Op386MOVBLSX = 110;
        public static readonly var Op386MOVBLZX = 111;
        public static readonly var Op386MOVWLSX = 112;
        public static readonly var Op386MOVWLZX = 113;
        public static readonly var Op386MOVLconst = 114;
        public static readonly var Op386CVTTSD2SL = 115;
        public static readonly var Op386CVTTSS2SL = 116;
        public static readonly var Op386CVTSL2SS = 117;
        public static readonly var Op386CVTSL2SD = 118;
        public static readonly var Op386CVTSD2SS = 119;
        public static readonly var Op386CVTSS2SD = 120;
        public static readonly var Op386PXOR = 121;
        public static readonly var Op386LEAL = 122;
        public static readonly var Op386LEAL1 = 123;
        public static readonly var Op386LEAL2 = 124;
        public static readonly var Op386LEAL4 = 125;
        public static readonly var Op386LEAL8 = 126;
        public static readonly var Op386MOVBload = 127;
        public static readonly var Op386MOVBLSXload = 128;
        public static readonly var Op386MOVWload = 129;
        public static readonly var Op386MOVWLSXload = 130;
        public static readonly var Op386MOVLload = 131;
        public static readonly var Op386MOVBstore = 132;
        public static readonly var Op386MOVWstore = 133;
        public static readonly var Op386MOVLstore = 134;
        public static readonly var Op386MOVBloadidx1 = 135;
        public static readonly var Op386MOVWloadidx1 = 136;
        public static readonly var Op386MOVWloadidx2 = 137;
        public static readonly var Op386MOVLloadidx1 = 138;
        public static readonly var Op386MOVLloadidx4 = 139;
        public static readonly var Op386MOVBstoreidx1 = 140;
        public static readonly var Op386MOVWstoreidx1 = 141;
        public static readonly var Op386MOVWstoreidx2 = 142;
        public static readonly var Op386MOVLstoreidx1 = 143;
        public static readonly var Op386MOVLstoreidx4 = 144;
        public static readonly var Op386MOVBstoreconst = 145;
        public static readonly var Op386MOVWstoreconst = 146;
        public static readonly var Op386MOVLstoreconst = 147;
        public static readonly var Op386MOVBstoreconstidx1 = 148;
        public static readonly var Op386MOVWstoreconstidx1 = 149;
        public static readonly var Op386MOVWstoreconstidx2 = 150;
        public static readonly var Op386MOVLstoreconstidx1 = 151;
        public static readonly var Op386MOVLstoreconstidx4 = 152;
        public static readonly var Op386DUFFZERO = 153;
        public static readonly var Op386REPSTOSL = 154;
        public static readonly var Op386CALLstatic = 155;
        public static readonly var Op386CALLclosure = 156;
        public static readonly var Op386CALLinter = 157;
        public static readonly var Op386DUFFCOPY = 158;
        public static readonly var Op386REPMOVSL = 159;
        public static readonly var Op386InvertFlags = 160;
        public static readonly var Op386LoweredGetG = 161;
        public static readonly var Op386LoweredGetClosurePtr = 162;
        public static readonly var Op386LoweredGetCallerPC = 163;
        public static readonly var Op386LoweredGetCallerSP = 164;
        public static readonly var Op386LoweredNilCheck = 165;
        public static readonly var Op386MOVLconvert = 166;
        public static readonly var Op386FlagEQ = 167;
        public static readonly var Op386FlagLT_ULT = 168;
        public static readonly var Op386FlagLT_UGT = 169;
        public static readonly var Op386FlagGT_UGT = 170;
        public static readonly var Op386FlagGT_ULT = 171;
        public static readonly var Op386FCHS = 172;
        public static readonly var Op386MOVSSconst1 = 173;
        public static readonly var Op386MOVSDconst1 = 174;
        public static readonly var Op386MOVSSconst2 = 175;
        public static readonly var Op386MOVSDconst2 = 176;

        public static readonly var OpAMD64ADDSS = 177;
        public static readonly var OpAMD64ADDSD = 178;
        public static readonly var OpAMD64SUBSS = 179;
        public static readonly var OpAMD64SUBSD = 180;
        public static readonly var OpAMD64MULSS = 181;
        public static readonly var OpAMD64MULSD = 182;
        public static readonly var OpAMD64DIVSS = 183;
        public static readonly var OpAMD64DIVSD = 184;
        public static readonly var OpAMD64MOVSSload = 185;
        public static readonly var OpAMD64MOVSDload = 186;
        public static readonly var OpAMD64MOVSSconst = 187;
        public static readonly var OpAMD64MOVSDconst = 188;
        public static readonly var OpAMD64MOVSSloadidx1 = 189;
        public static readonly var OpAMD64MOVSSloadidx4 = 190;
        public static readonly var OpAMD64MOVSDloadidx1 = 191;
        public static readonly var OpAMD64MOVSDloadidx8 = 192;
        public static readonly var OpAMD64MOVSSstore = 193;
        public static readonly var OpAMD64MOVSDstore = 194;
        public static readonly var OpAMD64MOVSSstoreidx1 = 195;
        public static readonly var OpAMD64MOVSSstoreidx4 = 196;
        public static readonly var OpAMD64MOVSDstoreidx1 = 197;
        public static readonly var OpAMD64MOVSDstoreidx8 = 198;
        public static readonly var OpAMD64ADDSSmem = 199;
        public static readonly var OpAMD64ADDSDmem = 200;
        public static readonly var OpAMD64SUBSSmem = 201;
        public static readonly var OpAMD64SUBSDmem = 202;
        public static readonly var OpAMD64MULSSmem = 203;
        public static readonly var OpAMD64MULSDmem = 204;
        public static readonly var OpAMD64ADDQ = 205;
        public static readonly var OpAMD64ADDL = 206;
        public static readonly var OpAMD64ADDQconst = 207;
        public static readonly var OpAMD64ADDLconst = 208;
        public static readonly var OpAMD64ADDQconstmem = 209;
        public static readonly var OpAMD64ADDLconstmem = 210;
        public static readonly var OpAMD64SUBQ = 211;
        public static readonly var OpAMD64SUBL = 212;
        public static readonly var OpAMD64SUBQconst = 213;
        public static readonly var OpAMD64SUBLconst = 214;
        public static readonly var OpAMD64MULQ = 215;
        public static readonly var OpAMD64MULL = 216;
        public static readonly var OpAMD64MULQconst = 217;
        public static readonly var OpAMD64MULLconst = 218;
        public static readonly var OpAMD64HMULQ = 219;
        public static readonly var OpAMD64HMULL = 220;
        public static readonly var OpAMD64HMULQU = 221;
        public static readonly var OpAMD64HMULLU = 222;
        public static readonly var OpAMD64AVGQU = 223;
        public static readonly var OpAMD64DIVQ = 224;
        public static readonly var OpAMD64DIVL = 225;
        public static readonly var OpAMD64DIVW = 226;
        public static readonly var OpAMD64DIVQU = 227;
        public static readonly var OpAMD64DIVLU = 228;
        public static readonly var OpAMD64DIVWU = 229;
        public static readonly var OpAMD64MULQU2 = 230;
        public static readonly var OpAMD64DIVQU2 = 231;
        public static readonly var OpAMD64ANDQ = 232;
        public static readonly var OpAMD64ANDL = 233;
        public static readonly var OpAMD64ANDQconst = 234;
        public static readonly var OpAMD64ANDLconst = 235;
        public static readonly var OpAMD64ORQ = 236;
        public static readonly var OpAMD64ORL = 237;
        public static readonly var OpAMD64ORQconst = 238;
        public static readonly var OpAMD64ORLconst = 239;
        public static readonly var OpAMD64XORQ = 240;
        public static readonly var OpAMD64XORL = 241;
        public static readonly var OpAMD64XORQconst = 242;
        public static readonly var OpAMD64XORLconst = 243;
        public static readonly var OpAMD64CMPQ = 244;
        public static readonly var OpAMD64CMPL = 245;
        public static readonly var OpAMD64CMPW = 246;
        public static readonly var OpAMD64CMPB = 247;
        public static readonly var OpAMD64CMPQconst = 248;
        public static readonly var OpAMD64CMPLconst = 249;
        public static readonly var OpAMD64CMPWconst = 250;
        public static readonly var OpAMD64CMPBconst = 251;
        public static readonly var OpAMD64UCOMISS = 252;
        public static readonly var OpAMD64UCOMISD = 253;
        public static readonly var OpAMD64BTL = 254;
        public static readonly var OpAMD64BTQ = 255;
        public static readonly var OpAMD64BTLconst = 256;
        public static readonly var OpAMD64BTQconst = 257;
        public static readonly var OpAMD64TESTQ = 258;
        public static readonly var OpAMD64TESTL = 259;
        public static readonly var OpAMD64TESTW = 260;
        public static readonly var OpAMD64TESTB = 261;
        public static readonly var OpAMD64TESTQconst = 262;
        public static readonly var OpAMD64TESTLconst = 263;
        public static readonly var OpAMD64TESTWconst = 264;
        public static readonly var OpAMD64TESTBconst = 265;
        public static readonly var OpAMD64SHLQ = 266;
        public static readonly var OpAMD64SHLL = 267;
        public static readonly var OpAMD64SHLQconst = 268;
        public static readonly var OpAMD64SHLLconst = 269;
        public static readonly var OpAMD64SHRQ = 270;
        public static readonly var OpAMD64SHRL = 271;
        public static readonly var OpAMD64SHRW = 272;
        public static readonly var OpAMD64SHRB = 273;
        public static readonly var OpAMD64SHRQconst = 274;
        public static readonly var OpAMD64SHRLconst = 275;
        public static readonly var OpAMD64SHRWconst = 276;
        public static readonly var OpAMD64SHRBconst = 277;
        public static readonly var OpAMD64SARQ = 278;
        public static readonly var OpAMD64SARL = 279;
        public static readonly var OpAMD64SARW = 280;
        public static readonly var OpAMD64SARB = 281;
        public static readonly var OpAMD64SARQconst = 282;
        public static readonly var OpAMD64SARLconst = 283;
        public static readonly var OpAMD64SARWconst = 284;
        public static readonly var OpAMD64SARBconst = 285;
        public static readonly var OpAMD64ROLQ = 286;
        public static readonly var OpAMD64ROLL = 287;
        public static readonly var OpAMD64ROLW = 288;
        public static readonly var OpAMD64ROLB = 289;
        public static readonly var OpAMD64RORQ = 290;
        public static readonly var OpAMD64RORL = 291;
        public static readonly var OpAMD64RORW = 292;
        public static readonly var OpAMD64RORB = 293;
        public static readonly var OpAMD64ROLQconst = 294;
        public static readonly var OpAMD64ROLLconst = 295;
        public static readonly var OpAMD64ROLWconst = 296;
        public static readonly var OpAMD64ROLBconst = 297;
        public static readonly var OpAMD64ADDLmem = 298;
        public static readonly var OpAMD64ADDQmem = 299;
        public static readonly var OpAMD64SUBQmem = 300;
        public static readonly var OpAMD64SUBLmem = 301;
        public static readonly var OpAMD64ANDLmem = 302;
        public static readonly var OpAMD64ANDQmem = 303;
        public static readonly var OpAMD64ORQmem = 304;
        public static readonly var OpAMD64ORLmem = 305;
        public static readonly var OpAMD64XORQmem = 306;
        public static readonly var OpAMD64XORLmem = 307;
        public static readonly var OpAMD64NEGQ = 308;
        public static readonly var OpAMD64NEGL = 309;
        public static readonly var OpAMD64NOTQ = 310;
        public static readonly var OpAMD64NOTL = 311;
        public static readonly var OpAMD64BSFQ = 312;
        public static readonly var OpAMD64BSFL = 313;
        public static readonly var OpAMD64BSRQ = 314;
        public static readonly var OpAMD64BSRL = 315;
        public static readonly var OpAMD64CMOVQEQ = 316;
        public static readonly var OpAMD64CMOVLEQ = 317;
        public static readonly var OpAMD64BSWAPQ = 318;
        public static readonly var OpAMD64BSWAPL = 319;
        public static readonly var OpAMD64POPCNTQ = 320;
        public static readonly var OpAMD64POPCNTL = 321;
        public static readonly var OpAMD64SQRTSD = 322;
        public static readonly var OpAMD64ROUNDSD = 323;
        public static readonly var OpAMD64SBBQcarrymask = 324;
        public static readonly var OpAMD64SBBLcarrymask = 325;
        public static readonly var OpAMD64SETEQ = 326;
        public static readonly var OpAMD64SETNE = 327;
        public static readonly var OpAMD64SETL = 328;
        public static readonly var OpAMD64SETLE = 329;
        public static readonly var OpAMD64SETG = 330;
        public static readonly var OpAMD64SETGE = 331;
        public static readonly var OpAMD64SETB = 332;
        public static readonly var OpAMD64SETBE = 333;
        public static readonly var OpAMD64SETA = 334;
        public static readonly var OpAMD64SETAE = 335;
        public static readonly var OpAMD64SETEQmem = 336;
        public static readonly var OpAMD64SETNEmem = 337;
        public static readonly var OpAMD64SETLmem = 338;
        public static readonly var OpAMD64SETLEmem = 339;
        public static readonly var OpAMD64SETGmem = 340;
        public static readonly var OpAMD64SETGEmem = 341;
        public static readonly var OpAMD64SETBmem = 342;
        public static readonly var OpAMD64SETBEmem = 343;
        public static readonly var OpAMD64SETAmem = 344;
        public static readonly var OpAMD64SETAEmem = 345;
        public static readonly var OpAMD64SETEQF = 346;
        public static readonly var OpAMD64SETNEF = 347;
        public static readonly var OpAMD64SETORD = 348;
        public static readonly var OpAMD64SETNAN = 349;
        public static readonly var OpAMD64SETGF = 350;
        public static readonly var OpAMD64SETGEF = 351;
        public static readonly var OpAMD64MOVBQSX = 352;
        public static readonly var OpAMD64MOVBQZX = 353;
        public static readonly var OpAMD64MOVWQSX = 354;
        public static readonly var OpAMD64MOVWQZX = 355;
        public static readonly var OpAMD64MOVLQSX = 356;
        public static readonly var OpAMD64MOVLQZX = 357;
        public static readonly var OpAMD64MOVLconst = 358;
        public static readonly var OpAMD64MOVQconst = 359;
        public static readonly var OpAMD64CVTTSD2SL = 360;
        public static readonly var OpAMD64CVTTSD2SQ = 361;
        public static readonly var OpAMD64CVTTSS2SL = 362;
        public static readonly var OpAMD64CVTTSS2SQ = 363;
        public static readonly var OpAMD64CVTSL2SS = 364;
        public static readonly var OpAMD64CVTSL2SD = 365;
        public static readonly var OpAMD64CVTSQ2SS = 366;
        public static readonly var OpAMD64CVTSQ2SD = 367;
        public static readonly var OpAMD64CVTSD2SS = 368;
        public static readonly var OpAMD64CVTSS2SD = 369;
        public static readonly var OpAMD64MOVQi2f = 370;
        public static readonly var OpAMD64MOVQf2i = 371;
        public static readonly var OpAMD64MOVLi2f = 372;
        public static readonly var OpAMD64MOVLf2i = 373;
        public static readonly var OpAMD64PXOR = 374;
        public static readonly var OpAMD64LEAQ = 375;
        public static readonly var OpAMD64LEAQ1 = 376;
        public static readonly var OpAMD64LEAQ2 = 377;
        public static readonly var OpAMD64LEAQ4 = 378;
        public static readonly var OpAMD64LEAQ8 = 379;
        public static readonly var OpAMD64LEAL = 380;
        public static readonly var OpAMD64MOVBload = 381;
        public static readonly var OpAMD64MOVBQSXload = 382;
        public static readonly var OpAMD64MOVWload = 383;
        public static readonly var OpAMD64MOVWQSXload = 384;
        public static readonly var OpAMD64MOVLload = 385;
        public static readonly var OpAMD64MOVLQSXload = 386;
        public static readonly var OpAMD64MOVQload = 387;
        public static readonly var OpAMD64MOVBstore = 388;
        public static readonly var OpAMD64MOVWstore = 389;
        public static readonly var OpAMD64MOVLstore = 390;
        public static readonly var OpAMD64MOVQstore = 391;
        public static readonly var OpAMD64MOVOload = 392;
        public static readonly var OpAMD64MOVOstore = 393;
        public static readonly var OpAMD64MOVBloadidx1 = 394;
        public static readonly var OpAMD64MOVWloadidx1 = 395;
        public static readonly var OpAMD64MOVWloadidx2 = 396;
        public static readonly var OpAMD64MOVLloadidx1 = 397;
        public static readonly var OpAMD64MOVLloadidx4 = 398;
        public static readonly var OpAMD64MOVLloadidx8 = 399;
        public static readonly var OpAMD64MOVQloadidx1 = 400;
        public static readonly var OpAMD64MOVQloadidx8 = 401;
        public static readonly var OpAMD64MOVBstoreidx1 = 402;
        public static readonly var OpAMD64MOVWstoreidx1 = 403;
        public static readonly var OpAMD64MOVWstoreidx2 = 404;
        public static readonly var OpAMD64MOVLstoreidx1 = 405;
        public static readonly var OpAMD64MOVLstoreidx4 = 406;
        public static readonly var OpAMD64MOVLstoreidx8 = 407;
        public static readonly var OpAMD64MOVQstoreidx1 = 408;
        public static readonly var OpAMD64MOVQstoreidx8 = 409;
        public static readonly var OpAMD64MOVBstoreconst = 410;
        public static readonly var OpAMD64MOVWstoreconst = 411;
        public static readonly var OpAMD64MOVLstoreconst = 412;
        public static readonly var OpAMD64MOVQstoreconst = 413;
        public static readonly var OpAMD64MOVBstoreconstidx1 = 414;
        public static readonly var OpAMD64MOVWstoreconstidx1 = 415;
        public static readonly var OpAMD64MOVWstoreconstidx2 = 416;
        public static readonly var OpAMD64MOVLstoreconstidx1 = 417;
        public static readonly var OpAMD64MOVLstoreconstidx4 = 418;
        public static readonly var OpAMD64MOVQstoreconstidx1 = 419;
        public static readonly var OpAMD64MOVQstoreconstidx8 = 420;
        public static readonly var OpAMD64DUFFZERO = 421;
        public static readonly var OpAMD64MOVOconst = 422;
        public static readonly var OpAMD64REPSTOSQ = 423;
        public static readonly var OpAMD64CALLstatic = 424;
        public static readonly var OpAMD64CALLclosure = 425;
        public static readonly var OpAMD64CALLinter = 426;
        public static readonly var OpAMD64DUFFCOPY = 427;
        public static readonly var OpAMD64REPMOVSQ = 428;
        public static readonly var OpAMD64InvertFlags = 429;
        public static readonly var OpAMD64LoweredGetG = 430;
        public static readonly var OpAMD64LoweredGetClosurePtr = 431;
        public static readonly var OpAMD64LoweredGetCallerPC = 432;
        public static readonly var OpAMD64LoweredGetCallerSP = 433;
        public static readonly var OpAMD64LoweredNilCheck = 434;
        public static readonly var OpAMD64LoweredWB = 435;
        public static readonly var OpAMD64MOVQconvert = 436;
        public static readonly var OpAMD64MOVLconvert = 437;
        public static readonly var OpAMD64FlagEQ = 438;
        public static readonly var OpAMD64FlagLT_ULT = 439;
        public static readonly var OpAMD64FlagLT_UGT = 440;
        public static readonly var OpAMD64FlagGT_UGT = 441;
        public static readonly var OpAMD64FlagGT_ULT = 442;
        public static readonly var OpAMD64MOVLatomicload = 443;
        public static readonly var OpAMD64MOVQatomicload = 444;
        public static readonly var OpAMD64XCHGL = 445;
        public static readonly var OpAMD64XCHGQ = 446;
        public static readonly var OpAMD64XADDLlock = 447;
        public static readonly var OpAMD64XADDQlock = 448;
        public static readonly var OpAMD64AddTupleFirst32 = 449;
        public static readonly var OpAMD64AddTupleFirst64 = 450;
        public static readonly var OpAMD64CMPXCHGLlock = 451;
        public static readonly var OpAMD64CMPXCHGQlock = 452;
        public static readonly var OpAMD64ANDBlock = 453;
        public static readonly var OpAMD64ORBlock = 454;

        public static readonly var OpARMADD = 455;
        public static readonly var OpARMADDconst = 456;
        public static readonly var OpARMSUB = 457;
        public static readonly var OpARMSUBconst = 458;
        public static readonly var OpARMRSB = 459;
        public static readonly var OpARMRSBconst = 460;
        public static readonly var OpARMMUL = 461;
        public static readonly var OpARMHMUL = 462;
        public static readonly var OpARMHMULU = 463;
        public static readonly var OpARMCALLudiv = 464;
        public static readonly var OpARMADDS = 465;
        public static readonly var OpARMADDSconst = 466;
        public static readonly var OpARMADC = 467;
        public static readonly var OpARMADCconst = 468;
        public static readonly var OpARMSUBS = 469;
        public static readonly var OpARMSUBSconst = 470;
        public static readonly var OpARMRSBSconst = 471;
        public static readonly var OpARMSBC = 472;
        public static readonly var OpARMSBCconst = 473;
        public static readonly var OpARMRSCconst = 474;
        public static readonly var OpARMMULLU = 475;
        public static readonly var OpARMMULA = 476;
        public static readonly var OpARMMULS = 477;
        public static readonly var OpARMADDF = 478;
        public static readonly var OpARMADDD = 479;
        public static readonly var OpARMSUBF = 480;
        public static readonly var OpARMSUBD = 481;
        public static readonly var OpARMMULF = 482;
        public static readonly var OpARMMULD = 483;
        public static readonly var OpARMNMULF = 484;
        public static readonly var OpARMNMULD = 485;
        public static readonly var OpARMDIVF = 486;
        public static readonly var OpARMDIVD = 487;
        public static readonly var OpARMMULAF = 488;
        public static readonly var OpARMMULAD = 489;
        public static readonly var OpARMMULSF = 490;
        public static readonly var OpARMMULSD = 491;
        public static readonly var OpARMAND = 492;
        public static readonly var OpARMANDconst = 493;
        public static readonly var OpARMOR = 494;
        public static readonly var OpARMORconst = 495;
        public static readonly var OpARMXOR = 496;
        public static readonly var OpARMXORconst = 497;
        public static readonly var OpARMBIC = 498;
        public static readonly var OpARMBICconst = 499;
        public static readonly var OpARMBFX = 500;
        public static readonly var OpARMBFXU = 501;
        public static readonly var OpARMMVN = 502;
        public static readonly var OpARMNEGF = 503;
        public static readonly var OpARMNEGD = 504;
        public static readonly var OpARMSQRTD = 505;
        public static readonly var OpARMCLZ = 506;
        public static readonly var OpARMREV = 507;
        public static readonly var OpARMRBIT = 508;
        public static readonly var OpARMSLL = 509;
        public static readonly var OpARMSLLconst = 510;
        public static readonly var OpARMSRL = 511;
        public static readonly var OpARMSRLconst = 512;
        public static readonly var OpARMSRA = 513;
        public static readonly var OpARMSRAconst = 514;
        public static readonly var OpARMSRRconst = 515;
        public static readonly var OpARMADDshiftLL = 516;
        public static readonly var OpARMADDshiftRL = 517;
        public static readonly var OpARMADDshiftRA = 518;
        public static readonly var OpARMSUBshiftLL = 519;
        public static readonly var OpARMSUBshiftRL = 520;
        public static readonly var OpARMSUBshiftRA = 521;
        public static readonly var OpARMRSBshiftLL = 522;
        public static readonly var OpARMRSBshiftRL = 523;
        public static readonly var OpARMRSBshiftRA = 524;
        public static readonly var OpARMANDshiftLL = 525;
        public static readonly var OpARMANDshiftRL = 526;
        public static readonly var OpARMANDshiftRA = 527;
        public static readonly var OpARMORshiftLL = 528;
        public static readonly var OpARMORshiftRL = 529;
        public static readonly var OpARMORshiftRA = 530;
        public static readonly var OpARMXORshiftLL = 531;
        public static readonly var OpARMXORshiftRL = 532;
        public static readonly var OpARMXORshiftRA = 533;
        public static readonly var OpARMXORshiftRR = 534;
        public static readonly var OpARMBICshiftLL = 535;
        public static readonly var OpARMBICshiftRL = 536;
        public static readonly var OpARMBICshiftRA = 537;
        public static readonly var OpARMMVNshiftLL = 538;
        public static readonly var OpARMMVNshiftRL = 539;
        public static readonly var OpARMMVNshiftRA = 540;
        public static readonly var OpARMADCshiftLL = 541;
        public static readonly var OpARMADCshiftRL = 542;
        public static readonly var OpARMADCshiftRA = 543;
        public static readonly var OpARMSBCshiftLL = 544;
        public static readonly var OpARMSBCshiftRL = 545;
        public static readonly var OpARMSBCshiftRA = 546;
        public static readonly var OpARMRSCshiftLL = 547;
        public static readonly var OpARMRSCshiftRL = 548;
        public static readonly var OpARMRSCshiftRA = 549;
        public static readonly var OpARMADDSshiftLL = 550;
        public static readonly var OpARMADDSshiftRL = 551;
        public static readonly var OpARMADDSshiftRA = 552;
        public static readonly var OpARMSUBSshiftLL = 553;
        public static readonly var OpARMSUBSshiftRL = 554;
        public static readonly var OpARMSUBSshiftRA = 555;
        public static readonly var OpARMRSBSshiftLL = 556;
        public static readonly var OpARMRSBSshiftRL = 557;
        public static readonly var OpARMRSBSshiftRA = 558;
        public static readonly var OpARMADDshiftLLreg = 559;
        public static readonly var OpARMADDshiftRLreg = 560;
        public static readonly var OpARMADDshiftRAreg = 561;
        public static readonly var OpARMSUBshiftLLreg = 562;
        public static readonly var OpARMSUBshiftRLreg = 563;
        public static readonly var OpARMSUBshiftRAreg = 564;
        public static readonly var OpARMRSBshiftLLreg = 565;
        public static readonly var OpARMRSBshiftRLreg = 566;
        public static readonly var OpARMRSBshiftRAreg = 567;
        public static readonly var OpARMANDshiftLLreg = 568;
        public static readonly var OpARMANDshiftRLreg = 569;
        public static readonly var OpARMANDshiftRAreg = 570;
        public static readonly var OpARMORshiftLLreg = 571;
        public static readonly var OpARMORshiftRLreg = 572;
        public static readonly var OpARMORshiftRAreg = 573;
        public static readonly var OpARMXORshiftLLreg = 574;
        public static readonly var OpARMXORshiftRLreg = 575;
        public static readonly var OpARMXORshiftRAreg = 576;
        public static readonly var OpARMBICshiftLLreg = 577;
        public static readonly var OpARMBICshiftRLreg = 578;
        public static readonly var OpARMBICshiftRAreg = 579;
        public static readonly var OpARMMVNshiftLLreg = 580;
        public static readonly var OpARMMVNshiftRLreg = 581;
        public static readonly var OpARMMVNshiftRAreg = 582;
        public static readonly var OpARMADCshiftLLreg = 583;
        public static readonly var OpARMADCshiftRLreg = 584;
        public static readonly var OpARMADCshiftRAreg = 585;
        public static readonly var OpARMSBCshiftLLreg = 586;
        public static readonly var OpARMSBCshiftRLreg = 587;
        public static readonly var OpARMSBCshiftRAreg = 588;
        public static readonly var OpARMRSCshiftLLreg = 589;
        public static readonly var OpARMRSCshiftRLreg = 590;
        public static readonly var OpARMRSCshiftRAreg = 591;
        public static readonly var OpARMADDSshiftLLreg = 592;
        public static readonly var OpARMADDSshiftRLreg = 593;
        public static readonly var OpARMADDSshiftRAreg = 594;
        public static readonly var OpARMSUBSshiftLLreg = 595;
        public static readonly var OpARMSUBSshiftRLreg = 596;
        public static readonly var OpARMSUBSshiftRAreg = 597;
        public static readonly var OpARMRSBSshiftLLreg = 598;
        public static readonly var OpARMRSBSshiftRLreg = 599;
        public static readonly var OpARMRSBSshiftRAreg = 600;
        public static readonly var OpARMCMP = 601;
        public static readonly var OpARMCMPconst = 602;
        public static readonly var OpARMCMN = 603;
        public static readonly var OpARMCMNconst = 604;
        public static readonly var OpARMTST = 605;
        public static readonly var OpARMTSTconst = 606;
        public static readonly var OpARMTEQ = 607;
        public static readonly var OpARMTEQconst = 608;
        public static readonly var OpARMCMPF = 609;
        public static readonly var OpARMCMPD = 610;
        public static readonly var OpARMCMPshiftLL = 611;
        public static readonly var OpARMCMPshiftRL = 612;
        public static readonly var OpARMCMPshiftRA = 613;
        public static readonly var OpARMCMNshiftLL = 614;
        public static readonly var OpARMCMNshiftRL = 615;
        public static readonly var OpARMCMNshiftRA = 616;
        public static readonly var OpARMTSTshiftLL = 617;
        public static readonly var OpARMTSTshiftRL = 618;
        public static readonly var OpARMTSTshiftRA = 619;
        public static readonly var OpARMTEQshiftLL = 620;
        public static readonly var OpARMTEQshiftRL = 621;
        public static readonly var OpARMTEQshiftRA = 622;
        public static readonly var OpARMCMPshiftLLreg = 623;
        public static readonly var OpARMCMPshiftRLreg = 624;
        public static readonly var OpARMCMPshiftRAreg = 625;
        public static readonly var OpARMCMNshiftLLreg = 626;
        public static readonly var OpARMCMNshiftRLreg = 627;
        public static readonly var OpARMCMNshiftRAreg = 628;
        public static readonly var OpARMTSTshiftLLreg = 629;
        public static readonly var OpARMTSTshiftRLreg = 630;
        public static readonly var OpARMTSTshiftRAreg = 631;
        public static readonly var OpARMTEQshiftLLreg = 632;
        public static readonly var OpARMTEQshiftRLreg = 633;
        public static readonly var OpARMTEQshiftRAreg = 634;
        public static readonly var OpARMCMPF0 = 635;
        public static readonly var OpARMCMPD0 = 636;
        public static readonly var OpARMMOVWconst = 637;
        public static readonly var OpARMMOVFconst = 638;
        public static readonly var OpARMMOVDconst = 639;
        public static readonly var OpARMMOVWaddr = 640;
        public static readonly var OpARMMOVBload = 641;
        public static readonly var OpARMMOVBUload = 642;
        public static readonly var OpARMMOVHload = 643;
        public static readonly var OpARMMOVHUload = 644;
        public static readonly var OpARMMOVWload = 645;
        public static readonly var OpARMMOVFload = 646;
        public static readonly var OpARMMOVDload = 647;
        public static readonly var OpARMMOVBstore = 648;
        public static readonly var OpARMMOVHstore = 649;
        public static readonly var OpARMMOVWstore = 650;
        public static readonly var OpARMMOVFstore = 651;
        public static readonly var OpARMMOVDstore = 652;
        public static readonly var OpARMMOVWloadidx = 653;
        public static readonly var OpARMMOVWloadshiftLL = 654;
        public static readonly var OpARMMOVWloadshiftRL = 655;
        public static readonly var OpARMMOVWloadshiftRA = 656;
        public static readonly var OpARMMOVBUloadidx = 657;
        public static readonly var OpARMMOVBloadidx = 658;
        public static readonly var OpARMMOVHUloadidx = 659;
        public static readonly var OpARMMOVHloadidx = 660;
        public static readonly var OpARMMOVWstoreidx = 661;
        public static readonly var OpARMMOVWstoreshiftLL = 662;
        public static readonly var OpARMMOVWstoreshiftRL = 663;
        public static readonly var OpARMMOVWstoreshiftRA = 664;
        public static readonly var OpARMMOVBstoreidx = 665;
        public static readonly var OpARMMOVHstoreidx = 666;
        public static readonly var OpARMMOVBreg = 667;
        public static readonly var OpARMMOVBUreg = 668;
        public static readonly var OpARMMOVHreg = 669;
        public static readonly var OpARMMOVHUreg = 670;
        public static readonly var OpARMMOVWreg = 671;
        public static readonly var OpARMMOVWnop = 672;
        public static readonly var OpARMMOVWF = 673;
        public static readonly var OpARMMOVWD = 674;
        public static readonly var OpARMMOVWUF = 675;
        public static readonly var OpARMMOVWUD = 676;
        public static readonly var OpARMMOVFW = 677;
        public static readonly var OpARMMOVDW = 678;
        public static readonly var OpARMMOVFWU = 679;
        public static readonly var OpARMMOVDWU = 680;
        public static readonly var OpARMMOVFD = 681;
        public static readonly var OpARMMOVDF = 682;
        public static readonly var OpARMCMOVWHSconst = 683;
        public static readonly var OpARMCMOVWLSconst = 684;
        public static readonly var OpARMSRAcond = 685;
        public static readonly var OpARMCALLstatic = 686;
        public static readonly var OpARMCALLclosure = 687;
        public static readonly var OpARMCALLinter = 688;
        public static readonly var OpARMLoweredNilCheck = 689;
        public static readonly var OpARMEqual = 690;
        public static readonly var OpARMNotEqual = 691;
        public static readonly var OpARMLessThan = 692;
        public static readonly var OpARMLessEqual = 693;
        public static readonly var OpARMGreaterThan = 694;
        public static readonly var OpARMGreaterEqual = 695;
        public static readonly var OpARMLessThanU = 696;
        public static readonly var OpARMLessEqualU = 697;
        public static readonly var OpARMGreaterThanU = 698;
        public static readonly var OpARMGreaterEqualU = 699;
        public static readonly var OpARMDUFFZERO = 700;
        public static readonly var OpARMDUFFCOPY = 701;
        public static readonly var OpARMLoweredZero = 702;
        public static readonly var OpARMLoweredMove = 703;
        public static readonly var OpARMLoweredGetClosurePtr = 704;
        public static readonly var OpARMLoweredGetCallerSP = 705;
        public static readonly var OpARMMOVWconvert = 706;
        public static readonly var OpARMFlagEQ = 707;
        public static readonly var OpARMFlagLT_ULT = 708;
        public static readonly var OpARMFlagLT_UGT = 709;
        public static readonly var OpARMFlagGT_UGT = 710;
        public static readonly var OpARMFlagGT_ULT = 711;
        public static readonly var OpARMInvertFlags = 712;

        public static readonly var OpARM64ADD = 713;
        public static readonly var OpARM64ADDconst = 714;
        public static readonly var OpARM64SUB = 715;
        public static readonly var OpARM64SUBconst = 716;
        public static readonly var OpARM64MUL = 717;
        public static readonly var OpARM64MULW = 718;
        public static readonly var OpARM64MULH = 719;
        public static readonly var OpARM64UMULH = 720;
        public static readonly var OpARM64MULL = 721;
        public static readonly var OpARM64UMULL = 722;
        public static readonly var OpARM64DIV = 723;
        public static readonly var OpARM64UDIV = 724;
        public static readonly var OpARM64DIVW = 725;
        public static readonly var OpARM64UDIVW = 726;
        public static readonly var OpARM64MOD = 727;
        public static readonly var OpARM64UMOD = 728;
        public static readonly var OpARM64MODW = 729;
        public static readonly var OpARM64UMODW = 730;
        public static readonly var OpARM64FADDS = 731;
        public static readonly var OpARM64FADDD = 732;
        public static readonly var OpARM64FSUBS = 733;
        public static readonly var OpARM64FSUBD = 734;
        public static readonly var OpARM64FMULS = 735;
        public static readonly var OpARM64FMULD = 736;
        public static readonly var OpARM64FDIVS = 737;
        public static readonly var OpARM64FDIVD = 738;
        public static readonly var OpARM64AND = 739;
        public static readonly var OpARM64ANDconst = 740;
        public static readonly var OpARM64OR = 741;
        public static readonly var OpARM64ORconst = 742;
        public static readonly var OpARM64XOR = 743;
        public static readonly var OpARM64XORconst = 744;
        public static readonly var OpARM64BIC = 745;
        public static readonly var OpARM64BICconst = 746;
        public static readonly var OpARM64MVN = 747;
        public static readonly var OpARM64NEG = 748;
        public static readonly var OpARM64FNEGS = 749;
        public static readonly var OpARM64FNEGD = 750;
        public static readonly var OpARM64FSQRTD = 751;
        public static readonly var OpARM64REV = 752;
        public static readonly var OpARM64REVW = 753;
        public static readonly var OpARM64REV16W = 754;
        public static readonly var OpARM64RBIT = 755;
        public static readonly var OpARM64RBITW = 756;
        public static readonly var OpARM64CLZ = 757;
        public static readonly var OpARM64CLZW = 758;
        public static readonly var OpARM64SLL = 759;
        public static readonly var OpARM64SLLconst = 760;
        public static readonly var OpARM64SRL = 761;
        public static readonly var OpARM64SRLconst = 762;
        public static readonly var OpARM64SRA = 763;
        public static readonly var OpARM64SRAconst = 764;
        public static readonly var OpARM64RORconst = 765;
        public static readonly var OpARM64RORWconst = 766;
        public static readonly var OpARM64CMP = 767;
        public static readonly var OpARM64CMPconst = 768;
        public static readonly var OpARM64CMPW = 769;
        public static readonly var OpARM64CMPWconst = 770;
        public static readonly var OpARM64CMN = 771;
        public static readonly var OpARM64CMNconst = 772;
        public static readonly var OpARM64CMNW = 773;
        public static readonly var OpARM64CMNWconst = 774;
        public static readonly var OpARM64FCMPS = 775;
        public static readonly var OpARM64FCMPD = 776;
        public static readonly var OpARM64ADDshiftLL = 777;
        public static readonly var OpARM64ADDshiftRL = 778;
        public static readonly var OpARM64ADDshiftRA = 779;
        public static readonly var OpARM64SUBshiftLL = 780;
        public static readonly var OpARM64SUBshiftRL = 781;
        public static readonly var OpARM64SUBshiftRA = 782;
        public static readonly var OpARM64ANDshiftLL = 783;
        public static readonly var OpARM64ANDshiftRL = 784;
        public static readonly var OpARM64ANDshiftRA = 785;
        public static readonly var OpARM64ORshiftLL = 786;
        public static readonly var OpARM64ORshiftRL = 787;
        public static readonly var OpARM64ORshiftRA = 788;
        public static readonly var OpARM64XORshiftLL = 789;
        public static readonly var OpARM64XORshiftRL = 790;
        public static readonly var OpARM64XORshiftRA = 791;
        public static readonly var OpARM64BICshiftLL = 792;
        public static readonly var OpARM64BICshiftRL = 793;
        public static readonly var OpARM64BICshiftRA = 794;
        public static readonly var OpARM64CMPshiftLL = 795;
        public static readonly var OpARM64CMPshiftRL = 796;
        public static readonly var OpARM64CMPshiftRA = 797;
        public static readonly var OpARM64MOVDconst = 798;
        public static readonly var OpARM64FMOVSconst = 799;
        public static readonly var OpARM64FMOVDconst = 800;
        public static readonly var OpARM64MOVDaddr = 801;
        public static readonly var OpARM64MOVBload = 802;
        public static readonly var OpARM64MOVBUload = 803;
        public static readonly var OpARM64MOVHload = 804;
        public static readonly var OpARM64MOVHUload = 805;
        public static readonly var OpARM64MOVWload = 806;
        public static readonly var OpARM64MOVWUload = 807;
        public static readonly var OpARM64MOVDload = 808;
        public static readonly var OpARM64FMOVSload = 809;
        public static readonly var OpARM64FMOVDload = 810;
        public static readonly var OpARM64MOVBstore = 811;
        public static readonly var OpARM64MOVHstore = 812;
        public static readonly var OpARM64MOVWstore = 813;
        public static readonly var OpARM64MOVDstore = 814;
        public static readonly var OpARM64STP = 815;
        public static readonly var OpARM64FMOVSstore = 816;
        public static readonly var OpARM64FMOVDstore = 817;
        public static readonly var OpARM64MOVBstorezero = 818;
        public static readonly var OpARM64MOVHstorezero = 819;
        public static readonly var OpARM64MOVWstorezero = 820;
        public static readonly var OpARM64MOVDstorezero = 821;
        public static readonly var OpARM64MOVQstorezero = 822;
        public static readonly var OpARM64MOVBreg = 823;
        public static readonly var OpARM64MOVBUreg = 824;
        public static readonly var OpARM64MOVHreg = 825;
        public static readonly var OpARM64MOVHUreg = 826;
        public static readonly var OpARM64MOVWreg = 827;
        public static readonly var OpARM64MOVWUreg = 828;
        public static readonly var OpARM64MOVDreg = 829;
        public static readonly var OpARM64MOVDnop = 830;
        public static readonly var OpARM64SCVTFWS = 831;
        public static readonly var OpARM64SCVTFWD = 832;
        public static readonly var OpARM64UCVTFWS = 833;
        public static readonly var OpARM64UCVTFWD = 834;
        public static readonly var OpARM64SCVTFS = 835;
        public static readonly var OpARM64SCVTFD = 836;
        public static readonly var OpARM64UCVTFS = 837;
        public static readonly var OpARM64UCVTFD = 838;
        public static readonly var OpARM64FCVTZSSW = 839;
        public static readonly var OpARM64FCVTZSDW = 840;
        public static readonly var OpARM64FCVTZUSW = 841;
        public static readonly var OpARM64FCVTZUDW = 842;
        public static readonly var OpARM64FCVTZSS = 843;
        public static readonly var OpARM64FCVTZSD = 844;
        public static readonly var OpARM64FCVTZUS = 845;
        public static readonly var OpARM64FCVTZUD = 846;
        public static readonly var OpARM64FCVTSD = 847;
        public static readonly var OpARM64FCVTDS = 848;
        public static readonly var OpARM64CSELULT = 849;
        public static readonly var OpARM64CSELULT0 = 850;
        public static readonly var OpARM64CALLstatic = 851;
        public static readonly var OpARM64CALLclosure = 852;
        public static readonly var OpARM64CALLinter = 853;
        public static readonly var OpARM64LoweredNilCheck = 854;
        public static readonly var OpARM64Equal = 855;
        public static readonly var OpARM64NotEqual = 856;
        public static readonly var OpARM64LessThan = 857;
        public static readonly var OpARM64LessEqual = 858;
        public static readonly var OpARM64GreaterThan = 859;
        public static readonly var OpARM64GreaterEqual = 860;
        public static readonly var OpARM64LessThanU = 861;
        public static readonly var OpARM64LessEqualU = 862;
        public static readonly var OpARM64GreaterThanU = 863;
        public static readonly var OpARM64GreaterEqualU = 864;
        public static readonly var OpARM64DUFFZERO = 865;
        public static readonly var OpARM64LoweredZero = 866;
        public static readonly var OpARM64DUFFCOPY = 867;
        public static readonly var OpARM64LoweredMove = 868;
        public static readonly var OpARM64LoweredGetClosurePtr = 869;
        public static readonly var OpARM64LoweredGetCallerSP = 870;
        public static readonly var OpARM64MOVDconvert = 871;
        public static readonly var OpARM64FlagEQ = 872;
        public static readonly var OpARM64FlagLT_ULT = 873;
        public static readonly var OpARM64FlagLT_UGT = 874;
        public static readonly var OpARM64FlagGT_UGT = 875;
        public static readonly var OpARM64FlagGT_ULT = 876;
        public static readonly var OpARM64InvertFlags = 877;
        public static readonly var OpARM64LDAR = 878;
        public static readonly var OpARM64LDARW = 879;
        public static readonly var OpARM64STLR = 880;
        public static readonly var OpARM64STLRW = 881;
        public static readonly var OpARM64LoweredAtomicExchange64 = 882;
        public static readonly var OpARM64LoweredAtomicExchange32 = 883;
        public static readonly var OpARM64LoweredAtomicAdd64 = 884;
        public static readonly var OpARM64LoweredAtomicAdd32 = 885;
        public static readonly var OpARM64LoweredAtomicCas64 = 886;
        public static readonly var OpARM64LoweredAtomicCas32 = 887;
        public static readonly var OpARM64LoweredAtomicAnd8 = 888;
        public static readonly var OpARM64LoweredAtomicOr8 = 889;

        public static readonly var OpMIPSADD = 890;
        public static readonly var OpMIPSADDconst = 891;
        public static readonly var OpMIPSSUB = 892;
        public static readonly var OpMIPSSUBconst = 893;
        public static readonly var OpMIPSMUL = 894;
        public static readonly var OpMIPSMULT = 895;
        public static readonly var OpMIPSMULTU = 896;
        public static readonly var OpMIPSDIV = 897;
        public static readonly var OpMIPSDIVU = 898;
        public static readonly var OpMIPSADDF = 899;
        public static readonly var OpMIPSADDD = 900;
        public static readonly var OpMIPSSUBF = 901;
        public static readonly var OpMIPSSUBD = 902;
        public static readonly var OpMIPSMULF = 903;
        public static readonly var OpMIPSMULD = 904;
        public static readonly var OpMIPSDIVF = 905;
        public static readonly var OpMIPSDIVD = 906;
        public static readonly var OpMIPSAND = 907;
        public static readonly var OpMIPSANDconst = 908;
        public static readonly var OpMIPSOR = 909;
        public static readonly var OpMIPSORconst = 910;
        public static readonly var OpMIPSXOR = 911;
        public static readonly var OpMIPSXORconst = 912;
        public static readonly var OpMIPSNOR = 913;
        public static readonly var OpMIPSNORconst = 914;
        public static readonly var OpMIPSNEG = 915;
        public static readonly var OpMIPSNEGF = 916;
        public static readonly var OpMIPSNEGD = 917;
        public static readonly var OpMIPSSQRTD = 918;
        public static readonly var OpMIPSSLL = 919;
        public static readonly var OpMIPSSLLconst = 920;
        public static readonly var OpMIPSSRL = 921;
        public static readonly var OpMIPSSRLconst = 922;
        public static readonly var OpMIPSSRA = 923;
        public static readonly var OpMIPSSRAconst = 924;
        public static readonly var OpMIPSCLZ = 925;
        public static readonly var OpMIPSSGT = 926;
        public static readonly var OpMIPSSGTconst = 927;
        public static readonly var OpMIPSSGTzero = 928;
        public static readonly var OpMIPSSGTU = 929;
        public static readonly var OpMIPSSGTUconst = 930;
        public static readonly var OpMIPSSGTUzero = 931;
        public static readonly var OpMIPSCMPEQF = 932;
        public static readonly var OpMIPSCMPEQD = 933;
        public static readonly var OpMIPSCMPGEF = 934;
        public static readonly var OpMIPSCMPGED = 935;
        public static readonly var OpMIPSCMPGTF = 936;
        public static readonly var OpMIPSCMPGTD = 937;
        public static readonly var OpMIPSMOVWconst = 938;
        public static readonly var OpMIPSMOVFconst = 939;
        public static readonly var OpMIPSMOVDconst = 940;
        public static readonly var OpMIPSMOVWaddr = 941;
        public static readonly var OpMIPSMOVBload = 942;
        public static readonly var OpMIPSMOVBUload = 943;
        public static readonly var OpMIPSMOVHload = 944;
        public static readonly var OpMIPSMOVHUload = 945;
        public static readonly var OpMIPSMOVWload = 946;
        public static readonly var OpMIPSMOVFload = 947;
        public static readonly var OpMIPSMOVDload = 948;
        public static readonly var OpMIPSMOVBstore = 949;
        public static readonly var OpMIPSMOVHstore = 950;
        public static readonly var OpMIPSMOVWstore = 951;
        public static readonly var OpMIPSMOVFstore = 952;
        public static readonly var OpMIPSMOVDstore = 953;
        public static readonly var OpMIPSMOVBstorezero = 954;
        public static readonly var OpMIPSMOVHstorezero = 955;
        public static readonly var OpMIPSMOVWstorezero = 956;
        public static readonly var OpMIPSMOVBreg = 957;
        public static readonly var OpMIPSMOVBUreg = 958;
        public static readonly var OpMIPSMOVHreg = 959;
        public static readonly var OpMIPSMOVHUreg = 960;
        public static readonly var OpMIPSMOVWreg = 961;
        public static readonly var OpMIPSMOVWnop = 962;
        public static readonly var OpMIPSCMOVZ = 963;
        public static readonly var OpMIPSCMOVZzero = 964;
        public static readonly var OpMIPSMOVWF = 965;
        public static readonly var OpMIPSMOVWD = 966;
        public static readonly var OpMIPSTRUNCFW = 967;
        public static readonly var OpMIPSTRUNCDW = 968;
        public static readonly var OpMIPSMOVFD = 969;
        public static readonly var OpMIPSMOVDF = 970;
        public static readonly var OpMIPSCALLstatic = 971;
        public static readonly var OpMIPSCALLclosure = 972;
        public static readonly var OpMIPSCALLinter = 973;
        public static readonly var OpMIPSLoweredAtomicLoad = 974;
        public static readonly var OpMIPSLoweredAtomicStore = 975;
        public static readonly var OpMIPSLoweredAtomicStorezero = 976;
        public static readonly var OpMIPSLoweredAtomicExchange = 977;
        public static readonly var OpMIPSLoweredAtomicAdd = 978;
        public static readonly var OpMIPSLoweredAtomicAddconst = 979;
        public static readonly var OpMIPSLoweredAtomicCas = 980;
        public static readonly var OpMIPSLoweredAtomicAnd = 981;
        public static readonly var OpMIPSLoweredAtomicOr = 982;
        public static readonly var OpMIPSLoweredZero = 983;
        public static readonly var OpMIPSLoweredMove = 984;
        public static readonly var OpMIPSLoweredNilCheck = 985;
        public static readonly var OpMIPSFPFlagTrue = 986;
        public static readonly var OpMIPSFPFlagFalse = 987;
        public static readonly var OpMIPSLoweredGetClosurePtr = 988;
        public static readonly var OpMIPSLoweredGetCallerSP = 989;
        public static readonly var OpMIPSMOVWconvert = 990;

        public static readonly var OpMIPS64ADDV = 991;
        public static readonly var OpMIPS64ADDVconst = 992;
        public static readonly var OpMIPS64SUBV = 993;
        public static readonly var OpMIPS64SUBVconst = 994;
        public static readonly var OpMIPS64MULV = 995;
        public static readonly var OpMIPS64MULVU = 996;
        public static readonly var OpMIPS64DIVV = 997;
        public static readonly var OpMIPS64DIVVU = 998;
        public static readonly var OpMIPS64ADDF = 999;
        public static readonly var OpMIPS64ADDD = 1000;
        public static readonly var OpMIPS64SUBF = 1001;
        public static readonly var OpMIPS64SUBD = 1002;
        public static readonly var OpMIPS64MULF = 1003;
        public static readonly var OpMIPS64MULD = 1004;
        public static readonly var OpMIPS64DIVF = 1005;
        public static readonly var OpMIPS64DIVD = 1006;
        public static readonly var OpMIPS64AND = 1007;
        public static readonly var OpMIPS64ANDconst = 1008;
        public static readonly var OpMIPS64OR = 1009;
        public static readonly var OpMIPS64ORconst = 1010;
        public static readonly var OpMIPS64XOR = 1011;
        public static readonly var OpMIPS64XORconst = 1012;
        public static readonly var OpMIPS64NOR = 1013;
        public static readonly var OpMIPS64NORconst = 1014;
        public static readonly var OpMIPS64NEGV = 1015;
        public static readonly var OpMIPS64NEGF = 1016;
        public static readonly var OpMIPS64NEGD = 1017;
        public static readonly var OpMIPS64SLLV = 1018;
        public static readonly var OpMIPS64SLLVconst = 1019;
        public static readonly var OpMIPS64SRLV = 1020;
        public static readonly var OpMIPS64SRLVconst = 1021;
        public static readonly var OpMIPS64SRAV = 1022;
        public static readonly var OpMIPS64SRAVconst = 1023;
        public static readonly var OpMIPS64SGT = 1024;
        public static readonly var OpMIPS64SGTconst = 1025;
        public static readonly var OpMIPS64SGTU = 1026;
        public static readonly var OpMIPS64SGTUconst = 1027;
        public static readonly var OpMIPS64CMPEQF = 1028;
        public static readonly var OpMIPS64CMPEQD = 1029;
        public static readonly var OpMIPS64CMPGEF = 1030;
        public static readonly var OpMIPS64CMPGED = 1031;
        public static readonly var OpMIPS64CMPGTF = 1032;
        public static readonly var OpMIPS64CMPGTD = 1033;
        public static readonly var OpMIPS64MOVVconst = 1034;
        public static readonly var OpMIPS64MOVFconst = 1035;
        public static readonly var OpMIPS64MOVDconst = 1036;
        public static readonly var OpMIPS64MOVVaddr = 1037;
        public static readonly var OpMIPS64MOVBload = 1038;
        public static readonly var OpMIPS64MOVBUload = 1039;
        public static readonly var OpMIPS64MOVHload = 1040;
        public static readonly var OpMIPS64MOVHUload = 1041;
        public static readonly var OpMIPS64MOVWload = 1042;
        public static readonly var OpMIPS64MOVWUload = 1043;
        public static readonly var OpMIPS64MOVVload = 1044;
        public static readonly var OpMIPS64MOVFload = 1045;
        public static readonly var OpMIPS64MOVDload = 1046;
        public static readonly var OpMIPS64MOVBstore = 1047;
        public static readonly var OpMIPS64MOVHstore = 1048;
        public static readonly var OpMIPS64MOVWstore = 1049;
        public static readonly var OpMIPS64MOVVstore = 1050;
        public static readonly var OpMIPS64MOVFstore = 1051;
        public static readonly var OpMIPS64MOVDstore = 1052;
        public static readonly var OpMIPS64MOVBstorezero = 1053;
        public static readonly var OpMIPS64MOVHstorezero = 1054;
        public static readonly var OpMIPS64MOVWstorezero = 1055;
        public static readonly var OpMIPS64MOVVstorezero = 1056;
        public static readonly var OpMIPS64MOVBreg = 1057;
        public static readonly var OpMIPS64MOVBUreg = 1058;
        public static readonly var OpMIPS64MOVHreg = 1059;
        public static readonly var OpMIPS64MOVHUreg = 1060;
        public static readonly var OpMIPS64MOVWreg = 1061;
        public static readonly var OpMIPS64MOVWUreg = 1062;
        public static readonly var OpMIPS64MOVVreg = 1063;
        public static readonly var OpMIPS64MOVVnop = 1064;
        public static readonly var OpMIPS64MOVWF = 1065;
        public static readonly var OpMIPS64MOVWD = 1066;
        public static readonly var OpMIPS64MOVVF = 1067;
        public static readonly var OpMIPS64MOVVD = 1068;
        public static readonly var OpMIPS64TRUNCFW = 1069;
        public static readonly var OpMIPS64TRUNCDW = 1070;
        public static readonly var OpMIPS64TRUNCFV = 1071;
        public static readonly var OpMIPS64TRUNCDV = 1072;
        public static readonly var OpMIPS64MOVFD = 1073;
        public static readonly var OpMIPS64MOVDF = 1074;
        public static readonly var OpMIPS64CALLstatic = 1075;
        public static readonly var OpMIPS64CALLclosure = 1076;
        public static readonly var OpMIPS64CALLinter = 1077;
        public static readonly var OpMIPS64DUFFZERO = 1078;
        public static readonly var OpMIPS64LoweredZero = 1079;
        public static readonly var OpMIPS64LoweredMove = 1080;
        public static readonly var OpMIPS64LoweredAtomicLoad32 = 1081;
        public static readonly var OpMIPS64LoweredAtomicLoad64 = 1082;
        public static readonly var OpMIPS64LoweredAtomicStore32 = 1083;
        public static readonly var OpMIPS64LoweredAtomicStore64 = 1084;
        public static readonly var OpMIPS64LoweredAtomicStorezero32 = 1085;
        public static readonly var OpMIPS64LoweredAtomicStorezero64 = 1086;
        public static readonly var OpMIPS64LoweredAtomicExchange32 = 1087;
        public static readonly var OpMIPS64LoweredAtomicExchange64 = 1088;
        public static readonly var OpMIPS64LoweredAtomicAdd32 = 1089;
        public static readonly var OpMIPS64LoweredAtomicAdd64 = 1090;
        public static readonly var OpMIPS64LoweredAtomicAddconst32 = 1091;
        public static readonly var OpMIPS64LoweredAtomicAddconst64 = 1092;
        public static readonly var OpMIPS64LoweredAtomicCas32 = 1093;
        public static readonly var OpMIPS64LoweredAtomicCas64 = 1094;
        public static readonly var OpMIPS64LoweredNilCheck = 1095;
        public static readonly var OpMIPS64FPFlagTrue = 1096;
        public static readonly var OpMIPS64FPFlagFalse = 1097;
        public static readonly var OpMIPS64LoweredGetClosurePtr = 1098;
        public static readonly var OpMIPS64LoweredGetCallerSP = 1099;
        public static readonly var OpMIPS64MOVVconvert = 1100;

        public static readonly var OpPPC64ADD = 1101;
        public static readonly var OpPPC64ADDconst = 1102;
        public static readonly var OpPPC64FADD = 1103;
        public static readonly var OpPPC64FADDS = 1104;
        public static readonly var OpPPC64SUB = 1105;
        public static readonly var OpPPC64FSUB = 1106;
        public static readonly var OpPPC64FSUBS = 1107;
        public static readonly var OpPPC64MULLD = 1108;
        public static readonly var OpPPC64MULLW = 1109;
        public static readonly var OpPPC64MULHD = 1110;
        public static readonly var OpPPC64MULHW = 1111;
        public static readonly var OpPPC64MULHDU = 1112;
        public static readonly var OpPPC64MULHWU = 1113;
        public static readonly var OpPPC64FMUL = 1114;
        public static readonly var OpPPC64FMULS = 1115;
        public static readonly var OpPPC64FMADD = 1116;
        public static readonly var OpPPC64FMADDS = 1117;
        public static readonly var OpPPC64FMSUB = 1118;
        public static readonly var OpPPC64FMSUBS = 1119;
        public static readonly var OpPPC64SRAD = 1120;
        public static readonly var OpPPC64SRAW = 1121;
        public static readonly var OpPPC64SRD = 1122;
        public static readonly var OpPPC64SRW = 1123;
        public static readonly var OpPPC64SLD = 1124;
        public static readonly var OpPPC64SLW = 1125;
        public static readonly var OpPPC64ROTL = 1126;
        public static readonly var OpPPC64ROTLW = 1127;
        public static readonly var OpPPC64ADDconstForCarry = 1128;
        public static readonly var OpPPC64MaskIfNotCarry = 1129;
        public static readonly var OpPPC64SRADconst = 1130;
        public static readonly var OpPPC64SRAWconst = 1131;
        public static readonly var OpPPC64SRDconst = 1132;
        public static readonly var OpPPC64SRWconst = 1133;
        public static readonly var OpPPC64SLDconst = 1134;
        public static readonly var OpPPC64SLWconst = 1135;
        public static readonly var OpPPC64ROTLconst = 1136;
        public static readonly var OpPPC64ROTLWconst = 1137;
        public static readonly var OpPPC64CNTLZD = 1138;
        public static readonly var OpPPC64CNTLZW = 1139;
        public static readonly var OpPPC64POPCNTD = 1140;
        public static readonly var OpPPC64POPCNTW = 1141;
        public static readonly var OpPPC64POPCNTB = 1142;
        public static readonly var OpPPC64FDIV = 1143;
        public static readonly var OpPPC64FDIVS = 1144;
        public static readonly var OpPPC64DIVD = 1145;
        public static readonly var OpPPC64DIVW = 1146;
        public static readonly var OpPPC64DIVDU = 1147;
        public static readonly var OpPPC64DIVWU = 1148;
        public static readonly var OpPPC64FCTIDZ = 1149;
        public static readonly var OpPPC64FCTIWZ = 1150;
        public static readonly var OpPPC64FCFID = 1151;
        public static readonly var OpPPC64FCFIDS = 1152;
        public static readonly var OpPPC64FRSP = 1153;
        public static readonly var OpPPC64MFVSRD = 1154;
        public static readonly var OpPPC64MTVSRD = 1155;
        public static readonly var OpPPC64AND = 1156;
        public static readonly var OpPPC64ANDN = 1157;
        public static readonly var OpPPC64OR = 1158;
        public static readonly var OpPPC64ORN = 1159;
        public static readonly var OpPPC64NOR = 1160;
        public static readonly var OpPPC64XOR = 1161;
        public static readonly var OpPPC64EQV = 1162;
        public static readonly var OpPPC64NEG = 1163;
        public static readonly var OpPPC64FNEG = 1164;
        public static readonly var OpPPC64FSQRT = 1165;
        public static readonly var OpPPC64FSQRTS = 1166;
        public static readonly var OpPPC64FFLOOR = 1167;
        public static readonly var OpPPC64FCEIL = 1168;
        public static readonly var OpPPC64FTRUNC = 1169;
        public static readonly var OpPPC64FABS = 1170;
        public static readonly var OpPPC64FNABS = 1171;
        public static readonly var OpPPC64FCPSGN = 1172;
        public static readonly var OpPPC64ORconst = 1173;
        public static readonly var OpPPC64XORconst = 1174;
        public static readonly var OpPPC64ANDconst = 1175;
        public static readonly var OpPPC64ANDCCconst = 1176;
        public static readonly var OpPPC64MOVBreg = 1177;
        public static readonly var OpPPC64MOVBZreg = 1178;
        public static readonly var OpPPC64MOVHreg = 1179;
        public static readonly var OpPPC64MOVHZreg = 1180;
        public static readonly var OpPPC64MOVWreg = 1181;
        public static readonly var OpPPC64MOVWZreg = 1182;
        public static readonly var OpPPC64MOVBZload = 1183;
        public static readonly var OpPPC64MOVHload = 1184;
        public static readonly var OpPPC64MOVHZload = 1185;
        public static readonly var OpPPC64MOVWload = 1186;
        public static readonly var OpPPC64MOVWZload = 1187;
        public static readonly var OpPPC64MOVDload = 1188;
        public static readonly var OpPPC64FMOVDload = 1189;
        public static readonly var OpPPC64FMOVSload = 1190;
        public static readonly var OpPPC64MOVBstore = 1191;
        public static readonly var OpPPC64MOVHstore = 1192;
        public static readonly var OpPPC64MOVWstore = 1193;
        public static readonly var OpPPC64MOVDstore = 1194;
        public static readonly var OpPPC64FMOVDstore = 1195;
        public static readonly var OpPPC64FMOVSstore = 1196;
        public static readonly var OpPPC64MOVBstorezero = 1197;
        public static readonly var OpPPC64MOVHstorezero = 1198;
        public static readonly var OpPPC64MOVWstorezero = 1199;
        public static readonly var OpPPC64MOVDstorezero = 1200;
        public static readonly var OpPPC64MOVDaddr = 1201;
        public static readonly var OpPPC64MOVDconst = 1202;
        public static readonly var OpPPC64FMOVDconst = 1203;
        public static readonly var OpPPC64FMOVSconst = 1204;
        public static readonly var OpPPC64FCMPU = 1205;
        public static readonly var OpPPC64CMP = 1206;
        public static readonly var OpPPC64CMPU = 1207;
        public static readonly var OpPPC64CMPW = 1208;
        public static readonly var OpPPC64CMPWU = 1209;
        public static readonly var OpPPC64CMPconst = 1210;
        public static readonly var OpPPC64CMPUconst = 1211;
        public static readonly var OpPPC64CMPWconst = 1212;
        public static readonly var OpPPC64CMPWUconst = 1213;
        public static readonly var OpPPC64Equal = 1214;
        public static readonly var OpPPC64NotEqual = 1215;
        public static readonly var OpPPC64LessThan = 1216;
        public static readonly var OpPPC64FLessThan = 1217;
        public static readonly var OpPPC64LessEqual = 1218;
        public static readonly var OpPPC64FLessEqual = 1219;
        public static readonly var OpPPC64GreaterThan = 1220;
        public static readonly var OpPPC64FGreaterThan = 1221;
        public static readonly var OpPPC64GreaterEqual = 1222;
        public static readonly var OpPPC64FGreaterEqual = 1223;
        public static readonly var OpPPC64LoweredGetClosurePtr = 1224;
        public static readonly var OpPPC64LoweredGetCallerSP = 1225;
        public static readonly var OpPPC64LoweredNilCheck = 1226;
        public static readonly var OpPPC64LoweredRound32F = 1227;
        public static readonly var OpPPC64LoweredRound64F = 1228;
        public static readonly var OpPPC64MOVDconvert = 1229;
        public static readonly var OpPPC64CALLstatic = 1230;
        public static readonly var OpPPC64CALLclosure = 1231;
        public static readonly var OpPPC64CALLinter = 1232;
        public static readonly var OpPPC64LoweredZero = 1233;
        public static readonly var OpPPC64LoweredMove = 1234;
        public static readonly var OpPPC64LoweredAtomicStore32 = 1235;
        public static readonly var OpPPC64LoweredAtomicStore64 = 1236;
        public static readonly var OpPPC64LoweredAtomicLoad32 = 1237;
        public static readonly var OpPPC64LoweredAtomicLoad64 = 1238;
        public static readonly var OpPPC64LoweredAtomicLoadPtr = 1239;
        public static readonly var OpPPC64LoweredAtomicAdd32 = 1240;
        public static readonly var OpPPC64LoweredAtomicAdd64 = 1241;
        public static readonly var OpPPC64LoweredAtomicExchange32 = 1242;
        public static readonly var OpPPC64LoweredAtomicExchange64 = 1243;
        public static readonly var OpPPC64LoweredAtomicCas64 = 1244;
        public static readonly var OpPPC64LoweredAtomicCas32 = 1245;
        public static readonly var OpPPC64LoweredAtomicAnd8 = 1246;
        public static readonly var OpPPC64LoweredAtomicOr8 = 1247;
        public static readonly var OpPPC64InvertFlags = 1248;
        public static readonly var OpPPC64FlagEQ = 1249;
        public static readonly var OpPPC64FlagLT = 1250;
        public static readonly var OpPPC64FlagGT = 1251;

        public static readonly var OpS390XFADDS = 1252;
        public static readonly var OpS390XFADD = 1253;
        public static readonly var OpS390XFSUBS = 1254;
        public static readonly var OpS390XFSUB = 1255;
        public static readonly var OpS390XFMULS = 1256;
        public static readonly var OpS390XFMUL = 1257;
        public static readonly var OpS390XFDIVS = 1258;
        public static readonly var OpS390XFDIV = 1259;
        public static readonly var OpS390XFNEGS = 1260;
        public static readonly var OpS390XFNEG = 1261;
        public static readonly var OpS390XFMADDS = 1262;
        public static readonly var OpS390XFMADD = 1263;
        public static readonly var OpS390XFMSUBS = 1264;
        public static readonly var OpS390XFMSUB = 1265;
        public static readonly var OpS390XLPDFR = 1266;
        public static readonly var OpS390XLNDFR = 1267;
        public static readonly var OpS390XCPSDR = 1268;
        public static readonly var OpS390XFIDBR = 1269;
        public static readonly var OpS390XFMOVSload = 1270;
        public static readonly var OpS390XFMOVDload = 1271;
        public static readonly var OpS390XFMOVSconst = 1272;
        public static readonly var OpS390XFMOVDconst = 1273;
        public static readonly var OpS390XFMOVSloadidx = 1274;
        public static readonly var OpS390XFMOVDloadidx = 1275;
        public static readonly var OpS390XFMOVSstore = 1276;
        public static readonly var OpS390XFMOVDstore = 1277;
        public static readonly var OpS390XFMOVSstoreidx = 1278;
        public static readonly var OpS390XFMOVDstoreidx = 1279;
        public static readonly var OpS390XADD = 1280;
        public static readonly var OpS390XADDW = 1281;
        public static readonly var OpS390XADDconst = 1282;
        public static readonly var OpS390XADDWconst = 1283;
        public static readonly var OpS390XADDload = 1284;
        public static readonly var OpS390XADDWload = 1285;
        public static readonly var OpS390XSUB = 1286;
        public static readonly var OpS390XSUBW = 1287;
        public static readonly var OpS390XSUBconst = 1288;
        public static readonly var OpS390XSUBWconst = 1289;
        public static readonly var OpS390XSUBload = 1290;
        public static readonly var OpS390XSUBWload = 1291;
        public static readonly var OpS390XMULLD = 1292;
        public static readonly var OpS390XMULLW = 1293;
        public static readonly var OpS390XMULLDconst = 1294;
        public static readonly var OpS390XMULLWconst = 1295;
        public static readonly var OpS390XMULLDload = 1296;
        public static readonly var OpS390XMULLWload = 1297;
        public static readonly var OpS390XMULHD = 1298;
        public static readonly var OpS390XMULHDU = 1299;
        public static readonly var OpS390XDIVD = 1300;
        public static readonly var OpS390XDIVW = 1301;
        public static readonly var OpS390XDIVDU = 1302;
        public static readonly var OpS390XDIVWU = 1303;
        public static readonly var OpS390XMODD = 1304;
        public static readonly var OpS390XMODW = 1305;
        public static readonly var OpS390XMODDU = 1306;
        public static readonly var OpS390XMODWU = 1307;
        public static readonly var OpS390XAND = 1308;
        public static readonly var OpS390XANDW = 1309;
        public static readonly var OpS390XANDconst = 1310;
        public static readonly var OpS390XANDWconst = 1311;
        public static readonly var OpS390XANDload = 1312;
        public static readonly var OpS390XANDWload = 1313;
        public static readonly var OpS390XOR = 1314;
        public static readonly var OpS390XORW = 1315;
        public static readonly var OpS390XORconst = 1316;
        public static readonly var OpS390XORWconst = 1317;
        public static readonly var OpS390XORload = 1318;
        public static readonly var OpS390XORWload = 1319;
        public static readonly var OpS390XXOR = 1320;
        public static readonly var OpS390XXORW = 1321;
        public static readonly var OpS390XXORconst = 1322;
        public static readonly var OpS390XXORWconst = 1323;
        public static readonly var OpS390XXORload = 1324;
        public static readonly var OpS390XXORWload = 1325;
        public static readonly var OpS390XCMP = 1326;
        public static readonly var OpS390XCMPW = 1327;
        public static readonly var OpS390XCMPU = 1328;
        public static readonly var OpS390XCMPWU = 1329;
        public static readonly var OpS390XCMPconst = 1330;
        public static readonly var OpS390XCMPWconst = 1331;
        public static readonly var OpS390XCMPUconst = 1332;
        public static readonly var OpS390XCMPWUconst = 1333;
        public static readonly var OpS390XFCMPS = 1334;
        public static readonly var OpS390XFCMP = 1335;
        public static readonly var OpS390XSLD = 1336;
        public static readonly var OpS390XSLW = 1337;
        public static readonly var OpS390XSLDconst = 1338;
        public static readonly var OpS390XSLWconst = 1339;
        public static readonly var OpS390XSRD = 1340;
        public static readonly var OpS390XSRW = 1341;
        public static readonly var OpS390XSRDconst = 1342;
        public static readonly var OpS390XSRWconst = 1343;
        public static readonly var OpS390XSRAD = 1344;
        public static readonly var OpS390XSRAW = 1345;
        public static readonly var OpS390XSRADconst = 1346;
        public static readonly var OpS390XSRAWconst = 1347;
        public static readonly var OpS390XRLLGconst = 1348;
        public static readonly var OpS390XRLLconst = 1349;
        public static readonly var OpS390XNEG = 1350;
        public static readonly var OpS390XNEGW = 1351;
        public static readonly var OpS390XNOT = 1352;
        public static readonly var OpS390XNOTW = 1353;
        public static readonly var OpS390XFSQRT = 1354;
        public static readonly var OpS390XSUBEcarrymask = 1355;
        public static readonly var OpS390XSUBEWcarrymask = 1356;
        public static readonly var OpS390XMOVDEQ = 1357;
        public static readonly var OpS390XMOVDNE = 1358;
        public static readonly var OpS390XMOVDLT = 1359;
        public static readonly var OpS390XMOVDLE = 1360;
        public static readonly var OpS390XMOVDGT = 1361;
        public static readonly var OpS390XMOVDGE = 1362;
        public static readonly var OpS390XMOVDGTnoinv = 1363;
        public static readonly var OpS390XMOVDGEnoinv = 1364;
        public static readonly var OpS390XMOVBreg = 1365;
        public static readonly var OpS390XMOVBZreg = 1366;
        public static readonly var OpS390XMOVHreg = 1367;
        public static readonly var OpS390XMOVHZreg = 1368;
        public static readonly var OpS390XMOVWreg = 1369;
        public static readonly var OpS390XMOVWZreg = 1370;
        public static readonly var OpS390XMOVDreg = 1371;
        public static readonly var OpS390XMOVDnop = 1372;
        public static readonly var OpS390XMOVDconst = 1373;
        public static readonly var OpS390XLDGR = 1374;
        public static readonly var OpS390XLGDR = 1375;
        public static readonly var OpS390XCFDBRA = 1376;
        public static readonly var OpS390XCGDBRA = 1377;
        public static readonly var OpS390XCFEBRA = 1378;
        public static readonly var OpS390XCGEBRA = 1379;
        public static readonly var OpS390XCEFBRA = 1380;
        public static readonly var OpS390XCDFBRA = 1381;
        public static readonly var OpS390XCEGBRA = 1382;
        public static readonly var OpS390XCDGBRA = 1383;
        public static readonly var OpS390XLEDBR = 1384;
        public static readonly var OpS390XLDEBR = 1385;
        public static readonly var OpS390XMOVDaddr = 1386;
        public static readonly var OpS390XMOVDaddridx = 1387;
        public static readonly var OpS390XMOVBZload = 1388;
        public static readonly var OpS390XMOVBload = 1389;
        public static readonly var OpS390XMOVHZload = 1390;
        public static readonly var OpS390XMOVHload = 1391;
        public static readonly var OpS390XMOVWZload = 1392;
        public static readonly var OpS390XMOVWload = 1393;
        public static readonly var OpS390XMOVDload = 1394;
        public static readonly var OpS390XMOVWBR = 1395;
        public static readonly var OpS390XMOVDBR = 1396;
        public static readonly var OpS390XMOVHBRload = 1397;
        public static readonly var OpS390XMOVWBRload = 1398;
        public static readonly var OpS390XMOVDBRload = 1399;
        public static readonly var OpS390XMOVBstore = 1400;
        public static readonly var OpS390XMOVHstore = 1401;
        public static readonly var OpS390XMOVWstore = 1402;
        public static readonly var OpS390XMOVDstore = 1403;
        public static readonly var OpS390XMOVHBRstore = 1404;
        public static readonly var OpS390XMOVWBRstore = 1405;
        public static readonly var OpS390XMOVDBRstore = 1406;
        public static readonly var OpS390XMVC = 1407;
        public static readonly var OpS390XMOVBZloadidx = 1408;
        public static readonly var OpS390XMOVBloadidx = 1409;
        public static readonly var OpS390XMOVHZloadidx = 1410;
        public static readonly var OpS390XMOVHloadidx = 1411;
        public static readonly var OpS390XMOVWZloadidx = 1412;
        public static readonly var OpS390XMOVWloadidx = 1413;
        public static readonly var OpS390XMOVDloadidx = 1414;
        public static readonly var OpS390XMOVHBRloadidx = 1415;
        public static readonly var OpS390XMOVWBRloadidx = 1416;
        public static readonly var OpS390XMOVDBRloadidx = 1417;
        public static readonly var OpS390XMOVBstoreidx = 1418;
        public static readonly var OpS390XMOVHstoreidx = 1419;
        public static readonly var OpS390XMOVWstoreidx = 1420;
        public static readonly var OpS390XMOVDstoreidx = 1421;
        public static readonly var OpS390XMOVHBRstoreidx = 1422;
        public static readonly var OpS390XMOVWBRstoreidx = 1423;
        public static readonly var OpS390XMOVDBRstoreidx = 1424;
        public static readonly var OpS390XMOVBstoreconst = 1425;
        public static readonly var OpS390XMOVHstoreconst = 1426;
        public static readonly var OpS390XMOVWstoreconst = 1427;
        public static readonly var OpS390XMOVDstoreconst = 1428;
        public static readonly var OpS390XCLEAR = 1429;
        public static readonly var OpS390XCALLstatic = 1430;
        public static readonly var OpS390XCALLclosure = 1431;
        public static readonly var OpS390XCALLinter = 1432;
        public static readonly var OpS390XInvertFlags = 1433;
        public static readonly var OpS390XLoweredGetG = 1434;
        public static readonly var OpS390XLoweredGetClosurePtr = 1435;
        public static readonly var OpS390XLoweredGetCallerSP = 1436;
        public static readonly var OpS390XLoweredNilCheck = 1437;
        public static readonly var OpS390XLoweredRound32F = 1438;
        public static readonly var OpS390XLoweredRound64F = 1439;
        public static readonly var OpS390XMOVDconvert = 1440;
        public static readonly var OpS390XFlagEQ = 1441;
        public static readonly var OpS390XFlagLT = 1442;
        public static readonly var OpS390XFlagGT = 1443;
        public static readonly var OpS390XMOVWZatomicload = 1444;
        public static readonly var OpS390XMOVDatomicload = 1445;
        public static readonly var OpS390XMOVWatomicstore = 1446;
        public static readonly var OpS390XMOVDatomicstore = 1447;
        public static readonly var OpS390XLAA = 1448;
        public static readonly var OpS390XLAAG = 1449;
        public static readonly var OpS390XAddTupleFirst32 = 1450;
        public static readonly var OpS390XAddTupleFirst64 = 1451;
        public static readonly var OpS390XLoweredAtomicCas32 = 1452;
        public static readonly var OpS390XLoweredAtomicCas64 = 1453;
        public static readonly var OpS390XLoweredAtomicExchange32 = 1454;
        public static readonly var OpS390XLoweredAtomicExchange64 = 1455;
        public static readonly var OpS390XFLOGR = 1456;
        public static readonly var OpS390XSTMG2 = 1457;
        public static readonly var OpS390XSTMG3 = 1458;
        public static readonly var OpS390XSTMG4 = 1459;
        public static readonly var OpS390XSTM2 = 1460;
        public static readonly var OpS390XSTM3 = 1461;
        public static readonly var OpS390XSTM4 = 1462;
        public static readonly var OpS390XLoweredMove = 1463;
        public static readonly var OpS390XLoweredZero = 1464;

        public static readonly var OpAdd8 = 1465;
        public static readonly var OpAdd16 = 1466;
        public static readonly var OpAdd32 = 1467;
        public static readonly var OpAdd64 = 1468;
        public static readonly var OpAddPtr = 1469;
        public static readonly var OpAdd32F = 1470;
        public static readonly var OpAdd64F = 1471;
        public static readonly var OpSub8 = 1472;
        public static readonly var OpSub16 = 1473;
        public static readonly var OpSub32 = 1474;
        public static readonly var OpSub64 = 1475;
        public static readonly var OpSubPtr = 1476;
        public static readonly var OpSub32F = 1477;
        public static readonly var OpSub64F = 1478;
        public static readonly var OpMul8 = 1479;
        public static readonly var OpMul16 = 1480;
        public static readonly var OpMul32 = 1481;
        public static readonly var OpMul64 = 1482;
        public static readonly var OpMul32F = 1483;
        public static readonly var OpMul64F = 1484;
        public static readonly var OpDiv32F = 1485;
        public static readonly var OpDiv64F = 1486;
        public static readonly var OpHmul32 = 1487;
        public static readonly var OpHmul32u = 1488;
        public static readonly var OpHmul64 = 1489;
        public static readonly var OpHmul64u = 1490;
        public static readonly var OpMul32uhilo = 1491;
        public static readonly var OpMul64uhilo = 1492;
        public static readonly var OpAvg32u = 1493;
        public static readonly var OpAvg64u = 1494;
        public static readonly var OpDiv8 = 1495;
        public static readonly var OpDiv8u = 1496;
        public static readonly var OpDiv16 = 1497;
        public static readonly var OpDiv16u = 1498;
        public static readonly var OpDiv32 = 1499;
        public static readonly var OpDiv32u = 1500;
        public static readonly var OpDiv64 = 1501;
        public static readonly var OpDiv64u = 1502;
        public static readonly var OpDiv128u = 1503;
        public static readonly var OpMod8 = 1504;
        public static readonly var OpMod8u = 1505;
        public static readonly var OpMod16 = 1506;
        public static readonly var OpMod16u = 1507;
        public static readonly var OpMod32 = 1508;
        public static readonly var OpMod32u = 1509;
        public static readonly var OpMod64 = 1510;
        public static readonly var OpMod64u = 1511;
        public static readonly var OpAnd8 = 1512;
        public static readonly var OpAnd16 = 1513;
        public static readonly var OpAnd32 = 1514;
        public static readonly var OpAnd64 = 1515;
        public static readonly var OpOr8 = 1516;
        public static readonly var OpOr16 = 1517;
        public static readonly var OpOr32 = 1518;
        public static readonly var OpOr64 = 1519;
        public static readonly var OpXor8 = 1520;
        public static readonly var OpXor16 = 1521;
        public static readonly var OpXor32 = 1522;
        public static readonly var OpXor64 = 1523;
        public static readonly var OpLsh8x8 = 1524;
        public static readonly var OpLsh8x16 = 1525;
        public static readonly var OpLsh8x32 = 1526;
        public static readonly var OpLsh8x64 = 1527;
        public static readonly var OpLsh16x8 = 1528;
        public static readonly var OpLsh16x16 = 1529;
        public static readonly var OpLsh16x32 = 1530;
        public static readonly var OpLsh16x64 = 1531;
        public static readonly var OpLsh32x8 = 1532;
        public static readonly var OpLsh32x16 = 1533;
        public static readonly var OpLsh32x32 = 1534;
        public static readonly var OpLsh32x64 = 1535;
        public static readonly var OpLsh64x8 = 1536;
        public static readonly var OpLsh64x16 = 1537;
        public static readonly var OpLsh64x32 = 1538;
        public static readonly var OpLsh64x64 = 1539;
        public static readonly var OpRsh8x8 = 1540;
        public static readonly var OpRsh8x16 = 1541;
        public static readonly var OpRsh8x32 = 1542;
        public static readonly var OpRsh8x64 = 1543;
        public static readonly var OpRsh16x8 = 1544;
        public static readonly var OpRsh16x16 = 1545;
        public static readonly var OpRsh16x32 = 1546;
        public static readonly var OpRsh16x64 = 1547;
        public static readonly var OpRsh32x8 = 1548;
        public static readonly var OpRsh32x16 = 1549;
        public static readonly var OpRsh32x32 = 1550;
        public static readonly var OpRsh32x64 = 1551;
        public static readonly var OpRsh64x8 = 1552;
        public static readonly var OpRsh64x16 = 1553;
        public static readonly var OpRsh64x32 = 1554;
        public static readonly var OpRsh64x64 = 1555;
        public static readonly var OpRsh8Ux8 = 1556;
        public static readonly var OpRsh8Ux16 = 1557;
        public static readonly var OpRsh8Ux32 = 1558;
        public static readonly var OpRsh8Ux64 = 1559;
        public static readonly var OpRsh16Ux8 = 1560;
        public static readonly var OpRsh16Ux16 = 1561;
        public static readonly var OpRsh16Ux32 = 1562;
        public static readonly var OpRsh16Ux64 = 1563;
        public static readonly var OpRsh32Ux8 = 1564;
        public static readonly var OpRsh32Ux16 = 1565;
        public static readonly var OpRsh32Ux32 = 1566;
        public static readonly var OpRsh32Ux64 = 1567;
        public static readonly var OpRsh64Ux8 = 1568;
        public static readonly var OpRsh64Ux16 = 1569;
        public static readonly var OpRsh64Ux32 = 1570;
        public static readonly var OpRsh64Ux64 = 1571;
        public static readonly var OpEq8 = 1572;
        public static readonly var OpEq16 = 1573;
        public static readonly var OpEq32 = 1574;
        public static readonly var OpEq64 = 1575;
        public static readonly var OpEqPtr = 1576;
        public static readonly var OpEqInter = 1577;
        public static readonly var OpEqSlice = 1578;
        public static readonly var OpEq32F = 1579;
        public static readonly var OpEq64F = 1580;
        public static readonly var OpNeq8 = 1581;
        public static readonly var OpNeq16 = 1582;
        public static readonly var OpNeq32 = 1583;
        public static readonly var OpNeq64 = 1584;
        public static readonly var OpNeqPtr = 1585;
        public static readonly var OpNeqInter = 1586;
        public static readonly var OpNeqSlice = 1587;
        public static readonly var OpNeq32F = 1588;
        public static readonly var OpNeq64F = 1589;
        public static readonly var OpLess8 = 1590;
        public static readonly var OpLess8U = 1591;
        public static readonly var OpLess16 = 1592;
        public static readonly var OpLess16U = 1593;
        public static readonly var OpLess32 = 1594;
        public static readonly var OpLess32U = 1595;
        public static readonly var OpLess64 = 1596;
        public static readonly var OpLess64U = 1597;
        public static readonly var OpLess32F = 1598;
        public static readonly var OpLess64F = 1599;
        public static readonly var OpLeq8 = 1600;
        public static readonly var OpLeq8U = 1601;
        public static readonly var OpLeq16 = 1602;
        public static readonly var OpLeq16U = 1603;
        public static readonly var OpLeq32 = 1604;
        public static readonly var OpLeq32U = 1605;
        public static readonly var OpLeq64 = 1606;
        public static readonly var OpLeq64U = 1607;
        public static readonly var OpLeq32F = 1608;
        public static readonly var OpLeq64F = 1609;
        public static readonly var OpGreater8 = 1610;
        public static readonly var OpGreater8U = 1611;
        public static readonly var OpGreater16 = 1612;
        public static readonly var OpGreater16U = 1613;
        public static readonly var OpGreater32 = 1614;
        public static readonly var OpGreater32U = 1615;
        public static readonly var OpGreater64 = 1616;
        public static readonly var OpGreater64U = 1617;
        public static readonly var OpGreater32F = 1618;
        public static readonly var OpGreater64F = 1619;
        public static readonly var OpGeq8 = 1620;
        public static readonly var OpGeq8U = 1621;
        public static readonly var OpGeq16 = 1622;
        public static readonly var OpGeq16U = 1623;
        public static readonly var OpGeq32 = 1624;
        public static readonly var OpGeq32U = 1625;
        public static readonly var OpGeq64 = 1626;
        public static readonly var OpGeq64U = 1627;
        public static readonly var OpGeq32F = 1628;
        public static readonly var OpGeq64F = 1629;
        public static readonly var OpAndB = 1630;
        public static readonly var OpOrB = 1631;
        public static readonly var OpEqB = 1632;
        public static readonly var OpNeqB = 1633;
        public static readonly var OpNot = 1634;
        public static readonly var OpNeg8 = 1635;
        public static readonly var OpNeg16 = 1636;
        public static readonly var OpNeg32 = 1637;
        public static readonly var OpNeg64 = 1638;
        public static readonly var OpNeg32F = 1639;
        public static readonly var OpNeg64F = 1640;
        public static readonly var OpCom8 = 1641;
        public static readonly var OpCom16 = 1642;
        public static readonly var OpCom32 = 1643;
        public static readonly var OpCom64 = 1644;
        public static readonly var OpCtz32 = 1645;
        public static readonly var OpCtz64 = 1646;
        public static readonly var OpBitLen32 = 1647;
        public static readonly var OpBitLen64 = 1648;
        public static readonly var OpBswap32 = 1649;
        public static readonly var OpBswap64 = 1650;
        public static readonly var OpBitRev8 = 1651;
        public static readonly var OpBitRev16 = 1652;
        public static readonly var OpBitRev32 = 1653;
        public static readonly var OpBitRev64 = 1654;
        public static readonly var OpPopCount8 = 1655;
        public static readonly var OpPopCount16 = 1656;
        public static readonly var OpPopCount32 = 1657;
        public static readonly var OpPopCount64 = 1658;
        public static readonly var OpSqrt = 1659;
        public static readonly var OpFloor = 1660;
        public static readonly var OpCeil = 1661;
        public static readonly var OpTrunc = 1662;
        public static readonly var OpRound = 1663;
        public static readonly var OpRoundToEven = 1664;
        public static readonly var OpAbs = 1665;
        public static readonly var OpCopysign = 1666;
        public static readonly var OpPhi = 1667;
        public static readonly var OpCopy = 1668;
        public static readonly var OpConvert = 1669;
        public static readonly var OpConstBool = 1670;
        public static readonly var OpConstString = 1671;
        public static readonly var OpConstNil = 1672;
        public static readonly var OpConst8 = 1673;
        public static readonly var OpConst16 = 1674;
        public static readonly var OpConst32 = 1675;
        public static readonly var OpConst64 = 1676;
        public static readonly var OpConst32F = 1677;
        public static readonly var OpConst64F = 1678;
        public static readonly var OpConstInterface = 1679;
        public static readonly var OpConstSlice = 1680;
        public static readonly var OpInitMem = 1681;
        public static readonly var OpArg = 1682;
        public static readonly var OpAddr = 1683;
        public static readonly var OpSP = 1684;
        public static readonly var OpSB = 1685;
        public static readonly var OpLoad = 1686;
        public static readonly var OpStore = 1687;
        public static readonly var OpMove = 1688;
        public static readonly var OpZero = 1689;
        public static readonly var OpStoreWB = 1690;
        public static readonly var OpMoveWB = 1691;
        public static readonly var OpZeroWB = 1692;
        public static readonly var OpWB = 1693;
        public static readonly var OpClosureCall = 1694;
        public static readonly var OpStaticCall = 1695;
        public static readonly var OpInterCall = 1696;
        public static readonly var OpSignExt8to16 = 1697;
        public static readonly var OpSignExt8to32 = 1698;
        public static readonly var OpSignExt8to64 = 1699;
        public static readonly var OpSignExt16to32 = 1700;
        public static readonly var OpSignExt16to64 = 1701;
        public static readonly var OpSignExt32to64 = 1702;
        public static readonly var OpZeroExt8to16 = 1703;
        public static readonly var OpZeroExt8to32 = 1704;
        public static readonly var OpZeroExt8to64 = 1705;
        public static readonly var OpZeroExt16to32 = 1706;
        public static readonly var OpZeroExt16to64 = 1707;
        public static readonly var OpZeroExt32to64 = 1708;
        public static readonly var OpTrunc16to8 = 1709;
        public static readonly var OpTrunc32to8 = 1710;
        public static readonly var OpTrunc32to16 = 1711;
        public static readonly var OpTrunc64to8 = 1712;
        public static readonly var OpTrunc64to16 = 1713;
        public static readonly var OpTrunc64to32 = 1714;
        public static readonly var OpCvt32to32F = 1715;
        public static readonly var OpCvt32to64F = 1716;
        public static readonly var OpCvt64to32F = 1717;
        public static readonly var OpCvt64to64F = 1718;
        public static readonly var OpCvt32Fto32 = 1719;
        public static readonly var OpCvt32Fto64 = 1720;
        public static readonly var OpCvt64Fto32 = 1721;
        public static readonly var OpCvt64Fto64 = 1722;
        public static readonly var OpCvt32Fto64F = 1723;
        public static readonly var OpCvt64Fto32F = 1724;
        public static readonly var OpRound32F = 1725;
        public static readonly var OpRound64F = 1726;
        public static readonly var OpIsNonNil = 1727;
        public static readonly var OpIsInBounds = 1728;
        public static readonly var OpIsSliceInBounds = 1729;
        public static readonly var OpNilCheck = 1730;
        public static readonly var OpGetG = 1731;
        public static readonly var OpGetClosurePtr = 1732;
        public static readonly var OpGetCallerPC = 1733;
        public static readonly var OpGetCallerSP = 1734;
        public static readonly var OpPtrIndex = 1735;
        public static readonly var OpOffPtr = 1736;
        public static readonly var OpSliceMake = 1737;
        public static readonly var OpSlicePtr = 1738;
        public static readonly var OpSliceLen = 1739;
        public static readonly var OpSliceCap = 1740;
        public static readonly var OpComplexMake = 1741;
        public static readonly var OpComplexReal = 1742;
        public static readonly var OpComplexImag = 1743;
        public static readonly var OpStringMake = 1744;
        public static readonly var OpStringPtr = 1745;
        public static readonly var OpStringLen = 1746;
        public static readonly var OpIMake = 1747;
        public static readonly var OpITab = 1748;
        public static readonly var OpIData = 1749;
        public static readonly var OpStructMake0 = 1750;
        public static readonly var OpStructMake1 = 1751;
        public static readonly var OpStructMake2 = 1752;
        public static readonly var OpStructMake3 = 1753;
        public static readonly var OpStructMake4 = 1754;
        public static readonly var OpStructSelect = 1755;
        public static readonly var OpArrayMake0 = 1756;
        public static readonly var OpArrayMake1 = 1757;
        public static readonly var OpArraySelect = 1758;
        public static readonly var OpStoreReg = 1759;
        public static readonly var OpLoadReg = 1760;
        public static readonly var OpFwdRef = 1761;
        public static readonly var OpUnknown = 1762;
        public static readonly var OpVarDef = 1763;
        public static readonly var OpVarKill = 1764;
        public static readonly var OpVarLive = 1765;
        public static readonly var OpKeepAlive = 1766;
        public static readonly var OpRegKill = 1767;
        public static readonly var OpInt64Make = 1768;
        public static readonly var OpInt64Hi = 1769;
        public static readonly var OpInt64Lo = 1770;
        public static readonly var OpAdd32carry = 1771;
        public static readonly var OpAdd32withcarry = 1772;
        public static readonly var OpSub32carry = 1773;
        public static readonly var OpSub32withcarry = 1774;
        public static readonly var OpSignmask = 1775;
        public static readonly var OpZeromask = 1776;
        public static readonly var OpSlicemask = 1777;
        public static readonly var OpCvt32Uto32F = 1778;
        public static readonly var OpCvt32Uto64F = 1779;
        public static readonly var OpCvt32Fto32U = 1780;
        public static readonly var OpCvt64Fto32U = 1781;
        public static readonly var OpCvt64Uto32F = 1782;
        public static readonly var OpCvt64Uto64F = 1783;
        public static readonly var OpCvt32Fto64U = 1784;
        public static readonly var OpCvt64Fto64U = 1785;
        public static readonly var OpSelect0 = 1786;
        public static readonly var OpSelect1 = 1787;
        public static readonly var OpAtomicLoad32 = 1788;
        public static readonly var OpAtomicLoad64 = 1789;
        public static readonly var OpAtomicLoadPtr = 1790;
        public static readonly var OpAtomicStore32 = 1791;
        public static readonly var OpAtomicStore64 = 1792;
        public static readonly var OpAtomicStorePtrNoWB = 1793;
        public static readonly var OpAtomicExchange32 = 1794;
        public static readonly var OpAtomicExchange64 = 1795;
        public static readonly var OpAtomicAdd32 = 1796;
        public static readonly var OpAtomicAdd64 = 1797;
        public static readonly var OpAtomicCompareAndSwap32 = 1798;
        public static readonly var OpAtomicCompareAndSwap64 = 1799;
        public static readonly var OpAtomicAnd8 = 1800;
        public static readonly var OpAtomicOr8 = 1801;
        public static readonly var OpClobber = 1802;

        private static array<opInfo> opcodeTable = new array<opInfo>(new opInfo[] { {name:"OpInvalid"}, {name:"ADDSS",argLen:2,commutative:true,resultInArg0:true,usesScratch:true,asm:x86.AADDSS,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"ADDSD",argLen:2,commutative:true,resultInArg0:true,asm:x86.AADDSD,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"SUBSS",argLen:2,resultInArg0:true,usesScratch:true,asm:x86.ASUBSS,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"SUBSD",argLen:2,resultInArg0:true,asm:x86.ASUBSD,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"MULSS",argLen:2,commutative:true,resultInArg0:true,usesScratch:true,asm:x86.AMULSS,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"MULSD",argLen:2,commutative:true,resultInArg0:true,asm:x86.AMULSD,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"DIVSS",argLen:2,resultInArg0:true,usesScratch:true,asm:x86.ADIVSS,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"DIVSD",argLen:2,resultInArg0:true,asm:x86.ADIVSD,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSconst",auxType:auxFloat32,argLen:0,rematerializeable:true,asm:x86.AMOVSS,reg:regInfo{outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:x86.AMOVSD,reg:regInfo{outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSloadidx1",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSloadidx4",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSDloadidx1",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSDloadidx8",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,65280},{0,65791},},},}, {name:"MOVSDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,65280},{0,65791},},},}, {name:"MOVSSstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,255},{2,65280},{0,65791},},},}, {name:"MOVSSstoreidx4",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,255},{2,65280},{0,65791},},},}, {name:"MOVSDstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,255},{2,65280},{0,65791},},},}, {name:"MOVSDstoreidx8",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,255},{2,65280},{0,65791},},},}, {name:"ADDL",argLen:2,commutative:true,clobberFlags:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{1,239},{0,255},},outputs:[]outputInfo{{0,239},},},}, {name:"ADDLconst",auxType:auxInt32,argLen:1,clobberFlags:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,255},},outputs:[]outputInfo{{0,239},},},}, {name:"ADDLcarry",argLen:2,commutative:true,resultInArg0:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{1,0},{0,239},},},}, {name:"ADDLconstcarry",auxType:auxInt32,argLen:1,resultInArg0:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{1,0},{0,239},},},}, {name:"ADCL",argLen:3,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AADCL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ADCLconst",auxType:auxInt32,argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.AADCL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SUBL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SUBLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SUBLcarry",argLen:2,resultInArg0:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{1,0},{0,239},},},}, {name:"SUBLconstcarry",auxType:auxInt32,argLen:1,resultInArg0:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{1,0},{0,239},},},}, {name:"SBBL",argLen:3,resultInArg0:true,clobberFlags:true,asm:x86.ASBBL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SBBLconst",auxType:auxInt32,argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASBBL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MULL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MULLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"HMULL",argLen:2,commutative:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,255},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"HMULLU",argLen:2,commutative:true,clobberFlags:true,asm:x86.AMULL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,255},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"MULLQU",argLen:2,commutative:true,clobberFlags:true,asm:x86.AMULL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,255},},outputs:[]outputInfo{{0,4},{1,1},},},}, {name:"AVGLU",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"DIVL",argLen:2,clobberFlags:true,asm:x86.AIDIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:4,outputs:[]outputInfo{{0,1},},},}, {name:"DIVW",argLen:2,clobberFlags:true,asm:x86.AIDIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:4,outputs:[]outputInfo{{0,1},},},}, {name:"DIVLU",argLen:2,clobberFlags:true,asm:x86.ADIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:4,outputs:[]outputInfo{{0,1},},},}, {name:"DIVWU",argLen:2,clobberFlags:true,asm:x86.ADIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:4,outputs:[]outputInfo{{0,1},},},}, {name:"MODL",argLen:2,clobberFlags:true,asm:x86.AIDIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"MODW",argLen:2,clobberFlags:true,asm:x86.AIDIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"MODLU",argLen:2,clobberFlags:true,asm:x86.ADIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"MODWU",argLen:2,clobberFlags:true,asm:x86.ADIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,251},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"ANDL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AANDL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ANDLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AANDL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ORL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AORL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ORLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AORL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"XORL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AXORL,reg:regInfo{inputs:[]inputInfo{{0,239},{1,239},},outputs:[]outputInfo{{0,239},},},}, {name:"XORLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AXORL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"CMPL",argLen:2,asm:x86.ACMPL,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"CMPW",argLen:2,asm:x86.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"CMPB",argLen:2,asm:x86.ACMPB,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"CMPLconst",auxType:auxInt32,argLen:1,asm:x86.ACMPL,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"CMPWconst",auxType:auxInt16,argLen:1,asm:x86.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"CMPBconst",auxType:auxInt8,argLen:1,asm:x86.ACMPB,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"UCOMISS",argLen:2,usesScratch:true,asm:x86.AUCOMISS,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},},}, {name:"UCOMISD",argLen:2,usesScratch:true,asm:x86.AUCOMISD,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},},}, {name:"TESTL",argLen:2,commutative:true,asm:x86.ATESTL,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"TESTW",argLen:2,commutative:true,asm:x86.ATESTW,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"TESTB",argLen:2,commutative:true,asm:x86.ATESTB,reg:regInfo{inputs:[]inputInfo{{0,255},{1,255},},},}, {name:"TESTLconst",auxType:auxInt32,argLen:1,asm:x86.ATESTL,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"TESTWconst",auxType:auxInt16,argLen:1,asm:x86.ATESTW,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"TESTBconst",auxType:auxInt8,argLen:1,asm:x86.ATESTB,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"SHLL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHLL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHLLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHLL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRWconst",auxType:auxInt16,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRW,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SHRBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRB,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARWconst",auxType:auxInt16,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARW,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SARBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARB,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ROLLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ROLWconst",auxType:auxInt16,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLW,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"ROLBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLB,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"NEGL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANEGL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"NOTL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANOTL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"BSFL",argLen:1,clobberFlags:true,asm:x86.ABSFL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"BSFW",argLen:1,clobberFlags:true,asm:x86.ABSFW,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"BSRL",argLen:1,clobberFlags:true,asm:x86.ABSRL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"BSRW",argLen:1,clobberFlags:true,asm:x86.ABSRW,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"BSWAPL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ABSWAPL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"SQRTSD",argLen:1,asm:x86.ASQRTSD,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"SBBLcarrymask",argLen:1,asm:x86.ASBBL,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETEQ",argLen:1,asm:x86.ASETEQ,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETNE",argLen:1,asm:x86.ASETNE,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETL",argLen:1,asm:x86.ASETLT,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETLE",argLen:1,asm:x86.ASETLE,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETG",argLen:1,asm:x86.ASETGT,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETGE",argLen:1,asm:x86.ASETGE,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETB",argLen:1,asm:x86.ASETCS,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETBE",argLen:1,asm:x86.ASETLS,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETA",argLen:1,asm:x86.ASETHI,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETAE",argLen:1,asm:x86.ASETCC,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETEQF",argLen:1,clobberFlags:true,asm:x86.ASETEQ,reg:regInfo{clobbers:1,outputs:[]outputInfo{{0,238},},},}, {name:"SETNEF",argLen:1,clobberFlags:true,asm:x86.ASETNE,reg:regInfo{clobbers:1,outputs:[]outputInfo{{0,238},},},}, {name:"SETORD",argLen:1,asm:x86.ASETPC,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETNAN",argLen:1,asm:x86.ASETPS,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETGF",argLen:1,asm:x86.ASETHI,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"SETGEF",argLen:1,asm:x86.ASETCC,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"MOVBLSX",argLen:1,asm:x86.AMOVBLSX,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVBLZX",argLen:1,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWLSX",argLen:1,asm:x86.AMOVWLSX,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWLZX",argLen:1,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVLconst",auxType:auxInt32,argLen:0,rematerializeable:true,asm:x86.AMOVL,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"CVTTSD2SL",argLen:1,usesScratch:true,asm:x86.ACVTTSD2SL,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,239},},},}, {name:"CVTTSS2SL",argLen:1,usesScratch:true,asm:x86.ACVTTSS2SL,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,239},},},}, {name:"CVTSL2SS",argLen:1,usesScratch:true,asm:x86.ACVTSL2SS,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,65280},},},}, {name:"CVTSL2SD",argLen:1,usesScratch:true,asm:x86.ACVTSL2SD,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,65280},},},}, {name:"CVTSD2SS",argLen:1,usesScratch:true,asm:x86.ACVTSD2SS,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"CVTSS2SD",argLen:1,asm:x86.ACVTSS2SD,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"PXOR",argLen:2,commutative:true,resultInArg0:true,asm:x86.APXOR,reg:regInfo{inputs:[]inputInfo{{0,65280},{1,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"LEAL",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"LEAL1",auxType:auxSymOff,argLen:2,commutative:true,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"LEAL2",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"LEAL4",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"LEAL8",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVBLSXload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVBLSX,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWLSXload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVWLSX,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVLload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVLstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVBloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVWloadidx2",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVLloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVLloadidx4",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},outputs:[]outputInfo{{0,239},},},}, {name:"MOVBstoreidx1",auxType:auxSymOff,argLen:4,commutative:true,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,255},{2,255},{0,65791},},},}, {name:"MOVWstoreidx1",auxType:auxSymOff,argLen:4,commutative:true,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,255},{2,255},{0,65791},},},}, {name:"MOVWstoreidx2",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,255},{2,255},{0,65791},},},}, {name:"MOVLstoreidx1",auxType:auxSymOff,argLen:4,commutative:true,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{2,255},{0,65791},},},}, {name:"MOVLstoreidx4",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{2,255},{0,65791},},},}, {name:"MOVBstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,65791},},},}, {name:"MOVWstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,65791},},},}, {name:"MOVLstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,65791},},},}, {name:"MOVBstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVWstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVWstoreconstidx2",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVLstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"MOVLstoreconstidx4",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,255},{0,65791},},},}, {name:"DUFFZERO",auxType:auxInt64,argLen:3,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,1},},clobbers:130,},}, {name:"REPSTOSL",argLen:4,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,2},{2,1},},clobbers:130,},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:65519,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,4},{0,255},},clobbers:65519,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,239},},clobbers:65519,},}, {name:"DUFFCOPY",auxType:auxInt64,argLen:3,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,64},},clobbers:194,},}, {name:"REPMOVSL",argLen:4,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,64},{2,2},},clobbers:194,},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"LoweredGetG",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,4},},},}, {name:"LoweredGetCallerPC",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"LoweredNilCheck",argLen:2,clobberFlags:true,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,255},},},}, {name:"MOVLconvert",argLen:2,resultInArg0:true,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,239},},},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT_ULT",argLen:0,reg:regInfo{},}, {name:"FlagLT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_ULT",argLen:0,reg:regInfo{},}, {name:"FCHS",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,65280},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSSconst1",auxType:auxFloat32,argLen:0,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"MOVSDconst1",auxType:auxFloat64,argLen:0,reg:regInfo{outputs:[]outputInfo{{0,239},},},}, {name:"MOVSSconst2",argLen:1,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,65280},},},}, {name:"MOVSDconst2",argLen:1,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{0,239},},outputs:[]outputInfo{{0,65280},},},}, {name:"ADDSS",argLen:2,commutative:true,resultInArg0:true,asm:x86.AADDSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"ADDSD",argLen:2,commutative:true,resultInArg0:true,asm:x86.AADDSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBSS",argLen:2,resultInArg0:true,asm:x86.ASUBSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBSD",argLen:2,resultInArg0:true,asm:x86.ASUBSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSS",argLen:2,commutative:true,resultInArg0:true,asm:x86.AMULSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSD",argLen:2,commutative:true,resultInArg0:true,asm:x86.AMULSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"DIVSS",argLen:2,resultInArg0:true,asm:x86.ADIVSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"DIVSD",argLen:2,resultInArg0:true,asm:x86.ADIVSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSSload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSSconst",auxType:auxFloat32,argLen:0,rematerializeable:true,asm:x86.AMOVSS,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:x86.AMOVSD,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSSloadidx1",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSSloadidx4",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSDloadidx1",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSDloadidx8",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVSSstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,4294901760},{0,4295032831},},},}, {name:"MOVSDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,4294901760},{0,4295032831},},},}, {name:"MOVSSstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,4294901760},{0,4295032831},},},}, {name:"MOVSSstoreidx4",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSS,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,4294901760},{0,4295032831},},},}, {name:"MOVSDstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,4294901760},{0,4295032831},},},}, {name:"MOVSDstoreidx8",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVSD,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,4294901760},{0,4295032831},},},}, {name:"ADDSSmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AADDSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"ADDSDmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AADDSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBSSmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.ASUBSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBSDmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.ASUBSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSSmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AMULSS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSDmem",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AMULSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"ADDQ",argLen:2,commutative:true,clobberFlags:true,asm:x86.AADDQ,reg:regInfo{inputs:[]inputInfo{{1,65519},{0,65535},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDL",argLen:2,commutative:true,clobberFlags:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{1,65519},{0,65535},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDQconst",auxType:auxInt32,argLen:1,clobberFlags:true,asm:x86.AADDQ,reg:regInfo{inputs:[]inputInfo{{0,65535},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDLconst",auxType:auxInt32,argLen:1,clobberFlags:true,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,65535},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDQconstmem",auxType:auxSymValAndOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AADDQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"ADDLconstmem",auxType:auxSymValAndOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SUBQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASUBQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SUBL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SUBQconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASUBQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SUBLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MULQ",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AIMULQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MULL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MULQconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AIMULQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MULLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"HMULQ",argLen:2,commutative:true,clobberFlags:true,asm:x86.AIMULQ,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65535},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"HMULL",argLen:2,commutative:true,clobberFlags:true,asm:x86.AIMULL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65535},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"HMULQU",argLen:2,commutative:true,clobberFlags:true,asm:x86.AMULQ,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65535},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"HMULLU",argLen:2,commutative:true,clobberFlags:true,asm:x86.AMULL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65535},},clobbers:1,outputs:[]outputInfo{{0,4},},},}, {name:"AVGQU",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"DIVQ",argLen:2,clobberFlags:true,asm:x86.AIDIVQ,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"DIVL",argLen:2,clobberFlags:true,asm:x86.AIDIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"DIVW",argLen:2,clobberFlags:true,asm:x86.AIDIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"DIVQU",argLen:2,clobberFlags:true,asm:x86.ADIVQ,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"DIVLU",argLen:2,clobberFlags:true,asm:x86.ADIVL,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"DIVWU",argLen:2,clobberFlags:true,asm:x86.ADIVW,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65531},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"MULQU2",argLen:2,commutative:true,clobberFlags:true,asm:x86.AMULQ,reg:regInfo{inputs:[]inputInfo{{0,1},{1,65535},},outputs:[]outputInfo{{0,4},{1,1},},},}, {name:"DIVQU2",argLen:3,clobberFlags:true,asm:x86.ADIVQ,reg:regInfo{inputs:[]inputInfo{{0,4},{1,1},{2,65535},},outputs:[]outputInfo{{0,1},{1,4},},},}, {name:"ANDQ",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AANDQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ANDL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AANDL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ANDQconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AANDQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ANDLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AANDL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORQ",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AORL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORQconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AORL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORQ",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AXORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORL",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:x86.AXORL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORQconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AXORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORLconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AXORL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"CMPQ",argLen:2,asm:x86.ACMPQ,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"CMPL",argLen:2,asm:x86.ACMPL,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"CMPW",argLen:2,asm:x86.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"CMPB",argLen:2,asm:x86.ACMPB,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"CMPQconst",auxType:auxInt32,argLen:1,asm:x86.ACMPQ,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"CMPLconst",auxType:auxInt32,argLen:1,asm:x86.ACMPL,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"CMPWconst",auxType:auxInt16,argLen:1,asm:x86.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"CMPBconst",auxType:auxInt8,argLen:1,asm:x86.ACMPB,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"UCOMISS",argLen:2,asm:x86.AUCOMISS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"UCOMISD",argLen:2,asm:x86.AUCOMISD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"BTL",argLen:2,asm:x86.ABTL,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"BTQ",argLen:2,asm:x86.ABTQ,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"BTLconst",auxType:auxInt8,argLen:1,asm:x86.ABTL,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"BTQconst",auxType:auxInt8,argLen:1,asm:x86.ABTQ,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"TESTQ",argLen:2,commutative:true,asm:x86.ATESTQ,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"TESTL",argLen:2,commutative:true,asm:x86.ATESTL,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"TESTW",argLen:2,commutative:true,asm:x86.ATESTW,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"TESTB",argLen:2,commutative:true,asm:x86.ATESTB,reg:regInfo{inputs:[]inputInfo{{0,65535},{1,65535},},},}, {name:"TESTQconst",auxType:auxInt32,argLen:1,asm:x86.ATESTQ,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"TESTLconst",auxType:auxInt32,argLen:1,asm:x86.ATESTL,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"TESTWconst",auxType:auxInt16,argLen:1,asm:x86.ATESTW,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"TESTBconst",auxType:auxInt8,argLen:1,asm:x86.ATESTB,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"SHLQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHLQ,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHLL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHLL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHLQconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHLQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHLLconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHLL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRQ,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASHRB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRQconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRLconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRWconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRW,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SHRBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASHRB,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARQ,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ASARB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARQconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARLconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARWconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARW,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SARBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ASARB,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.AROLQ,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.AROLL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.AROLW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.AROLB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"RORQ",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ARORQ,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"RORL",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ARORL,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"RORW",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ARORW,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"RORB",argLen:2,resultInArg0:true,clobberFlags:true,asm:x86.ARORB,reg:regInfo{inputs:[]inputInfo{{1,2},{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLQconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLLconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLWconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLW,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ROLBconst",auxType:auxInt8,argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.AROLB,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDLmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AADDL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"ADDQmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AADDQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"SUBQmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.ASUBQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"SUBLmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.ASUBL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"ANDLmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AANDL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"ANDQmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AANDQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORQmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"ORLmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AORL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORQmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AXORQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XORLmem",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:x86.AXORL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"NEGQ",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANEGQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"NEGL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANEGL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"NOTQ",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANOTQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"NOTL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ANOTL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"BSFQ",argLen:1,asm:x86.ABSFQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"BSFL",argLen:1,asm:x86.ABSFL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"BSRQ",argLen:1,asm:x86.ABSRQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"BSRL",argLen:1,asm:x86.ABSRL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"CMOVQEQ",argLen:3,resultInArg0:true,asm:x86.ACMOVQEQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"CMOVLEQ",argLen:3,resultInArg0:true,asm:x86.ACMOVLEQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"BSWAPQ",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ABSWAPQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"BSWAPL",argLen:1,resultInArg0:true,clobberFlags:true,asm:x86.ABSWAPL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"POPCNTQ",argLen:1,clobberFlags:true,asm:x86.APOPCNTQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"POPCNTL",argLen:1,clobberFlags:true,asm:x86.APOPCNTL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"SQRTSD",argLen:1,asm:x86.ASQRTSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"ROUNDSD",auxType:auxInt8,argLen:1,asm:x86.AROUNDSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SBBQcarrymask",argLen:1,asm:x86.ASBBQ,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SBBLcarrymask",argLen:1,asm:x86.ASBBL,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETEQ",argLen:1,asm:x86.ASETEQ,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETNE",argLen:1,asm:x86.ASETNE,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETL",argLen:1,asm:x86.ASETLT,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETLE",argLen:1,asm:x86.ASETLE,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETG",argLen:1,asm:x86.ASETGT,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETGE",argLen:1,asm:x86.ASETGE,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETB",argLen:1,asm:x86.ASETCS,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETBE",argLen:1,asm:x86.ASETLS,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETA",argLen:1,asm:x86.ASETHI,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETAE",argLen:1,asm:x86.ASETCC,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETEQmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETEQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETNEmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETNE,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETLmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETLT,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETLEmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETLE,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETGmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETGT,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETGEmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETGE,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETBmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETCS,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETBEmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETLS,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETAmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETHI,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETAEmem",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.ASETCC,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"SETEQF",argLen:1,clobberFlags:true,asm:x86.ASETEQ,reg:regInfo{clobbers:1,outputs:[]outputInfo{{0,65518},},},}, {name:"SETNEF",argLen:1,clobberFlags:true,asm:x86.ASETNE,reg:regInfo{clobbers:1,outputs:[]outputInfo{{0,65518},},},}, {name:"SETORD",argLen:1,asm:x86.ASETPC,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETNAN",argLen:1,asm:x86.ASETPS,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETGF",argLen:1,asm:x86.ASETHI,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"SETGEF",argLen:1,asm:x86.ASETCC,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBQSX",argLen:1,asm:x86.AMOVBQSX,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBQZX",argLen:1,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWQSX",argLen:1,asm:x86.AMOVWQSX,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWQZX",argLen:1,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLQSX",argLen:1,asm:x86.AMOVLQSX,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLQZX",argLen:1,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLconst",auxType:auxInt32,argLen:0,rematerializeable:true,asm:x86.AMOVL,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"MOVQconst",auxType:auxInt64,argLen:0,rematerializeable:true,asm:x86.AMOVQ,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"CVTTSD2SL",argLen:1,asm:x86.ACVTTSD2SL,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"CVTTSD2SQ",argLen:1,asm:x86.ACVTTSD2SQ,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"CVTTSS2SL",argLen:1,asm:x86.ACVTTSS2SL,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"CVTTSS2SQ",argLen:1,asm:x86.ACVTTSS2SQ,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"CVTSL2SS",argLen:1,asm:x86.ACVTSL2SS,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CVTSL2SD",argLen:1,asm:x86.ACVTSL2SD,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CVTSQ2SS",argLen:1,asm:x86.ACVTSQ2SS,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CVTSQ2SD",argLen:1,asm:x86.ACVTSQ2SD,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CVTSD2SS",argLen:1,asm:x86.ACVTSD2SS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CVTSS2SD",argLen:1,asm:x86.ACVTSS2SD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVQi2f",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVQf2i",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLi2f",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVLf2i",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,65519},},},}, {name:"PXOR",argLen:2,commutative:true,resultInArg0:true,asm:x86.APXOR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LEAQ",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:x86.ALEAQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"LEAQ1",auxType:auxSymOff,argLen:2,commutative:true,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"LEAQ2",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"LEAQ4",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"LEAQ8",auxType:auxSymOff,argLen:2,symEffect:SymAddr,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"LEAL",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:x86.ALEAL,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBQSXload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVBQSX,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWQSXload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVWQSX,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLQSXload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVLQSX,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVQload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVLstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVQstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVOload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVUPS,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVOstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVUPS,reg:regInfo{inputs:[]inputInfo{{1,4294901760},{0,4295032831},},},}, {name:"MOVBloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVBLZX,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVWloadidx2",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVWLZX,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLloadidx4",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLloadidx8",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVQloadidx1",auxType:auxSymOff,argLen:3,commutative:true,symEffect:SymRead,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVQloadidx8",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVBstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVWstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVWstoreidx2",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVLstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVLstoreidx4",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVLstoreidx8",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVQstoreidx1",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVQstoreidx8",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{2,65535},{0,4295032831},},},}, {name:"MOVBstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"MOVWstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"MOVLstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"MOVQstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},},}, {name:"MOVBstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVWstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVWstoreconstidx2",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVLstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVLstoreconstidx4",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVQstoreconstidx1",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"MOVQstoreconstidx8",auxType:auxSymValAndOff,argLen:3,symEffect:SymWrite,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"DUFFZERO",auxType:auxInt64,argLen:3,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,65536},},clobbers:128,},}, {name:"MOVOconst",auxType:auxInt128,argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"REPSTOSQ",argLen:4,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,2},{2,1},},clobbers:130,},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:4294967279,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,4},{0,65535},},clobbers:4294967279,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,65519},},clobbers:4294967279,},}, {name:"DUFFCOPY",auxType:auxInt64,argLen:3,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,64},},clobbers:65728,},}, {name:"REPMOVSQ",argLen:4,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,128},{1,64},{2,2},},clobbers:194,},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"LoweredGetG",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,4},},},}, {name:"LoweredGetCallerPC",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,65519},},},}, {name:"LoweredNilCheck",argLen:2,clobberFlags:true,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,65535},},},}, {name:"LoweredWB",auxType:auxSym,argLen:3,clobberFlags:true,symEffect:SymNone,reg:regInfo{inputs:[]inputInfo{{0,128},{1,1},},clobbers:4294901760,},}, {name:"MOVQconvert",argLen:2,resultInArg0:true,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVLconvert",argLen:2,resultInArg0:true,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,65519},},outputs:[]outputInfo{{0,65519},},},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT_ULT",argLen:0,reg:regInfo{},}, {name:"FlagLT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_ULT",argLen:0,reg:regInfo{},}, {name:"MOVLatomicload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVL,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"MOVQatomicload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:x86.AMOVQ,reg:regInfo{inputs:[]inputInfo{{0,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XCHGL",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AXCHGL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XCHGQ",auxType:auxSymOff,argLen:3,resultInArg0:true,faultOnNilArg1:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AXCHGQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XADDLlock",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AXADDL,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"XADDQlock",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AXADDQ,reg:regInfo{inputs:[]inputInfo{{0,65519},{1,4295032831},},outputs:[]outputInfo{{0,65519},},},}, {name:"AddTupleFirst32",argLen:2,reg:regInfo{},}, {name:"AddTupleFirst64",argLen:2,reg:regInfo{},}, {name:"CMPXCHGLlock",auxType:auxSymOff,argLen:4,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.ACMPXCHGL,reg:regInfo{inputs:[]inputInfo{{1,1},{0,65519},{2,65519},},clobbers:1,outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"CMPXCHGQlock",auxType:auxSymOff,argLen:4,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.ACMPXCHGQ,reg:regInfo{inputs:[]inputInfo{{1,1},{0,65519},{2,65519},},clobbers:1,outputs:[]outputInfo{{1,0},{0,65519},},},}, {name:"ANDBlock",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AANDB,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"ORBlock",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:x86.AORB,reg:regInfo{inputs:[]inputInfo{{1,65535},{0,4295032831},},},}, {name:"ADD",argLen:2,commutative:true,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDconst",auxType:auxInt32,argLen:1,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,30719},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUB",argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBconst",auxType:auxInt32,argLen:1,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSB",argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBconst",auxType:auxInt32,argLen:1,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MUL",argLen:2,commutative:true,asm:arm.AMUL,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"HMUL",argLen:2,commutative:true,asm:arm.AMULL,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"HMULU",argLen:2,commutative:true,asm:arm.AMULLU,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"CALLudiv",argLen:2,clobberFlags:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,1},},clobbers:16396,outputs:[]outputInfo{{0,1},{1,2},},},}, {name:"ADDS",argLen:2,commutative:true,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDSconst",auxType:auxInt32,argLen:1,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADC",argLen:3,commutative:true,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCconst",auxType:auxInt32,argLen:2,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBS",argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSconst",auxType:auxInt32,argLen:1,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSconst",auxType:auxInt32,argLen:1,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SBC",argLen:3,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCconst",auxType:auxInt32,argLen:2,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCconst",auxType:auxInt32,argLen:2,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLU",argLen:2,commutative:true,asm:arm.AMULLU,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},{1,21503},},},}, {name:"MULA",argLen:3,asm:arm.AMULA,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULS",argLen:3,asm:arm.AMULS,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDF",argLen:2,commutative:true,asm:arm.AADDF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"ADDD",argLen:2,commutative:true,asm:arm.AADDD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBF",argLen:2,asm:arm.ASUBF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBD",argLen:2,asm:arm.ASUBD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULF",argLen:2,commutative:true,asm:arm.AMULF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULD",argLen:2,commutative:true,asm:arm.AMULD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"NMULF",argLen:2,commutative:true,asm:arm.ANMULF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"NMULD",argLen:2,commutative:true,asm:arm.ANMULD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"DIVF",argLen:2,asm:arm.ADIVF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"DIVD",argLen:2,asm:arm.ADIVD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULAF",argLen:3,resultInArg0:true,asm:arm.AMULAF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULAD",argLen:3,resultInArg0:true,asm:arm.AMULAD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSF",argLen:3,resultInArg0:true,asm:arm.AMULSF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MULSD",argLen:3,resultInArg0:true,asm:arm.AMULSD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"AND",argLen:2,commutative:true,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDconst",auxType:auxInt32,argLen:1,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"OR",argLen:2,commutative:true,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORconst",auxType:auxInt32,argLen:1,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XOR",argLen:2,commutative:true,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORconst",auxType:auxInt32,argLen:1,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BIC",argLen:2,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICconst",auxType:auxInt32,argLen:1,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BFX",auxType:auxInt32,argLen:1,asm:arm.ABFX,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BFXU",auxType:auxInt32,argLen:1,asm:arm.ABFXU,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVN",argLen:1,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"NEGF",argLen:1,asm:arm.ANEGF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"NEGD",argLen:1,asm:arm.ANEGD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SQRTD",argLen:1,asm:arm.ASQRTD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CLZ",argLen:1,asm:arm.ACLZ,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"REV",argLen:1,asm:arm.AREV,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RBIT",argLen:1,asm:arm.ARBIT,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SLL",argLen:2,asm:arm.ASLL,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SLLconst",auxType:auxInt32,argLen:1,asm:arm.ASLL,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRL",argLen:2,asm:arm.ASRL,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRLconst",auxType:auxInt32,argLen:1,asm:arm.ASRL,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRA",argLen:2,asm:arm.ASRA,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRAconst",auxType:auxInt32,argLen:1,asm:arm.ASRA,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRRconst",auxType:auxInt32,argLen:1,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDshiftLL",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDshiftRL",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDshiftRA",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftLL",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftRL",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftRA",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftLL",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftRL",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftRA",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftLL",auxType:auxInt32,argLen:2,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftRL",auxType:auxInt32,argLen:2,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftRA",auxType:auxInt32,argLen:2,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftLL",auxType:auxInt32,argLen:2,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftRL",auxType:auxInt32,argLen:2,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftRA",auxType:auxInt32,argLen:2,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftLL",auxType:auxInt32,argLen:2,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftRL",auxType:auxInt32,argLen:2,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftRA",auxType:auxInt32,argLen:2,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftRR",auxType:auxInt32,argLen:2,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftLL",auxType:auxInt32,argLen:2,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftRL",auxType:auxInt32,argLen:2,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftRA",auxType:auxInt32,argLen:2,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftLL",auxType:auxInt32,argLen:1,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftRL",auxType:auxInt32,argLen:1,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftRA",auxType:auxInt32,argLen:1,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftLL",auxType:auxInt32,argLen:3,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftRL",auxType:auxInt32,argLen:3,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftRA",auxType:auxInt32,argLen:3,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftLL",auxType:auxInt32,argLen:3,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftRL",auxType:auxInt32,argLen:3,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftRA",auxType:auxInt32,argLen:3,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftLL",auxType:auxInt32,argLen:3,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftRL",auxType:auxInt32,argLen:3,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftRA",auxType:auxInt32,argLen:3,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDSshiftLL",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDSshiftRL",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDSshiftRA",auxType:auxInt32,argLen:2,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftLL",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftRL",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftRA",auxType:auxInt32,argLen:2,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftLL",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftRL",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftRA",auxType:auxInt32,argLen:2,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDshiftLLreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDshiftRLreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDshiftRAreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftLLreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftRLreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBshiftRAreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftLLreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftRLreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSBshiftRAreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftLLreg",argLen:3,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftRLreg",argLen:3,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDshiftRAreg",argLen:3,asm:arm.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftLLreg",argLen:3,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftRLreg",argLen:3,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORshiftRAreg",argLen:3,asm:arm.AORR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftLLreg",argLen:3,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftRLreg",argLen:3,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORshiftRAreg",argLen:3,asm:arm.AEOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftLLreg",argLen:3,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftRLreg",argLen:3,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"BICshiftRAreg",argLen:3,asm:arm.ABIC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftLLreg",argLen:2,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftRLreg",argLen:2,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MVNshiftRAreg",argLen:2,asm:arm.AMVN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftLLreg",argLen:4,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftRLreg",argLen:4,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADCshiftRAreg",argLen:4,asm:arm.AADC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftLLreg",argLen:4,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftRLreg",argLen:4,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SBCshiftRAreg",argLen:4,asm:arm.ASBC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftLLreg",argLen:4,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftRLreg",argLen:4,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RSCshiftRAreg",argLen:4,asm:arm.ARSC,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDSshiftLLreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDSshiftRLreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"ADDSshiftRAreg",argLen:3,asm:arm.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftLLreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftRLreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"SUBSshiftRAreg",argLen:3,asm:arm.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftLLreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftRLreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"RSBSshiftRAreg",argLen:3,asm:arm.ARSB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"CMP",argLen:2,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMPconst",auxType:auxInt32,argLen:1,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,22527},},},}, {name:"CMN",argLen:2,commutative:true,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMNconst",auxType:auxInt32,argLen:1,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,22527},},},}, {name:"TST",argLen:2,commutative:true,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TSTconst",auxType:auxInt32,argLen:1,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,22527},},},}, {name:"TEQ",argLen:2,commutative:true,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TEQconst",auxType:auxInt32,argLen:1,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,22527},},},}, {name:"CMPF",argLen:2,asm:arm.ACMPF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"CMPD",argLen:2,asm:arm.ACMPD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"CMPshiftLL",auxType:auxInt32,argLen:2,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMPshiftRL",auxType:auxInt32,argLen:2,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMPshiftRA",auxType:auxInt32,argLen:2,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMNshiftLL",auxType:auxInt32,argLen:2,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMNshiftRL",auxType:auxInt32,argLen:2,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMNshiftRA",auxType:auxInt32,argLen:2,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TSTshiftLL",auxType:auxInt32,argLen:2,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TSTshiftRL",auxType:auxInt32,argLen:2,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TSTshiftRA",auxType:auxInt32,argLen:2,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TEQshiftLL",auxType:auxInt32,argLen:2,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TEQshiftRL",auxType:auxInt32,argLen:2,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"TEQshiftRA",auxType:auxInt32,argLen:2,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,22527},{1,22527},},},}, {name:"CMPshiftLLreg",argLen:3,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMPshiftRLreg",argLen:3,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMPshiftRAreg",argLen:3,asm:arm.ACMP,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMNshiftLLreg",argLen:3,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMNshiftRLreg",argLen:3,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMNshiftRAreg",argLen:3,asm:arm.ACMN,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TSTshiftLLreg",argLen:3,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TSTshiftRLreg",argLen:3,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TSTshiftRAreg",argLen:3,asm:arm.ATST,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TEQshiftLLreg",argLen:3,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TEQshiftRLreg",argLen:3,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"TEQshiftRAreg",argLen:3,asm:arm.ATEQ,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},{2,21503},},},}, {name:"CMPF0",argLen:1,asm:arm.ACMPF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},},}, {name:"CMPD0",argLen:1,asm:arm.ACMPD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},},}, {name:"MOVWconst",auxType:auxInt32,argLen:0,rematerializeable:true,asm:arm.AMOVW,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"MOVFconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:arm.AMOVF,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:arm.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVWaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4294975488},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVFload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVF,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4294998015},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},},}, {name:"MOVFstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm.AMOVF,reg:regInfo{inputs:[]inputInfo{{0,4294998015},{1,4294901760},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4294998015},{1,4294901760},},},}, {name:"MOVWloadidx",argLen:3,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWloadshiftLL",auxType:auxInt32,argLen:3,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWloadshiftRL",auxType:auxInt32,argLen:3,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWloadshiftRA",auxType:auxInt32,argLen:3,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBUloadidx",argLen:3,asm:arm.AMOVBU,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBloadidx",argLen:3,asm:arm.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHUloadidx",argLen:3,asm:arm.AMOVHU,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHloadidx",argLen:3,asm:arm.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,22527},{0,4294998015},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWstoreidx",argLen:4,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVWstoreshiftLL",auxType:auxInt32,argLen:4,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVWstoreshiftRL",auxType:auxInt32,argLen:4,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVWstoreshiftRA",auxType:auxInt32,argLen:4,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVBstoreidx",argLen:4,asm:arm.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVHstoreidx",argLen:4,asm:arm.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,22527},{2,22527},{0,4294998015},},},}, {name:"MOVBreg",argLen:1,asm:arm.AMOVBS,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBUreg",argLen:1,asm:arm.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHreg",argLen:1,asm:arm.AMOVHS,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHUreg",argLen:1,asm:arm.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWreg",argLen:1,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWnop",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWF",argLen:1,asm:arm.AMOVWF,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:2147483648,outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVWD",argLen:1,asm:arm.AMOVWD,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:2147483648,outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVWUF",argLen:1,asm:arm.AMOVWF,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:2147483648,outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVWUD",argLen:1,asm:arm.AMOVWD,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:2147483648,outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVFW",argLen:1,asm:arm.AMOVFW,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},clobbers:2147483648,outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDW",argLen:1,asm:arm.AMOVDW,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},clobbers:2147483648,outputs:[]outputInfo{{0,21503},},},}, {name:"MOVFWU",argLen:1,asm:arm.AMOVFW,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},clobbers:2147483648,outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDWU",argLen:1,asm:arm.AMOVDW,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},clobbers:2147483648,outputs:[]outputInfo{{0,21503},},},}, {name:"MOVFD",argLen:1,asm:arm.AMOVFD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVDF",argLen:1,asm:arm.AMOVDF,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CMOVWHSconst",auxType:auxInt32,argLen:2,resultInArg0:true,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"CMOVWLSconst",auxType:auxInt32,argLen:2,resultInArg0:true,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRAcond",argLen:3,asm:arm.ASRA,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:4294924287,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,128},{0,29695},},clobbers:4294924287,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:4294924287,},}, {name:"LoweredNilCheck",argLen:2,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,22527},},},}, {name:"Equal",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"NotEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LessThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LessEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"GreaterThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"GreaterEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LessThanU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LessEqualU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"GreaterThanU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"GreaterEqualU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"DUFFZERO",auxType:auxInt64,argLen:3,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,1},},clobbers:16386,},}, {name:"DUFFCOPY",auxType:auxInt64,argLen:3,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,4},{1,2},},clobbers:16391,},}, {name:"LoweredZero",auxType:auxInt64,argLen:4,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,21503},{2,21503},},clobbers:2,},}, {name:"LoweredMove",auxType:auxInt64,argLen:4,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,4},{1,2},{2,21503},},clobbers:6,},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,128},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWconvert",argLen:2,asm:arm.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,22527},},outputs:[]outputInfo{{0,21503},},},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT_ULT",argLen:0,reg:regInfo{},}, {name:"FlagLT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_ULT",argLen:0,reg:regInfo{},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"ADD",argLen:2,commutative:true,asm:arm64.AADD,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ADDconst",auxType:auxInt64,argLen:1,asm:arm64.AADD,reg:regInfo{inputs:[]inputInfo{{0,1878786047},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SUB",argLen:2,asm:arm64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SUBconst",auxType:auxInt64,argLen:1,asm:arm64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MUL",argLen:2,commutative:true,asm:arm64.AMUL,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MULW",argLen:2,commutative:true,asm:arm64.AMULW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MULH",argLen:2,commutative:true,asm:arm64.ASMULH,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UMULH",argLen:2,commutative:true,asm:arm64.AUMULH,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MULL",argLen:2,commutative:true,asm:arm64.ASMULL,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UMULL",argLen:2,commutative:true,asm:arm64.AUMULL,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"DIV",argLen:2,asm:arm64.ASDIV,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UDIV",argLen:2,asm:arm64.AUDIV,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"DIVW",argLen:2,asm:arm64.ASDIVW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UDIVW",argLen:2,asm:arm64.AUDIVW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOD",argLen:2,asm:arm64.AREM,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UMOD",argLen:2,asm:arm64.AUREM,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MODW",argLen:2,asm:arm64.AREMW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"UMODW",argLen:2,asm:arm64.AUREMW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FADDS",argLen:2,commutative:true,asm:arm64.AFADDS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FADDD",argLen:2,commutative:true,asm:arm64.AFADDD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FSUBS",argLen:2,asm:arm64.AFSUBS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FSUBD",argLen:2,asm:arm64.AFSUBD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FMULS",argLen:2,commutative:true,asm:arm64.AFMULS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FMULD",argLen:2,commutative:true,asm:arm64.AFMULD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FDIVS",argLen:2,asm:arm64.AFDIVS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FDIVD",argLen:2,asm:arm64.AFDIVD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"AND",argLen:2,commutative:true,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ANDconst",auxType:auxInt64,argLen:1,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"OR",argLen:2,commutative:true,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ORconst",auxType:auxInt64,argLen:1,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"XOR",argLen:2,commutative:true,asm:arm64.AEOR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"XORconst",auxType:auxInt64,argLen:1,asm:arm64.AEOR,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"BIC",argLen:2,asm:arm64.ABIC,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"BICconst",auxType:auxInt64,argLen:1,asm:arm64.ABIC,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MVN",argLen:1,asm:arm64.AMVN,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"NEG",argLen:1,asm:arm64.ANEG,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FNEGS",argLen:1,asm:arm64.AFNEGS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FNEGD",argLen:1,asm:arm64.AFNEGD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FSQRTD",argLen:1,asm:arm64.AFSQRTD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"REV",argLen:1,asm:arm64.AREV,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"REVW",argLen:1,asm:arm64.AREVW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"REV16W",argLen:1,asm:arm64.AREV16W,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"RBIT",argLen:1,asm:arm64.ARBIT,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"RBITW",argLen:1,asm:arm64.ARBITW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CLZ",argLen:1,asm:arm64.ACLZ,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CLZW",argLen:1,asm:arm64.ACLZW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SLL",argLen:2,asm:arm64.ALSL,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SLLconst",auxType:auxInt64,argLen:1,asm:arm64.ALSL,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SRL",argLen:2,asm:arm64.ALSR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SRLconst",auxType:auxInt64,argLen:1,asm:arm64.ALSR,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SRA",argLen:2,asm:arm64.AASR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SRAconst",auxType:auxInt64,argLen:1,asm:arm64.AASR,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"RORconst",auxType:auxInt64,argLen:1,asm:arm64.AROR,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"RORWconst",auxType:auxInt64,argLen:1,asm:arm64.ARORW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CMP",argLen:2,asm:arm64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMPconst",auxType:auxInt64,argLen:1,asm:arm64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,805044223},},},}, {name:"CMPW",argLen:2,asm:arm64.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMPWconst",auxType:auxInt32,argLen:1,asm:arm64.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},},}, {name:"CMN",argLen:2,asm:arm64.ACMN,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMNconst",auxType:auxInt64,argLen:1,asm:arm64.ACMN,reg:regInfo{inputs:[]inputInfo{{0,805044223},},},}, {name:"CMNW",argLen:2,asm:arm64.ACMNW,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMNWconst",auxType:auxInt32,argLen:1,asm:arm64.ACMNW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},},}, {name:"FCMPS",argLen:2,asm:arm64.AFCMPS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},},}, {name:"FCMPD",argLen:2,asm:arm64.AFCMPD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},{1,9223372034707292160},},},}, {name:"ADDshiftLL",auxType:auxInt64,argLen:2,asm:arm64.AADD,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ADDshiftRL",auxType:auxInt64,argLen:2,asm:arm64.AADD,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ADDshiftRA",auxType:auxInt64,argLen:2,asm:arm64.AADD,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SUBshiftLL",auxType:auxInt64,argLen:2,asm:arm64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SUBshiftRL",auxType:auxInt64,argLen:2,asm:arm64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SUBshiftRA",auxType:auxInt64,argLen:2,asm:arm64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ANDshiftLL",auxType:auxInt64,argLen:2,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ANDshiftRL",auxType:auxInt64,argLen:2,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ANDshiftRA",auxType:auxInt64,argLen:2,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ORshiftLL",auxType:auxInt64,argLen:2,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ORshiftRL",auxType:auxInt64,argLen:2,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"ORshiftRA",auxType:auxInt64,argLen:2,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"XORshiftLL",auxType:auxInt64,argLen:2,asm:arm64.AEOR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"XORshiftRL",auxType:auxInt64,argLen:2,asm:arm64.AEOR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"XORshiftRA",auxType:auxInt64,argLen:2,asm:arm64.AEOR,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"BICshiftLL",auxType:auxInt64,argLen:2,asm:arm64.ABIC,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"BICshiftRL",auxType:auxInt64,argLen:2,asm:arm64.ABIC,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"BICshiftRA",auxType:auxInt64,argLen:2,asm:arm64.ABIC,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CMPshiftLL",auxType:auxInt64,argLen:2,asm:arm64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMPshiftRL",auxType:auxInt64,argLen:2,asm:arm64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"CMPshiftRA",auxType:auxInt64,argLen:2,asm:arm64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,805044223},{1,805044223},},},}, {name:"MOVDconst",auxType:auxInt64,argLen:0,rematerializeable:true,asm:arm64.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"FMOVSconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:arm64.AFMOVS,reg:regInfo{outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FMOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:arm64.AFMOVD,reg:regInfo{outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"MOVDaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,9223372037928517632},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVBUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVHUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVWUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVWU,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FMOVSload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FMOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:arm64.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"STP",auxType:auxSymOff,argLen:4,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.ASTP,reg:regInfo{inputs:[]inputInfo{{1,805044223},{2,805044223},{0,9223372038733561855},},},}, {name:"FMOVSstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},{1,9223372034707292160},},},}, {name:"FMOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},{1,9223372034707292160},},},}, {name:"MOVBstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},},}, {name:"MOVHstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},},}, {name:"MOVWstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},},}, {name:"MOVDstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},},}, {name:"MOVQstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:arm64.ASTP,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},},}, {name:"MOVBreg",argLen:1,asm:arm64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVBUreg",argLen:1,asm:arm64.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVHreg",argLen:1,asm:arm64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVHUreg",argLen:1,asm:arm64.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVWreg",argLen:1,asm:arm64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVWUreg",argLen:1,asm:arm64.AMOVWU,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVDreg",argLen:1,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVDnop",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,670826495},},},}, {name:"SCVTFWS",argLen:1,asm:arm64.ASCVTFWS,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"SCVTFWD",argLen:1,asm:arm64.ASCVTFWD,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"UCVTFWS",argLen:1,asm:arm64.AUCVTFWS,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"UCVTFWD",argLen:1,asm:arm64.AUCVTFWD,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"SCVTFS",argLen:1,asm:arm64.ASCVTFS,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"SCVTFD",argLen:1,asm:arm64.ASCVTFD,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"UCVTFS",argLen:1,asm:arm64.AUCVTFS,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"UCVTFD",argLen:1,asm:arm64.AUCVTFD,reg:regInfo{inputs:[]inputInfo{{0,670826495},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FCVTZSSW",argLen:1,asm:arm64.AFCVTZSSW,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZSDW",argLen:1,asm:arm64.AFCVTZSDW,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZUSW",argLen:1,asm:arm64.AFCVTZUSW,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZUDW",argLen:1,asm:arm64.AFCVTZUDW,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZSS",argLen:1,asm:arm64.AFCVTZSS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZSD",argLen:1,asm:arm64.AFCVTZSD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZUS",argLen:1,asm:arm64.AFCVTZUS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTZUD",argLen:1,asm:arm64.AFCVTZUD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FCVTSD",argLen:1,asm:arm64.AFCVTSD,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"FCVTDS",argLen:1,asm:arm64.AFCVTDS,reg:regInfo{inputs:[]inputInfo{{0,9223372034707292160},},outputs:[]outputInfo{{0,9223372034707292160},},},}, {name:"CSELULT",argLen:3,asm:arm64.ACSEL,reg:regInfo{inputs:[]inputInfo{{0,670826495},{1,670826495},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CSELULT0",argLen:2,asm:arm64.ACSEL,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:9223372035512336383,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,67108864},{0,1744568319},},clobbers:9223372035512336383,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,670826495},},clobbers:9223372035512336383,},}, {name:"LoweredNilCheck",argLen:2,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,805044223},},},}, {name:"Equal",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"NotEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"LessThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"LessEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"GreaterThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"GreaterEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"LessThanU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"LessEqualU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"GreaterThanU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"GreaterEqualU",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"DUFFZERO",auxType:auxInt64,argLen:2,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,65536},},clobbers:536936448,},}, {name:"LoweredZero",argLen:3,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,65536},{1,670826495},},clobbers:65536,},}, {name:"DUFFCOPY",auxType:auxInt64,argLen:3,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,131072},{1,65536},},clobbers:537067520,},}, {name:"LoweredMove",argLen:4,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,131072},{1,65536},{2,670826495},},clobbers:196608,},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,67108864},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,670826495},},},}, {name:"MOVDconvert",argLen:2,asm:arm64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,805044223},},outputs:[]outputInfo{{0,670826495},},},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT_ULT",argLen:0,reg:regInfo{},}, {name:"FlagLT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_UGT",argLen:0,reg:regInfo{},}, {name:"FlagGT_ULT",argLen:0,reg:regInfo{},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"LDAR",argLen:2,faultOnNilArg0:true,asm:arm64.ALDAR,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LDARW",argLen:2,faultOnNilArg0:true,asm:arm64.ALDARW,reg:regInfo{inputs:[]inputInfo{{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"STLR",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:arm64.ASTLR,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"STLRW",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:arm64.ASTLRW,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"LoweredAtomicExchange64",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicExchange32",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicAdd64",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicAdd32",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicCas64",argLen:4,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{2,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicCas32",argLen:4,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,805044223},{2,805044223},{0,9223372038733561855},},outputs:[]outputInfo{{0,670826495},},},}, {name:"LoweredAtomicAnd8",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:arm64.AAND,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"LoweredAtomicOr8",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:arm64.AORR,reg:regInfo{inputs:[]inputInfo{{1,805044223},{0,9223372038733561855},},},}, {name:"ADD",argLen:2,commutative:true,asm:mips.AADDU,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"ADDconst",auxType:auxInt32,argLen:1,asm:mips.AADDU,reg:regInfo{inputs:[]inputInfo{{0,536870910},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SUB",argLen:2,asm:mips.ASUBU,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SUBconst",auxType:auxInt32,argLen:1,asm:mips.ASUBU,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MUL",argLen:2,commutative:true,asm:mips.AMUL,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},clobbers:105553116266496,outputs:[]outputInfo{{0,335544318},},},}, {name:"MULT",argLen:2,commutative:true,asm:mips.AMUL,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,35184372088832},{1,70368744177664},},},}, {name:"MULTU",argLen:2,commutative:true,asm:mips.AMULU,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,35184372088832},{1,70368744177664},},},}, {name:"DIV",argLen:2,asm:mips.ADIV,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,35184372088832},{1,70368744177664},},},}, {name:"DIVU",argLen:2,asm:mips.ADIVU,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,35184372088832},{1,70368744177664},},},}, {name:"ADDF",argLen:2,commutative:true,asm:mips.AADDF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"ADDD",argLen:2,commutative:true,asm:mips.AADDD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"SUBF",argLen:2,asm:mips.ASUBF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"SUBD",argLen:2,asm:mips.ASUBD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MULF",argLen:2,commutative:true,asm:mips.AMULF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MULD",argLen:2,commutative:true,asm:mips.AMULD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"DIVF",argLen:2,asm:mips.ADIVF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"DIVD",argLen:2,asm:mips.ADIVD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"AND",argLen:2,commutative:true,asm:mips.AAND,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"ANDconst",auxType:auxInt32,argLen:1,asm:mips.AAND,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"OR",argLen:2,commutative:true,asm:mips.AOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"ORconst",auxType:auxInt32,argLen:1,asm:mips.AOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"XOR",argLen:2,commutative:true,asm:mips.AXOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"XORconst",auxType:auxInt32,argLen:1,asm:mips.AXOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"NOR",argLen:2,commutative:true,asm:mips.ANOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"NORconst",auxType:auxInt32,argLen:1,asm:mips.ANOR,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"NEG",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"NEGF",argLen:1,asm:mips.ANEGF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"NEGD",argLen:1,asm:mips.ANEGD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"SQRTD",argLen:1,asm:mips.ASQRTD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"SLL",argLen:2,asm:mips.ASLL,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SLLconst",auxType:auxInt32,argLen:1,asm:mips.ASLL,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SRL",argLen:2,asm:mips.ASRL,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SRLconst",auxType:auxInt32,argLen:1,asm:mips.ASRL,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SRA",argLen:2,asm:mips.ASRA,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SRAconst",auxType:auxInt32,argLen:1,asm:mips.ASRA,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"CLZ",argLen:1,asm:mips.ACLZ,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGT",argLen:2,asm:mips.ASGT,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGTconst",auxType:auxInt32,argLen:1,asm:mips.ASGT,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGTzero",argLen:1,asm:mips.ASGT,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGTU",argLen:2,asm:mips.ASGTU,reg:regInfo{inputs:[]inputInfo{{0,469762046},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGTUconst",auxType:auxInt32,argLen:1,asm:mips.ASGTU,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"SGTUzero",argLen:1,asm:mips.ASGTU,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"CMPEQF",argLen:2,asm:mips.ACMPEQF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"CMPEQD",argLen:2,asm:mips.ACMPEQD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"CMPGEF",argLen:2,asm:mips.ACMPGEF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"CMPGED",argLen:2,asm:mips.ACMPGED,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"CMPGTF",argLen:2,asm:mips.ACMPGTF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"CMPGTD",argLen:2,asm:mips.ACMPGTD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},{1,35183835217920},},},}, {name:"MOVWconst",auxType:auxInt32,argLen:0,rematerializeable:true,asm:mips.AMOVW,reg:regInfo{outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVFconst",auxType:auxFloat32,argLen:0,rematerializeable:true,asm:mips.AMOVF,reg:regInfo{outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:mips.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVWaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,140737555464192},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVBUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVHUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVFload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVF,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"MOVFstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVF,reg:regInfo{inputs:[]inputInfo{{1,35183835217920},{0,140738025226238},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVD,reg:regInfo{inputs:[]inputInfo{{1,35183835217920},{0,140738025226238},},},}, {name:"MOVBstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},},}, {name:"MOVHstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},},}, {name:"MOVWstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},},}, {name:"MOVBreg",argLen:1,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVBUreg",argLen:1,asm:mips.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVHreg",argLen:1,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVHUreg",argLen:1,asm:mips.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVWreg",argLen:1,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVWnop",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,335544318},},outputs:[]outputInfo{{0,335544318},},},}, {name:"CMOVZ",argLen:3,resultInArg0:true,asm:mips.ACMOVZ,reg:regInfo{inputs:[]inputInfo{{0,335544318},{1,335544318},{2,335544318},},outputs:[]outputInfo{{0,335544318},},},}, {name:"CMOVZzero",argLen:2,resultInArg0:true,asm:mips.ACMOVZ,reg:regInfo{inputs:[]inputInfo{{0,335544318},{1,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVWF",argLen:1,asm:mips.AMOVWF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVWD",argLen:1,asm:mips.AMOVWD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"TRUNCFW",argLen:1,asm:mips.ATRUNCFW,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"TRUNCDW",argLen:1,asm:mips.ATRUNCDW,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVFD",argLen:1,asm:mips.AMOVFD,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"MOVDF",argLen:1,asm:mips.AMOVDF,reg:regInfo{inputs:[]inputInfo{{0,35183835217920},},outputs:[]outputInfo{{0,35183835217920},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:140737421246462,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,4194304},{0,402653182},},clobbers:140737421246462,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,335544318},},clobbers:140737421246462,},}, {name:"LoweredAtomicLoad",argLen:2,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredAtomicStore",argLen:3,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"LoweredAtomicStorezero",argLen:2,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},},}, {name:"LoweredAtomicExchange",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredAtomicAdd",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredAtomicAddconst",auxType:auxInt32,argLen:2,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredAtomicCas",argLen:4,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,469762046},{2,469762046},{0,140738025226238},},outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredAtomicAnd",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:mips.AAND,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"LoweredAtomicOr",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:mips.AOR,reg:regInfo{inputs:[]inputInfo{{1,469762046},{0,140738025226238},},},}, {name:"LoweredZero",auxType:auxInt32,argLen:3,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,335544318},},clobbers:2,},}, {name:"LoweredMove",auxType:auxInt32,argLen:4,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,4},{1,2},{2,335544318},},clobbers:6,},}, {name:"LoweredNilCheck",argLen:2,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,469762046},},},}, {name:"FPFlagTrue",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,335544318},},},}, {name:"FPFlagFalse",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,335544318},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,4194304},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,335544318},},},}, {name:"MOVWconvert",argLen:2,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,469762046},},outputs:[]outputInfo{{0,335544318},},},}, {name:"ADDV",argLen:2,commutative:true,asm:mips.AADDVU,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"ADDVconst",auxType:auxInt64,argLen:1,asm:mips.AADDVU,reg:regInfo{inputs:[]inputInfo{{0,268435454},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SUBV",argLen:2,asm:mips.ASUBVU,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SUBVconst",auxType:auxInt64,argLen:1,asm:mips.ASUBVU,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MULV",argLen:2,commutative:true,asm:mips.AMULV,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,1152921504606846976},{1,2305843009213693952},},},}, {name:"MULVU",argLen:2,commutative:true,asm:mips.AMULVU,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,1152921504606846976},{1,2305843009213693952},},},}, {name:"DIVV",argLen:2,asm:mips.ADIVV,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,1152921504606846976},{1,2305843009213693952},},},}, {name:"DIVVU",argLen:2,asm:mips.ADIVVU,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,1152921504606846976},{1,2305843009213693952},},},}, {name:"ADDF",argLen:2,commutative:true,asm:mips.AADDF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"ADDD",argLen:2,commutative:true,asm:mips.AADDD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"SUBF",argLen:2,asm:mips.ASUBF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"SUBD",argLen:2,asm:mips.ASUBD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MULF",argLen:2,commutative:true,asm:mips.AMULF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MULD",argLen:2,commutative:true,asm:mips.AMULD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"DIVF",argLen:2,asm:mips.ADIVF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"DIVD",argLen:2,asm:mips.ADIVD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"AND",argLen:2,commutative:true,asm:mips.AAND,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"ANDconst",auxType:auxInt64,argLen:1,asm:mips.AAND,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"OR",argLen:2,commutative:true,asm:mips.AOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"ORconst",auxType:auxInt64,argLen:1,asm:mips.AOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"XOR",argLen:2,commutative:true,asm:mips.AXOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"XORconst",auxType:auxInt64,argLen:1,asm:mips.AXOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"NOR",argLen:2,commutative:true,asm:mips.ANOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"NORconst",auxType:auxInt64,argLen:1,asm:mips.ANOR,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"NEGV",argLen:1,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"NEGF",argLen:1,asm:mips.ANEGF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"NEGD",argLen:1,asm:mips.ANEGD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"SLLV",argLen:2,asm:mips.ASLLV,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SLLVconst",auxType:auxInt64,argLen:1,asm:mips.ASLLV,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SRLV",argLen:2,asm:mips.ASRLV,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SRLVconst",auxType:auxInt64,argLen:1,asm:mips.ASRLV,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SRAV",argLen:2,asm:mips.ASRAV,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SRAVconst",auxType:auxInt64,argLen:1,asm:mips.ASRAV,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SGT",argLen:2,asm:mips.ASGT,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SGTconst",auxType:auxInt64,argLen:1,asm:mips.ASGT,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SGTU",argLen:2,asm:mips.ASGTU,reg:regInfo{inputs:[]inputInfo{{0,234881022},{1,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"SGTUconst",auxType:auxInt64,argLen:1,asm:mips.ASGTU,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"CMPEQF",argLen:2,asm:mips.ACMPEQF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"CMPEQD",argLen:2,asm:mips.ACMPEQD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"CMPGEF",argLen:2,asm:mips.ACMPGEF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"CMPGED",argLen:2,asm:mips.ACMPGED,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"CMPGTF",argLen:2,asm:mips.ACMPGTF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"CMPGTD",argLen:2,asm:mips.ACMPGTD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},{1,1152921504338411520},},},}, {name:"MOVVconst",auxType:auxInt64,argLen:0,rematerializeable:true,asm:mips.AMOVV,reg:regInfo{outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVFconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:mips.AMOVF,reg:regInfo{outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:mips.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVVaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{0,4611686018460942336},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVBUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVHUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVWUload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVWU,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVVload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVFload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVF,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:mips.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"MOVVstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"MOVFstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVF,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},{1,1152921504338411520},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},{1,1152921504338411520},},},}, {name:"MOVBstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"MOVHstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"MOVWstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"MOVVstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"MOVBreg",argLen:1,asm:mips.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVBUreg",argLen:1,asm:mips.AMOVBU,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVHreg",argLen:1,asm:mips.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVHUreg",argLen:1,asm:mips.AMOVHU,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVWreg",argLen:1,asm:mips.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVWUreg",argLen:1,asm:mips.AMOVWU,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVVreg",argLen:1,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVVnop",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,167772158},},outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVWF",argLen:1,asm:mips.AMOVWF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVWD",argLen:1,asm:mips.AMOVWD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVVF",argLen:1,asm:mips.AMOVVF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVVD",argLen:1,asm:mips.AMOVVD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"TRUNCFW",argLen:1,asm:mips.ATRUNCFW,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"TRUNCDW",argLen:1,asm:mips.ATRUNCDW,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"TRUNCFV",argLen:1,asm:mips.ATRUNCFV,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"TRUNCDV",argLen:1,asm:mips.ATRUNCDV,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVFD",argLen:1,asm:mips.AMOVFD,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"MOVDF",argLen:1,asm:mips.AMOVDF,reg:regInfo{inputs:[]inputInfo{{0,1152921504338411520},},outputs:[]outputInfo{{0,1152921504338411520},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:4611686018393833470,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,4194304},{0,201326590},},clobbers:4611686018393833470,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,167772158},},clobbers:4611686018393833470,},}, {name:"DUFFZERO",auxType:auxInt64,argLen:2,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,167772158},},clobbers:134217730,},}, {name:"LoweredZero",auxType:auxInt64,argLen:3,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,167772158},},clobbers:2,},}, {name:"LoweredMove",auxType:auxInt64,argLen:4,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,4},{1,2},{2,167772158},},clobbers:6,},}, {name:"LoweredAtomicLoad32",argLen:2,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicLoad64",argLen:2,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicStore32",argLen:3,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"LoweredAtomicStore64",argLen:3,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},},}, {name:"LoweredAtomicStorezero32",argLen:2,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"LoweredAtomicStorezero64",argLen:2,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},},}, {name:"LoweredAtomicExchange32",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicExchange64",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicAdd32",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicAdd64",argLen:3,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicAddconst32",auxType:auxInt32,argLen:2,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicAddconst64",auxType:auxInt64,argLen:2,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicCas32",argLen:4,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{2,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredAtomicCas64",argLen:4,resultNotInArgs:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,234881022},{2,234881022},{0,4611686018695823358},},outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredNilCheck",argLen:2,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,234881022},},},}, {name:"FPFlagTrue",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,167772158},},},}, {name:"FPFlagFalse",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,167772158},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,4194304},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,167772158},},},}, {name:"MOVVconvert",argLen:2,asm:mips.AMOVV,reg:regInfo{inputs:[]inputInfo{{0,234881022},},outputs:[]outputInfo{{0,167772158},},},}, {name:"ADD",argLen:2,commutative:true,asm:ppc64.AADD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ADDconst",auxType:auxInt64,argLen:1,asm:ppc64.AADD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FADD",argLen:2,commutative:true,asm:ppc64.AFADD,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FADDS",argLen:2,commutative:true,asm:ppc64.AFADDS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"SUB",argLen:2,asm:ppc64.ASUB,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FSUB",argLen:2,asm:ppc64.AFSUB,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FSUBS",argLen:2,asm:ppc64.AFSUBS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"MULLD",argLen:2,commutative:true,asm:ppc64.AMULLD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MULLW",argLen:2,commutative:true,asm:ppc64.AMULLW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MULHD",argLen:2,commutative:true,asm:ppc64.AMULHD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MULHW",argLen:2,commutative:true,asm:ppc64.AMULHW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MULHDU",argLen:2,commutative:true,asm:ppc64.AMULHDU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MULHWU",argLen:2,commutative:true,asm:ppc64.AMULHWU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FMUL",argLen:2,commutative:true,asm:ppc64.AFMUL,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMULS",argLen:2,commutative:true,asm:ppc64.AFMULS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMADD",argLen:3,asm:ppc64.AFMADD,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},{2,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMADDS",argLen:3,asm:ppc64.AFMADDS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},{2,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMSUB",argLen:3,asm:ppc64.AFMSUB,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},{2,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMSUBS",argLen:3,asm:ppc64.AFMSUBS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},{2,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"SRAD",argLen:2,asm:ppc64.ASRAD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRAW",argLen:2,asm:ppc64.ASRAW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRD",argLen:2,asm:ppc64.ASRD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRW",argLen:2,asm:ppc64.ASRW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SLD",argLen:2,asm:ppc64.ASLD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SLW",argLen:2,asm:ppc64.ASLW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ROTL",argLen:2,asm:ppc64.AROTL,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ROTLW",argLen:2,asm:ppc64.AROTLW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ADDconstForCarry",auxType:auxInt16,argLen:1,asm:ppc64.AADDC,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},clobbers:2147483648,},}, {name:"MaskIfNotCarry",argLen:1,asm:ppc64.AADDME,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRADconst",auxType:auxInt64,argLen:1,asm:ppc64.ASRAD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRAWconst",auxType:auxInt64,argLen:1,asm:ppc64.ASRAW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRDconst",auxType:auxInt64,argLen:1,asm:ppc64.ASRD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SRWconst",auxType:auxInt64,argLen:1,asm:ppc64.ASRW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SLDconst",auxType:auxInt64,argLen:1,asm:ppc64.ASLD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"SLWconst",auxType:auxInt64,argLen:1,asm:ppc64.ASLW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ROTLconst",auxType:auxInt64,argLen:1,asm:ppc64.AROTL,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ROTLWconst",auxType:auxInt64,argLen:1,asm:ppc64.AROTLW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"CNTLZD",argLen:1,clobberFlags:true,asm:ppc64.ACNTLZD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"CNTLZW",argLen:1,clobberFlags:true,asm:ppc64.ACNTLZW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"POPCNTD",argLen:1,asm:ppc64.APOPCNTD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"POPCNTW",argLen:1,asm:ppc64.APOPCNTW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"POPCNTB",argLen:1,asm:ppc64.APOPCNTB,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FDIV",argLen:2,asm:ppc64.AFDIV,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FDIVS",argLen:2,asm:ppc64.AFDIVS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"DIVD",argLen:2,asm:ppc64.ADIVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"DIVW",argLen:2,asm:ppc64.ADIVW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"DIVDU",argLen:2,asm:ppc64.ADIVDU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"DIVWU",argLen:2,asm:ppc64.ADIVWU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FCTIDZ",argLen:1,asm:ppc64.AFCTIDZ,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCTIWZ",argLen:1,asm:ppc64.AFCTIWZ,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCFID",argLen:1,asm:ppc64.AFCFID,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCFIDS",argLen:1,asm:ppc64.AFCFIDS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FRSP",argLen:1,asm:ppc64.AFRSP,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"MFVSRD",argLen:1,asm:ppc64.AMFVSRD,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MTVSRD",argLen:1,asm:ppc64.AMTVSRD,reg:regInfo{inputs:[]inputInfo{{0,1073733624},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"AND",argLen:2,commutative:true,asm:ppc64.AAND,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ANDN",argLen:2,asm:ppc64.AANDN,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"OR",argLen:2,commutative:true,asm:ppc64.AOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ORN",argLen:2,asm:ppc64.AORN,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"NOR",argLen:2,commutative:true,asm:ppc64.ANOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"XOR",argLen:2,commutative:true,asm:ppc64.AXOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"EQV",argLen:2,commutative:true,asm:ppc64.AEQV,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"NEG",argLen:1,asm:ppc64.ANEG,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FNEG",argLen:1,asm:ppc64.AFNEG,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FSQRT",argLen:1,asm:ppc64.AFSQRT,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FSQRTS",argLen:1,asm:ppc64.AFSQRTS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FFLOOR",argLen:1,asm:ppc64.AFRIM,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCEIL",argLen:1,asm:ppc64.AFRIP,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FTRUNC",argLen:1,asm:ppc64.AFRIZ,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FABS",argLen:1,asm:ppc64.AFABS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FNABS",argLen:1,asm:ppc64.AFNABS,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCPSGN",argLen:2,asm:ppc64.AFCPSGN,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"ORconst",auxType:auxInt64,argLen:1,asm:ppc64.AOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"XORconst",auxType:auxInt64,argLen:1,asm:ppc64.AXOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ANDconst",auxType:auxInt64,argLen:1,clobberFlags:true,asm:ppc64.AANDCC,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"ANDCCconst",auxType:auxInt64,argLen:1,asm:ppc64.AANDCC,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"MOVBreg",argLen:1,asm:ppc64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVBZreg",argLen:1,asm:ppc64.AMOVBZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVHreg",argLen:1,asm:ppc64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVHZreg",argLen:1,asm:ppc64.AMOVHZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVWreg",argLen:1,asm:ppc64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVWZreg",argLen:1,asm:ppc64.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVBZload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVBZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVHZload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVHZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVWZload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"FMOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMOVSload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:ppc64.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"FMOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AFMOVD,reg:regInfo{inputs:[]inputInfo{{1,576460743713488896},{0,1073733630},},},}, {name:"FMOVSstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AFMOVS,reg:regInfo{inputs:[]inputInfo{{1,576460743713488896},{0,1073733630},},},}, {name:"MOVBstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"MOVHstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"MOVWstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"MOVDstorezero",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:ppc64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"MOVDaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymAddr,asm:ppc64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,6},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"MOVDconst",auxType:auxInt64,argLen:0,rematerializeable:true,asm:ppc64.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"FMOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:ppc64.AFMOVD,reg:regInfo{outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FMOVSconst",auxType:auxFloat32,argLen:0,rematerializeable:true,asm:ppc64.AFMOVS,reg:regInfo{outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"FCMPU",argLen:2,asm:ppc64.AFCMPU,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},{1,576460743713488896},},},}, {name:"CMP",argLen:2,asm:ppc64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"CMPU",argLen:2,asm:ppc64.ACMPU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"CMPW",argLen:2,asm:ppc64.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"CMPWU",argLen:2,asm:ppc64.ACMPWU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"CMPconst",auxType:auxInt64,argLen:1,asm:ppc64.ACMP,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"CMPUconst",auxType:auxInt64,argLen:1,asm:ppc64.ACMPU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"CMPWconst",auxType:auxInt32,argLen:1,asm:ppc64.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"CMPWUconst",auxType:auxInt32,argLen:1,asm:ppc64.ACMPWU,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},},}, {name:"Equal",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"NotEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"LessThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"FLessThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"LessEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"FLessEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"GreaterThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"FGreaterThan",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"GreaterEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"FGreaterEqual",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,2048},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredNilCheck",argLen:2,clobberFlags:true,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},clobbers:2147483648,},}, {name:"LoweredRound32F",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"LoweredRound64F",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,576460743713488896},},outputs:[]outputInfo{{0,576460743713488896},},},}, {name:"MOVDconvert",argLen:2,asm:ppc64.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:576460745860964344,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,4096},{1,2048},},clobbers:576460745860964344,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,4096},},clobbers:576460745860964344,},}, {name:"LoweredZero",auxType:auxInt64,argLen:2,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,8},},clobbers:8,},}, {name:"LoweredMove",auxType:auxInt64,argLen:3,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,8},{1,16},},clobbers:1944,},}, {name:"LoweredAtomicStore32",argLen:3,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"LoweredAtomicStore64",argLen:3,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"LoweredAtomicLoad32",argLen:2,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicLoad64",argLen:2,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicLoadPtr",argLen:2,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicAdd32",argLen:3,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicAdd64",argLen:3,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicExchange32",argLen:3,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicExchange64",argLen:3,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicCas64",argLen:4,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{2,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicCas32",argLen:4,resultNotInArgs:true,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,reg:regInfo{inputs:[]inputInfo{{1,1073733624},{2,1073733624},{0,1073733630},},outputs:[]outputInfo{{0,1073733624},},},}, {name:"LoweredAtomicAnd8",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:ppc64.AAND,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"LoweredAtomicOr8",argLen:3,faultOnNilArg0:true,hasSideEffects:true,asm:ppc64.AOR,reg:regInfo{inputs:[]inputInfo{{0,1073733630},{1,1073733630},},},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT",argLen:0,reg:regInfo{},}, {name:"FlagGT",argLen:0,reg:regInfo{},}, {name:"FADDS",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AFADDS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FADD",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AFADD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FSUBS",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AFSUBS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FSUB",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AFSUB,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMULS",argLen:2,commutative:true,resultInArg0:true,asm:s390x.AFMULS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMUL",argLen:2,commutative:true,resultInArg0:true,asm:s390x.AFMUL,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FDIVS",argLen:2,resultInArg0:true,asm:s390x.AFDIVS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FDIV",argLen:2,resultInArg0:true,asm:s390x.AFDIV,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FNEGS",argLen:1,clobberFlags:true,asm:s390x.AFNEGS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FNEG",argLen:1,clobberFlags:true,asm:s390x.AFNEG,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMADDS",argLen:3,resultInArg0:true,asm:s390x.AFMADDS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMADD",argLen:3,resultInArg0:true,asm:s390x.AFMADD,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMSUBS",argLen:3,resultInArg0:true,asm:s390x.AFMSUBS,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMSUB",argLen:3,resultInArg0:true,asm:s390x.AFMSUB,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},{2,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LPDFR",argLen:1,asm:s390x.ALPDFR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LNDFR",argLen:1,asm:s390x.ALNDFR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CPSDR",argLen:2,asm:s390x.ACPSDR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FIDBR",auxType:auxInt8,argLen:1,asm:s390x.AFIDBR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVSload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVDload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVSconst",auxType:auxFloat32,argLen:0,rematerializeable:true,asm:s390x.AFMOVS,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVDconst",auxType:auxFloat64,argLen:0,rematerializeable:true,asm:s390x.AFMOVD,reg:regInfo{outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVSloadidx",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:s390x.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVDloadidx",auxType:auxSymOff,argLen:3,symEffect:SymRead,asm:s390x.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"FMOVSstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,4294901760},},},}, {name:"FMOVDstore",auxType:auxSymOff,argLen:3,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,4294901760},},},}, {name:"FMOVSstoreidx",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:s390x.AFMOVS,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,4294901760},},},}, {name:"FMOVDstoreidx",auxType:auxSymOff,argLen:4,symEffect:SymWrite,asm:s390x.AFMOVD,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,4294901760},},},}, {name:"ADD",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AADD,reg:regInfo{inputs:[]inputInfo{{1,21503},{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDW",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AADDW,reg:regInfo{inputs:[]inputInfo{{1,21503},{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDconst",auxType:auxInt32,argLen:1,clobberFlags:true,asm:s390x.AADD,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDWconst",auxType:auxInt32,argLen:1,clobberFlags:true,asm:s390x.AADDW,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AADD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"ADDWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AADDW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUB",argLen:2,clobberFlags:true,asm:s390x.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBW",argLen:2,clobberFlags:true,asm:s390x.ASUBW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBWconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.ASUBW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.ASUB,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"SUBWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.ASUBW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLD",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AMULLD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLW",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AMULLW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLDconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AMULLD,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLWconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AMULLW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLDload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AMULLD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULLWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AMULLW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULHD",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AMULHD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MULHDU",argLen:2,commutative:true,resultInArg0:true,clobberFlags:true,asm:s390x.AMULHDU,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"DIVD",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.ADIVD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"DIVW",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.ADIVW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"DIVDU",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.ADIVDU,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"DIVWU",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.ADIVWU,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MODD",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AMODD,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MODW",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AMODW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MODDU",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AMODDU,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MODWU",argLen:2,resultInArg0:true,clobberFlags:true,asm:s390x.AMODWU,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"AND",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDW",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AANDW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDconst",auxType:auxInt64,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDWconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AANDW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AAND,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"ANDWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AANDW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"OR",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORW",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AORW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORconst",auxType:auxInt64,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AOR,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORWconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AORW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"ORWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AORW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"XOR",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AXOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORW",argLen:2,commutative:true,clobberFlags:true,asm:s390x.AXORW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORconst",auxType:auxInt64,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AXOR,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORWconst",auxType:auxInt32,argLen:1,resultInArg0:true,clobberFlags:true,asm:s390x.AXORW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AXOR,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"XORWload",auxType:auxSymOff,argLen:3,resultInArg0:true,clobberFlags:true,faultOnNilArg1:true,symEffect:SymRead,asm:s390x.AXORW,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"CMP",argLen:2,asm:s390x.ACMP,reg:regInfo{inputs:[]inputInfo{{0,54271},{1,54271},},},}, {name:"CMPW",argLen:2,asm:s390x.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,54271},{1,54271},},},}, {name:"CMPU",argLen:2,asm:s390x.ACMPU,reg:regInfo{inputs:[]inputInfo{{0,54271},{1,54271},},},}, {name:"CMPWU",argLen:2,asm:s390x.ACMPWU,reg:regInfo{inputs:[]inputInfo{{0,54271},{1,54271},},},}, {name:"CMPconst",auxType:auxInt32,argLen:1,asm:s390x.ACMP,reg:regInfo{inputs:[]inputInfo{{0,54271},},},}, {name:"CMPWconst",auxType:auxInt32,argLen:1,asm:s390x.ACMPW,reg:regInfo{inputs:[]inputInfo{{0,54271},},},}, {name:"CMPUconst",auxType:auxInt32,argLen:1,asm:s390x.ACMPU,reg:regInfo{inputs:[]inputInfo{{0,54271},},},}, {name:"CMPWUconst",auxType:auxInt32,argLen:1,asm:s390x.ACMPWU,reg:regInfo{inputs:[]inputInfo{{0,54271},},},}, {name:"FCMPS",argLen:2,asm:s390x.ACEBR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"FCMP",argLen:2,asm:s390x.AFCMPU,reg:regInfo{inputs:[]inputInfo{{0,4294901760},{1,4294901760},},},}, {name:"SLD",argLen:2,asm:s390x.ASLD,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SLW",argLen:2,asm:s390x.ASLW,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SLDconst",auxType:auxInt8,argLen:1,asm:s390x.ASLD,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SLWconst",auxType:auxInt8,argLen:1,asm:s390x.ASLW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRD",argLen:2,asm:s390x.ASRD,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRW",argLen:2,asm:s390x.ASRW,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRDconst",auxType:auxInt8,argLen:1,asm:s390x.ASRD,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRWconst",auxType:auxInt8,argLen:1,asm:s390x.ASRW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRAD",argLen:2,clobberFlags:true,asm:s390x.ASRAD,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRAW",argLen:2,clobberFlags:true,asm:s390x.ASRAW,reg:regInfo{inputs:[]inputInfo{{1,21502},{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRADconst",auxType:auxInt8,argLen:1,clobberFlags:true,asm:s390x.ASRAD,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"SRAWconst",auxType:auxInt8,argLen:1,clobberFlags:true,asm:s390x.ASRAW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RLLGconst",auxType:auxInt8,argLen:1,asm:s390x.ARLLG,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"RLLconst",auxType:auxInt8,argLen:1,asm:s390x.ARLL,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"NEG",argLen:1,clobberFlags:true,asm:s390x.ANEG,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"NEGW",argLen:1,clobberFlags:true,asm:s390x.ANEGW,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"NOT",argLen:1,resultInArg0:true,clobberFlags:true,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"NOTW",argLen:1,resultInArg0:true,clobberFlags:true,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"FSQRT",argLen:1,asm:s390x.AFSQRT,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"SUBEcarrymask",argLen:1,asm:s390x.ASUBE,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"SUBEWcarrymask",argLen:1,asm:s390x.ASUBE,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDEQ",argLen:3,resultInArg0:true,asm:s390x.AMOVDEQ,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDNE",argLen:3,resultInArg0:true,asm:s390x.AMOVDNE,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDLT",argLen:3,resultInArg0:true,asm:s390x.AMOVDLT,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDLE",argLen:3,resultInArg0:true,asm:s390x.AMOVDLE,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDGT",argLen:3,resultInArg0:true,asm:s390x.AMOVDGT,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDGE",argLen:3,resultInArg0:true,asm:s390x.AMOVDGE,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDGTnoinv",argLen:3,resultInArg0:true,asm:s390x.AMOVDGT,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDGEnoinv",argLen:3,resultInArg0:true,asm:s390x.AMOVDGE,reg:regInfo{inputs:[]inputInfo{{0,21503},{1,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBreg",argLen:1,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBZreg",argLen:1,asm:s390x.AMOVBZ,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHreg",argLen:1,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHZreg",argLen:1,asm:s390x.AMOVHZ,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWreg",argLen:1,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWZreg",argLen:1,asm:s390x.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDreg",argLen:1,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDnop",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDconst",auxType:auxInt64,argLen:0,rematerializeable:true,asm:s390x.AMOVD,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LDGR",argLen:1,asm:s390x.ALDGR,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LGDR",argLen:1,asm:s390x.ALGDR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,21503},},},}, {name:"CFDBRA",argLen:1,asm:s390x.ACFDBRA,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,21503},},},}, {name:"CGDBRA",argLen:1,asm:s390x.ACGDBRA,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,21503},},},}, {name:"CFEBRA",argLen:1,asm:s390x.ACFEBRA,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,21503},},},}, {name:"CGEBRA",argLen:1,asm:s390x.ACGEBRA,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,21503},},},}, {name:"CEFBRA",argLen:1,asm:s390x.ACEFBRA,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CDFBRA",argLen:1,asm:s390x.ACDFBRA,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CEGBRA",argLen:1,asm:s390x.ACEGBRA,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"CDGBRA",argLen:1,asm:s390x.ACDGBRA,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LEDBR",argLen:1,asm:s390x.ALEDBR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LDEBR",argLen:1,asm:s390x.ALDEBR,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVDaddr",auxType:auxSymOff,argLen:1,rematerializeable:true,symEffect:SymRead,reg:regInfo{inputs:[]inputInfo{{0,4295000064},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDaddridx",auxType:auxSymOff,argLen:2,symEffect:SymRead,reg:regInfo{inputs:[]inputInfo{{0,4295000064},{1,54270},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBZload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVBZ,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHZload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVHZ,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWZload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWBR",argLen:1,asm:s390x.AMOVWBR,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDBR",argLen:1,asm:s390x.AMOVDBR,reg:regInfo{inputs:[]inputInfo{{0,21503},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHBRload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVHBR,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWBRload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVWBR,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDBRload",auxType:auxSymOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVDBR,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"MOVHstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"MOVWstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"MOVDstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"MOVHBRstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVHBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54271},},},}, {name:"MOVWBRstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVWBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54271},},},}, {name:"MOVDBRstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVDBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54271},},},}, {name:"MVC",auxType:auxSymValAndOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,symEffect:SymNone,asm:s390x.AMVC,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},},},}, {name:"MOVBZloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVBZ,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHZloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVHZ,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWZloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVHBRloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVHBR,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWBRloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVWBR,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDBRloadidx",auxType:auxSymOff,argLen:3,commutative:true,clobberFlags:true,symEffect:SymRead,asm:s390x.AMOVDBR,reg:regInfo{inputs:[]inputInfo{{1,54270},{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVBstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVHstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVWstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVDstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVHBRstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVHBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVWBRstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVWBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVDBRstoreidx",auxType:auxSymOff,argLen:4,commutative:true,clobberFlags:true,symEffect:SymWrite,asm:s390x.AMOVDBR,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},{2,54271},},},}, {name:"MOVBstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVB,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},},}, {name:"MOVHstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVH,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},},}, {name:"MOVWstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},},}, {name:"MOVDstoreconst",auxType:auxSymValAndOff,argLen:2,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},},}, {name:"CLEAR",auxType:auxSymValAndOff,argLen:2,clobberFlags:true,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ACLEAR,reg:regInfo{inputs:[]inputInfo{{0,21502},},},}, {name:"CALLstatic",auxType:auxSymOff,argLen:1,clobberFlags:true,call:true,symEffect:SymNone,reg:regInfo{clobbers:4294923263,},}, {name:"CALLclosure",auxType:auxInt64,argLen:3,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{1,4096},{0,54270},},clobbers:4294923263,},}, {name:"CALLinter",auxType:auxInt64,argLen:2,clobberFlags:true,call:true,reg:regInfo{inputs:[]inputInfo{{0,21502},},clobbers:4294923263,},}, {name:"InvertFlags",argLen:1,reg:regInfo{},}, {name:"LoweredGetG",argLen:1,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LoweredGetClosurePtr",argLen:0,reg:regInfo{outputs:[]outputInfo{{0,4096},},},}, {name:"LoweredGetCallerSP",argLen:0,rematerializeable:true,reg:regInfo{outputs:[]outputInfo{{0,21503},},},}, {name:"LoweredNilCheck",argLen:2,clobberFlags:true,nilCheck:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,54270},},},}, {name:"LoweredRound32F",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"LoweredRound64F",argLen:1,resultInArg0:true,reg:regInfo{inputs:[]inputInfo{{0,4294901760},},outputs:[]outputInfo{{0,4294901760},},},}, {name:"MOVDconvert",argLen:2,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"FlagEQ",argLen:0,reg:regInfo{},}, {name:"FlagLT",argLen:0,reg:regInfo{},}, {name:"FlagGT",argLen:0,reg:regInfo{},}, {name:"MOVWZatomicload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVWZ,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVDatomicload",auxType:auxSymOff,argLen:2,faultOnNilArg0:true,symEffect:SymRead,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},},outputs:[]outputInfo{{0,21503},},},}, {name:"MOVWatomicstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymWrite,asm:s390x.AMOVW,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"MOVDatomicstore",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymWrite,asm:s390x.AMOVD,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},},}, {name:"LAA",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ALAA,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"LAAG",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ALAAG,reg:regInfo{inputs:[]inputInfo{{0,4295021566},{1,54271},},outputs:[]outputInfo{{0,21503},},},}, {name:"AddTupleFirst32",argLen:2,reg:regInfo{},}, {name:"AddTupleFirst64",argLen:2,reg:regInfo{},}, {name:"LoweredAtomicCas32",auxType:auxSymOff,argLen:4,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ACS,reg:regInfo{inputs:[]inputInfo{{1,1},{0,54270},{2,54271},},clobbers:1,outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"LoweredAtomicCas64",auxType:auxSymOff,argLen:4,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ACSG,reg:regInfo{inputs:[]inputInfo{{1,1},{0,54270},{2,54271},},clobbers:1,outputs:[]outputInfo{{1,0},{0,21503},},},}, {name:"LoweredAtomicExchange32",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ACS,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},},outputs:[]outputInfo{{1,0},{0,1},},},}, {name:"LoweredAtomicExchange64",auxType:auxSymOff,argLen:3,clobberFlags:true,faultOnNilArg0:true,hasSideEffects:true,symEffect:SymRdWr,asm:s390x.ACSG,reg:regInfo{inputs:[]inputInfo{{0,54270},{1,54270},},outputs:[]outputInfo{{1,0},{0,1},},},}, {name:"FLOGR",argLen:1,clobberFlags:true,asm:s390x.AFLOGR,reg:regInfo{inputs:[]inputInfo{{0,21503},},clobbers:2,outputs:[]outputInfo{{0,1},},},}, {name:"STMG2",auxType:auxSymOff,argLen:4,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMG,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{0,54270},},},}, {name:"STMG3",auxType:auxSymOff,argLen:5,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMG,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{3,8},{0,54270},},},}, {name:"STMG4",auxType:auxSymOff,argLen:6,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMG,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{3,8},{4,16},{0,54270},},},}, {name:"STM2",auxType:auxSymOff,argLen:4,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMY,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{0,54270},},},}, {name:"STM3",auxType:auxSymOff,argLen:5,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMY,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{3,8},{0,54270},},},}, {name:"STM4",auxType:auxSymOff,argLen:6,faultOnNilArg0:true,symEffect:SymWrite,asm:s390x.ASTMY,reg:regInfo{inputs:[]inputInfo{{1,2},{2,4},{3,8},{4,16},{0,54270},},},}, {name:"LoweredMove",auxType:auxInt64,argLen:4,clobberFlags:true,faultOnNilArg0:true,faultOnNilArg1:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,4},{2,54271},},clobbers:6,},}, {name:"LoweredZero",auxType:auxInt64,argLen:3,clobberFlags:true,faultOnNilArg0:true,reg:regInfo{inputs:[]inputInfo{{0,2},{1,54271},},clobbers:2,},}, {name:"Add8",argLen:2,commutative:true,generic:true,}, {name:"Add16",argLen:2,commutative:true,generic:true,}, {name:"Add32",argLen:2,commutative:true,generic:true,}, {name:"Add64",argLen:2,commutative:true,generic:true,}, {name:"AddPtr",argLen:2,generic:true,}, {name:"Add32F",argLen:2,commutative:true,generic:true,}, {name:"Add64F",argLen:2,commutative:true,generic:true,}, {name:"Sub8",argLen:2,generic:true,}, {name:"Sub16",argLen:2,generic:true,}, {name:"Sub32",argLen:2,generic:true,}, {name:"Sub64",argLen:2,generic:true,}, {name:"SubPtr",argLen:2,generic:true,}, {name:"Sub32F",argLen:2,generic:true,}, {name:"Sub64F",argLen:2,generic:true,}, {name:"Mul8",argLen:2,commutative:true,generic:true,}, {name:"Mul16",argLen:2,commutative:true,generic:true,}, {name:"Mul32",argLen:2,commutative:true,generic:true,}, {name:"Mul64",argLen:2,commutative:true,generic:true,}, {name:"Mul32F",argLen:2,commutative:true,generic:true,}, {name:"Mul64F",argLen:2,commutative:true,generic:true,}, {name:"Div32F",argLen:2,generic:true,}, {name:"Div64F",argLen:2,generic:true,}, {name:"Hmul32",argLen:2,commutative:true,generic:true,}, {name:"Hmul32u",argLen:2,commutative:true,generic:true,}, {name:"Hmul64",argLen:2,commutative:true,generic:true,}, {name:"Hmul64u",argLen:2,commutative:true,generic:true,}, {name:"Mul32uhilo",argLen:2,commutative:true,generic:true,}, {name:"Mul64uhilo",argLen:2,commutative:true,generic:true,}, {name:"Avg32u",argLen:2,generic:true,}, {name:"Avg64u",argLen:2,generic:true,}, {name:"Div8",argLen:2,generic:true,}, {name:"Div8u",argLen:2,generic:true,}, {name:"Div16",argLen:2,generic:true,}, {name:"Div16u",argLen:2,generic:true,}, {name:"Div32",argLen:2,generic:true,}, {name:"Div32u",argLen:2,generic:true,}, {name:"Div64",argLen:2,generic:true,}, {name:"Div64u",argLen:2,generic:true,}, {name:"Div128u",argLen:3,generic:true,}, {name:"Mod8",argLen:2,generic:true,}, {name:"Mod8u",argLen:2,generic:true,}, {name:"Mod16",argLen:2,generic:true,}, {name:"Mod16u",argLen:2,generic:true,}, {name:"Mod32",argLen:2,generic:true,}, {name:"Mod32u",argLen:2,generic:true,}, {name:"Mod64",argLen:2,generic:true,}, {name:"Mod64u",argLen:2,generic:true,}, {name:"And8",argLen:2,commutative:true,generic:true,}, {name:"And16",argLen:2,commutative:true,generic:true,}, {name:"And32",argLen:2,commutative:true,generic:true,}, {name:"And64",argLen:2,commutative:true,generic:true,}, {name:"Or8",argLen:2,commutative:true,generic:true,}, {name:"Or16",argLen:2,commutative:true,generic:true,}, {name:"Or32",argLen:2,commutative:true,generic:true,}, {name:"Or64",argLen:2,commutative:true,generic:true,}, {name:"Xor8",argLen:2,commutative:true,generic:true,}, {name:"Xor16",argLen:2,commutative:true,generic:true,}, {name:"Xor32",argLen:2,commutative:true,generic:true,}, {name:"Xor64",argLen:2,commutative:true,generic:true,}, {name:"Lsh8x8",argLen:2,generic:true,}, {name:"Lsh8x16",argLen:2,generic:true,}, {name:"Lsh8x32",argLen:2,generic:true,}, {name:"Lsh8x64",argLen:2,generic:true,}, {name:"Lsh16x8",argLen:2,generic:true,}, {name:"Lsh16x16",argLen:2,generic:true,}, {name:"Lsh16x32",argLen:2,generic:true,}, {name:"Lsh16x64",argLen:2,generic:true,}, {name:"Lsh32x8",argLen:2,generic:true,}, {name:"Lsh32x16",argLen:2,generic:true,}, {name:"Lsh32x32",argLen:2,generic:true,}, {name:"Lsh32x64",argLen:2,generic:true,}, {name:"Lsh64x8",argLen:2,generic:true,}, {name:"Lsh64x16",argLen:2,generic:true,}, {name:"Lsh64x32",argLen:2,generic:true,}, {name:"Lsh64x64",argLen:2,generic:true,}, {name:"Rsh8x8",argLen:2,generic:true,}, {name:"Rsh8x16",argLen:2,generic:true,}, {name:"Rsh8x32",argLen:2,generic:true,}, {name:"Rsh8x64",argLen:2,generic:true,}, {name:"Rsh16x8",argLen:2,generic:true,}, {name:"Rsh16x16",argLen:2,generic:true,}, {name:"Rsh16x32",argLen:2,generic:true,}, {name:"Rsh16x64",argLen:2,generic:true,}, {name:"Rsh32x8",argLen:2,generic:true,}, {name:"Rsh32x16",argLen:2,generic:true,}, {name:"Rsh32x32",argLen:2,generic:true,}, {name:"Rsh32x64",argLen:2,generic:true,}, {name:"Rsh64x8",argLen:2,generic:true,}, {name:"Rsh64x16",argLen:2,generic:true,}, {name:"Rsh64x32",argLen:2,generic:true,}, {name:"Rsh64x64",argLen:2,generic:true,}, {name:"Rsh8Ux8",argLen:2,generic:true,}, {name:"Rsh8Ux16",argLen:2,generic:true,}, {name:"Rsh8Ux32",argLen:2,generic:true,}, {name:"Rsh8Ux64",argLen:2,generic:true,}, {name:"Rsh16Ux8",argLen:2,generic:true,}, {name:"Rsh16Ux16",argLen:2,generic:true,}, {name:"Rsh16Ux32",argLen:2,generic:true,}, {name:"Rsh16Ux64",argLen:2,generic:true,}, {name:"Rsh32Ux8",argLen:2,generic:true,}, {name:"Rsh32Ux16",argLen:2,generic:true,}, {name:"Rsh32Ux32",argLen:2,generic:true,}, {name:"Rsh32Ux64",argLen:2,generic:true,}, {name:"Rsh64Ux8",argLen:2,generic:true,}, {name:"Rsh64Ux16",argLen:2,generic:true,}, {name:"Rsh64Ux32",argLen:2,generic:true,}, {name:"Rsh64Ux64",argLen:2,generic:true,}, {name:"Eq8",argLen:2,commutative:true,generic:true,}, {name:"Eq16",argLen:2,commutative:true,generic:true,}, {name:"Eq32",argLen:2,commutative:true,generic:true,}, {name:"Eq64",argLen:2,commutative:true,generic:true,}, {name:"EqPtr",argLen:2,commutative:true,generic:true,}, {name:"EqInter",argLen:2,generic:true,}, {name:"EqSlice",argLen:2,generic:true,}, {name:"Eq32F",argLen:2,commutative:true,generic:true,}, {name:"Eq64F",argLen:2,commutative:true,generic:true,}, {name:"Neq8",argLen:2,commutative:true,generic:true,}, {name:"Neq16",argLen:2,commutative:true,generic:true,}, {name:"Neq32",argLen:2,commutative:true,generic:true,}, {name:"Neq64",argLen:2,commutative:true,generic:true,}, {name:"NeqPtr",argLen:2,commutative:true,generic:true,}, {name:"NeqInter",argLen:2,generic:true,}, {name:"NeqSlice",argLen:2,generic:true,}, {name:"Neq32F",argLen:2,commutative:true,generic:true,}, {name:"Neq64F",argLen:2,commutative:true,generic:true,}, {name:"Less8",argLen:2,generic:true,}, {name:"Less8U",argLen:2,generic:true,}, {name:"Less16",argLen:2,generic:true,}, {name:"Less16U",argLen:2,generic:true,}, {name:"Less32",argLen:2,generic:true,}, {name:"Less32U",argLen:2,generic:true,}, {name:"Less64",argLen:2,generic:true,}, {name:"Less64U",argLen:2,generic:true,}, {name:"Less32F",argLen:2,generic:true,}, {name:"Less64F",argLen:2,generic:true,}, {name:"Leq8",argLen:2,generic:true,}, {name:"Leq8U",argLen:2,generic:true,}, {name:"Leq16",argLen:2,generic:true,}, {name:"Leq16U",argLen:2,generic:true,}, {name:"Leq32",argLen:2,generic:true,}, {name:"Leq32U",argLen:2,generic:true,}, {name:"Leq64",argLen:2,generic:true,}, {name:"Leq64U",argLen:2,generic:true,}, {name:"Leq32F",argLen:2,generic:true,}, {name:"Leq64F",argLen:2,generic:true,}, {name:"Greater8",argLen:2,generic:true,}, {name:"Greater8U",argLen:2,generic:true,}, {name:"Greater16",argLen:2,generic:true,}, {name:"Greater16U",argLen:2,generic:true,}, {name:"Greater32",argLen:2,generic:true,}, {name:"Greater32U",argLen:2,generic:true,}, {name:"Greater64",argLen:2,generic:true,}, {name:"Greater64U",argLen:2,generic:true,}, {name:"Greater32F",argLen:2,generic:true,}, {name:"Greater64F",argLen:2,generic:true,}, {name:"Geq8",argLen:2,generic:true,}, {name:"Geq8U",argLen:2,generic:true,}, {name:"Geq16",argLen:2,generic:true,}, {name:"Geq16U",argLen:2,generic:true,}, {name:"Geq32",argLen:2,generic:true,}, {name:"Geq32U",argLen:2,generic:true,}, {name:"Geq64",argLen:2,generic:true,}, {name:"Geq64U",argLen:2,generic:true,}, {name:"Geq32F",argLen:2,generic:true,}, {name:"Geq64F",argLen:2,generic:true,}, {name:"AndB",argLen:2,commutative:true,generic:true,}, {name:"OrB",argLen:2,commutative:true,generic:true,}, {name:"EqB",argLen:2,commutative:true,generic:true,}, {name:"NeqB",argLen:2,commutative:true,generic:true,}, {name:"Not",argLen:1,generic:true,}, {name:"Neg8",argLen:1,generic:true,}, {name:"Neg16",argLen:1,generic:true,}, {name:"Neg32",argLen:1,generic:true,}, {name:"Neg64",argLen:1,generic:true,}, {name:"Neg32F",argLen:1,generic:true,}, {name:"Neg64F",argLen:1,generic:true,}, {name:"Com8",argLen:1,generic:true,}, {name:"Com16",argLen:1,generic:true,}, {name:"Com32",argLen:1,generic:true,}, {name:"Com64",argLen:1,generic:true,}, {name:"Ctz32",argLen:1,generic:true,}, {name:"Ctz64",argLen:1,generic:true,}, {name:"BitLen32",argLen:1,generic:true,}, {name:"BitLen64",argLen:1,generic:true,}, {name:"Bswap32",argLen:1,generic:true,}, {name:"Bswap64",argLen:1,generic:true,}, {name:"BitRev8",argLen:1,generic:true,}, {name:"BitRev16",argLen:1,generic:true,}, {name:"BitRev32",argLen:1,generic:true,}, {name:"BitRev64",argLen:1,generic:true,}, {name:"PopCount8",argLen:1,generic:true,}, {name:"PopCount16",argLen:1,generic:true,}, {name:"PopCount32",argLen:1,generic:true,}, {name:"PopCount64",argLen:1,generic:true,}, {name:"Sqrt",argLen:1,generic:true,}, {name:"Floor",argLen:1,generic:true,}, {name:"Ceil",argLen:1,generic:true,}, {name:"Trunc",argLen:1,generic:true,}, {name:"Round",argLen:1,generic:true,}, {name:"RoundToEven",argLen:1,generic:true,}, {name:"Abs",argLen:1,generic:true,}, {name:"Copysign",argLen:2,generic:true,}, {name:"Phi",argLen:-1,generic:true,}, {name:"Copy",argLen:1,generic:true,}, {name:"Convert",argLen:2,generic:true,}, {name:"ConstBool",auxType:auxBool,argLen:0,generic:true,}, {name:"ConstString",auxType:auxString,argLen:0,generic:true,}, {name:"ConstNil",argLen:0,generic:true,}, {name:"Const8",auxType:auxInt8,argLen:0,generic:true,}, {name:"Const16",auxType:auxInt16,argLen:0,generic:true,}, {name:"Const32",auxType:auxInt32,argLen:0,generic:true,}, {name:"Const64",auxType:auxInt64,argLen:0,generic:true,}, {name:"Const32F",auxType:auxFloat32,argLen:0,generic:true,}, {name:"Const64F",auxType:auxFloat64,argLen:0,generic:true,}, {name:"ConstInterface",argLen:0,generic:true,}, {name:"ConstSlice",argLen:0,generic:true,}, {name:"InitMem",argLen:0,generic:true,}, {name:"Arg",auxType:auxSymOff,argLen:0,symEffect:SymRead,generic:true,}, {name:"Addr",auxType:auxSym,argLen:1,symEffect:SymAddr,generic:true,}, {name:"SP",argLen:0,generic:true,}, {name:"SB",argLen:0,generic:true,}, {name:"Load",argLen:2,generic:true,}, {name:"Store",auxType:auxTyp,argLen:3,generic:true,}, {name:"Move",auxType:auxTypSize,argLen:3,generic:true,}, {name:"Zero",auxType:auxTypSize,argLen:2,generic:true,}, {name:"StoreWB",auxType:auxTyp,argLen:3,generic:true,}, {name:"MoveWB",auxType:auxTypSize,argLen:3,generic:true,}, {name:"ZeroWB",auxType:auxTypSize,argLen:2,generic:true,}, {name:"WB",auxType:auxSym,argLen:3,symEffect:SymNone,generic:true,}, {name:"ClosureCall",auxType:auxInt64,argLen:3,call:true,generic:true,}, {name:"StaticCall",auxType:auxSymOff,argLen:1,call:true,symEffect:SymNone,generic:true,}, {name:"InterCall",auxType:auxInt64,argLen:2,call:true,generic:true,}, {name:"SignExt8to16",argLen:1,generic:true,}, {name:"SignExt8to32",argLen:1,generic:true,}, {name:"SignExt8to64",argLen:1,generic:true,}, {name:"SignExt16to32",argLen:1,generic:true,}, {name:"SignExt16to64",argLen:1,generic:true,}, {name:"SignExt32to64",argLen:1,generic:true,}, {name:"ZeroExt8to16",argLen:1,generic:true,}, {name:"ZeroExt8to32",argLen:1,generic:true,}, {name:"ZeroExt8to64",argLen:1,generic:true,}, {name:"ZeroExt16to32",argLen:1,generic:true,}, {name:"ZeroExt16to64",argLen:1,generic:true,}, {name:"ZeroExt32to64",argLen:1,generic:true,}, {name:"Trunc16to8",argLen:1,generic:true,}, {name:"Trunc32to8",argLen:1,generic:true,}, {name:"Trunc32to16",argLen:1,generic:true,}, {name:"Trunc64to8",argLen:1,generic:true,}, {name:"Trunc64to16",argLen:1,generic:true,}, {name:"Trunc64to32",argLen:1,generic:true,}, {name:"Cvt32to32F",argLen:1,generic:true,}, {name:"Cvt32to64F",argLen:1,generic:true,}, {name:"Cvt64to32F",argLen:1,generic:true,}, {name:"Cvt64to64F",argLen:1,generic:true,}, {name:"Cvt32Fto32",argLen:1,generic:true,}, {name:"Cvt32Fto64",argLen:1,generic:true,}, {name:"Cvt64Fto32",argLen:1,generic:true,}, {name:"Cvt64Fto64",argLen:1,generic:true,}, {name:"Cvt32Fto64F",argLen:1,generic:true,}, {name:"Cvt64Fto32F",argLen:1,generic:true,}, {name:"Round32F",argLen:1,generic:true,}, {name:"Round64F",argLen:1,generic:true,}, {name:"IsNonNil",argLen:1,generic:true,}, {name:"IsInBounds",argLen:2,generic:true,}, {name:"IsSliceInBounds",argLen:2,generic:true,}, {name:"NilCheck",argLen:2,generic:true,}, {name:"GetG",argLen:1,generic:true,}, {name:"GetClosurePtr",argLen:0,generic:true,}, {name:"GetCallerPC",argLen:0,generic:true,}, {name:"GetCallerSP",argLen:0,generic:true,}, {name:"PtrIndex",argLen:2,generic:true,}, {name:"OffPtr",auxType:auxInt64,argLen:1,generic:true,}, {name:"SliceMake",argLen:3,generic:true,}, {name:"SlicePtr",argLen:1,generic:true,}, {name:"SliceLen",argLen:1,generic:true,}, {name:"SliceCap",argLen:1,generic:true,}, {name:"ComplexMake",argLen:2,generic:true,}, {name:"ComplexReal",argLen:1,generic:true,}, {name:"ComplexImag",argLen:1,generic:true,}, {name:"StringMake",argLen:2,generic:true,}, {name:"StringPtr",argLen:1,generic:true,}, {name:"StringLen",argLen:1,generic:true,}, {name:"IMake",argLen:2,generic:true,}, {name:"ITab",argLen:1,generic:true,}, {name:"IData",argLen:1,generic:true,}, {name:"StructMake0",argLen:0,generic:true,}, {name:"StructMake1",argLen:1,generic:true,}, {name:"StructMake2",argLen:2,generic:true,}, {name:"StructMake3",argLen:3,generic:true,}, {name:"StructMake4",argLen:4,generic:true,}, {name:"StructSelect",auxType:auxInt64,argLen:1,generic:true,}, {name:"ArrayMake0",argLen:0,generic:true,}, {name:"ArrayMake1",argLen:1,generic:true,}, {name:"ArraySelect",auxType:auxInt64,argLen:1,generic:true,}, {name:"StoreReg",argLen:1,generic:true,}, {name:"LoadReg",argLen:1,generic:true,}, {name:"FwdRef",auxType:auxSym,argLen:0,symEffect:SymNone,generic:true,}, {name:"Unknown",argLen:0,generic:true,}, {name:"VarDef",auxType:auxSym,argLen:1,symEffect:SymNone,generic:true,}, {name:"VarKill",auxType:auxSym,argLen:1,symEffect:SymNone,generic:true,}, {name:"VarLive",auxType:auxSym,argLen:1,symEffect:SymRead,generic:true,}, {name:"KeepAlive",argLen:2,generic:true,}, {name:"RegKill",argLen:0,generic:true,}, {name:"Int64Make",argLen:2,generic:true,}, {name:"Int64Hi",argLen:1,generic:true,}, {name:"Int64Lo",argLen:1,generic:true,}, {name:"Add32carry",argLen:2,commutative:true,generic:true,}, {name:"Add32withcarry",argLen:3,commutative:true,generic:true,}, {name:"Sub32carry",argLen:2,generic:true,}, {name:"Sub32withcarry",argLen:3,generic:true,}, {name:"Signmask",argLen:1,generic:true,}, {name:"Zeromask",argLen:1,generic:true,}, {name:"Slicemask",argLen:1,generic:true,}, {name:"Cvt32Uto32F",argLen:1,generic:true,}, {name:"Cvt32Uto64F",argLen:1,generic:true,}, {name:"Cvt32Fto32U",argLen:1,generic:true,}, {name:"Cvt64Fto32U",argLen:1,generic:true,}, {name:"Cvt64Uto32F",argLen:1,generic:true,}, {name:"Cvt64Uto64F",argLen:1,generic:true,}, {name:"Cvt32Fto64U",argLen:1,generic:true,}, {name:"Cvt64Fto64U",argLen:1,generic:true,}, {name:"Select0",argLen:1,generic:true,}, {name:"Select1",argLen:1,generic:true,}, {name:"AtomicLoad32",argLen:2,generic:true,}, {name:"AtomicLoad64",argLen:2,generic:true,}, {name:"AtomicLoadPtr",argLen:2,generic:true,}, {name:"AtomicStore32",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicStore64",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicStorePtrNoWB",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicExchange32",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicExchange64",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicAdd32",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicAdd64",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicCompareAndSwap32",argLen:4,hasSideEffects:true,generic:true,}, {name:"AtomicCompareAndSwap64",argLen:4,hasSideEffects:true,generic:true,}, {name:"AtomicAnd8",argLen:3,hasSideEffects:true,generic:true,}, {name:"AtomicOr8",argLen:3,hasSideEffects:true,generic:true,}, {name:"Clobber",auxType:auxSymOff,argLen:0,symEffect:SymNone,generic:true,} });

        public static obj.As Asm(this Op o)
        {
            return opcodeTable[o].asm;
        }
        public static @string String(this Op o)
        {
            return opcodeTable[o].name;
        }
        public static bool UsesScratch(this Op o)
        {
            return opcodeTable[o].usesScratch;
        }
        public static SymEffect SymEffect(this Op o)
        {
            return opcodeTable[o].symEffect;
        }
        public static bool IsCall(this Op o)
        {
            return opcodeTable[o].call;
        }

        private static array<Register> registers386 = new array<Register>(new Register[] { {0,x86.REG_AX,"AX"}, {1,x86.REG_CX,"CX"}, {2,x86.REG_DX,"DX"}, {3,x86.REG_BX,"BX"}, {4,x86.REGSP,"SP"}, {5,x86.REG_BP,"BP"}, {6,x86.REG_SI,"SI"}, {7,x86.REG_DI,"DI"}, {8,x86.REG_X0,"X0"}, {9,x86.REG_X1,"X1"}, {10,x86.REG_X2,"X2"}, {11,x86.REG_X3,"X3"}, {12,x86.REG_X4,"X4"}, {13,x86.REG_X5,"X5"}, {14,x86.REG_X6,"X6"}, {15,x86.REG_X7,"X7"}, {16,0,"SB"} });
        private static var gpRegMask386 = regMask(239L);
        private static var fpRegMask386 = regMask(65280L);
        private static var specialRegMask386 = regMask(0L);
        private static var framepointerReg386 = int8(5L);
        private static var linkReg386 = int8(-1L);
        private static array<Register> registersAMD64 = new array<Register>(new Register[] { {0,x86.REG_AX,"AX"}, {1,x86.REG_CX,"CX"}, {2,x86.REG_DX,"DX"}, {3,x86.REG_BX,"BX"}, {4,x86.REGSP,"SP"}, {5,x86.REG_BP,"BP"}, {6,x86.REG_SI,"SI"}, {7,x86.REG_DI,"DI"}, {8,x86.REG_R8,"R8"}, {9,x86.REG_R9,"R9"}, {10,x86.REG_R10,"R10"}, {11,x86.REG_R11,"R11"}, {12,x86.REG_R12,"R12"}, {13,x86.REG_R13,"R13"}, {14,x86.REG_R14,"R14"}, {15,x86.REG_R15,"R15"}, {16,x86.REG_X0,"X0"}, {17,x86.REG_X1,"X1"}, {18,x86.REG_X2,"X2"}, {19,x86.REG_X3,"X3"}, {20,x86.REG_X4,"X4"}, {21,x86.REG_X5,"X5"}, {22,x86.REG_X6,"X6"}, {23,x86.REG_X7,"X7"}, {24,x86.REG_X8,"X8"}, {25,x86.REG_X9,"X9"}, {26,x86.REG_X10,"X10"}, {27,x86.REG_X11,"X11"}, {28,x86.REG_X12,"X12"}, {29,x86.REG_X13,"X13"}, {30,x86.REG_X14,"X14"}, {31,x86.REG_X15,"X15"}, {32,0,"SB"} });
        private static var gpRegMaskAMD64 = regMask(65519L);
        private static var fpRegMaskAMD64 = regMask(4294901760L);
        private static var specialRegMaskAMD64 = regMask(0L);
        private static var framepointerRegAMD64 = int8(5L);
        private static var linkRegAMD64 = int8(-1L);
        private static array<Register> registersARM = new array<Register>(new Register[] { {0,arm.REG_R0,"R0"}, {1,arm.REG_R1,"R1"}, {2,arm.REG_R2,"R2"}, {3,arm.REG_R3,"R3"}, {4,arm.REG_R4,"R4"}, {5,arm.REG_R5,"R5"}, {6,arm.REG_R6,"R6"}, {7,arm.REG_R7,"R7"}, {8,arm.REG_R8,"R8"}, {9,arm.REG_R9,"R9"}, {10,arm.REGG,"g"}, {11,arm.REG_R11,"R11"}, {12,arm.REG_R12,"R12"}, {13,arm.REGSP,"SP"}, {14,arm.REG_R14,"R14"}, {15,arm.REG_R15,"R15"}, {16,arm.REG_F0,"F0"}, {17,arm.REG_F1,"F1"}, {18,arm.REG_F2,"F2"}, {19,arm.REG_F3,"F3"}, {20,arm.REG_F4,"F4"}, {21,arm.REG_F5,"F5"}, {22,arm.REG_F6,"F6"}, {23,arm.REG_F7,"F7"}, {24,arm.REG_F8,"F8"}, {25,arm.REG_F9,"F9"}, {26,arm.REG_F10,"F10"}, {27,arm.REG_F11,"F11"}, {28,arm.REG_F12,"F12"}, {29,arm.REG_F13,"F13"}, {30,arm.REG_F14,"F14"}, {31,arm.REG_F15,"F15"}, {32,0,"SB"} });
        private static var gpRegMaskARM = regMask(21503L);
        private static var fpRegMaskARM = regMask(4294901760L);
        private static var specialRegMaskARM = regMask(0L);
        private static var framepointerRegARM = int8(-1L);
        private static var linkRegARM = int8(14L);
        private static array<Register> registersARM64 = new array<Register>(new Register[] { {0,arm64.REG_R0,"R0"}, {1,arm64.REG_R1,"R1"}, {2,arm64.REG_R2,"R2"}, {3,arm64.REG_R3,"R3"}, {4,arm64.REG_R4,"R4"}, {5,arm64.REG_R5,"R5"}, {6,arm64.REG_R6,"R6"}, {7,arm64.REG_R7,"R7"}, {8,arm64.REG_R8,"R8"}, {9,arm64.REG_R9,"R9"}, {10,arm64.REG_R10,"R10"}, {11,arm64.REG_R11,"R11"}, {12,arm64.REG_R12,"R12"}, {13,arm64.REG_R13,"R13"}, {14,arm64.REG_R14,"R14"}, {15,arm64.REG_R15,"R15"}, {16,arm64.REG_R16,"R16"}, {17,arm64.REG_R17,"R17"}, {18,arm64.REG_R18,"R18"}, {19,arm64.REG_R19,"R19"}, {20,arm64.REG_R20,"R20"}, {21,arm64.REG_R21,"R21"}, {22,arm64.REG_R22,"R22"}, {23,arm64.REG_R23,"R23"}, {24,arm64.REG_R24,"R24"}, {25,arm64.REG_R25,"R25"}, {26,arm64.REG_R26,"R26"}, {27,arm64.REGG,"g"}, {28,arm64.REG_R29,"R29"}, {29,arm64.REG_R30,"R30"}, {30,arm64.REGSP,"SP"}, {31,arm64.REG_F0,"F0"}, {32,arm64.REG_F1,"F1"}, {33,arm64.REG_F2,"F2"}, {34,arm64.REG_F3,"F3"}, {35,arm64.REG_F4,"F4"}, {36,arm64.REG_F5,"F5"}, {37,arm64.REG_F6,"F6"}, {38,arm64.REG_F7,"F7"}, {39,arm64.REG_F8,"F8"}, {40,arm64.REG_F9,"F9"}, {41,arm64.REG_F10,"F10"}, {42,arm64.REG_F11,"F11"}, {43,arm64.REG_F12,"F12"}, {44,arm64.REG_F13,"F13"}, {45,arm64.REG_F14,"F14"}, {46,arm64.REG_F15,"F15"}, {47,arm64.REG_F16,"F16"}, {48,arm64.REG_F17,"F17"}, {49,arm64.REG_F18,"F18"}, {50,arm64.REG_F19,"F19"}, {51,arm64.REG_F20,"F20"}, {52,arm64.REG_F21,"F21"}, {53,arm64.REG_F22,"F22"}, {54,arm64.REG_F23,"F23"}, {55,arm64.REG_F24,"F24"}, {56,arm64.REG_F25,"F25"}, {57,arm64.REG_F26,"F26"}, {58,arm64.REG_F27,"F27"}, {59,arm64.REG_F28,"F28"}, {60,arm64.REG_F29,"F29"}, {61,arm64.REG_F30,"F30"}, {62,arm64.REG_F31,"F31"}, {63,0,"SB"} });
        private static var gpRegMaskARM64 = regMask(670826495L);
        private static var fpRegMaskARM64 = regMask(9223372034707292160L);
        private static var specialRegMaskARM64 = regMask(0L);
        private static var framepointerRegARM64 = int8(-1L);
        private static var linkRegARM64 = int8(29L);
        private static array<Register> registersMIPS = new array<Register>(new Register[] { {0,mips.REG_R0,"R0"}, {1,mips.REG_R1,"R1"}, {2,mips.REG_R2,"R2"}, {3,mips.REG_R3,"R3"}, {4,mips.REG_R4,"R4"}, {5,mips.REG_R5,"R5"}, {6,mips.REG_R6,"R6"}, {7,mips.REG_R7,"R7"}, {8,mips.REG_R8,"R8"}, {9,mips.REG_R9,"R9"}, {10,mips.REG_R10,"R10"}, {11,mips.REG_R11,"R11"}, {12,mips.REG_R12,"R12"}, {13,mips.REG_R13,"R13"}, {14,mips.REG_R14,"R14"}, {15,mips.REG_R15,"R15"}, {16,mips.REG_R16,"R16"}, {17,mips.REG_R17,"R17"}, {18,mips.REG_R18,"R18"}, {19,mips.REG_R19,"R19"}, {20,mips.REG_R20,"R20"}, {21,mips.REG_R21,"R21"}, {22,mips.REG_R22,"R22"}, {23,mips.REG_R24,"R24"}, {24,mips.REG_R25,"R25"}, {25,mips.REG_R28,"R28"}, {26,mips.REGSP,"SP"}, {27,mips.REGG,"g"}, {28,mips.REG_R31,"R31"}, {29,mips.REG_F0,"F0"}, {30,mips.REG_F2,"F2"}, {31,mips.REG_F4,"F4"}, {32,mips.REG_F6,"F6"}, {33,mips.REG_F8,"F8"}, {34,mips.REG_F10,"F10"}, {35,mips.REG_F12,"F12"}, {36,mips.REG_F14,"F14"}, {37,mips.REG_F16,"F16"}, {38,mips.REG_F18,"F18"}, {39,mips.REG_F20,"F20"}, {40,mips.REG_F22,"F22"}, {41,mips.REG_F24,"F24"}, {42,mips.REG_F26,"F26"}, {43,mips.REG_F28,"F28"}, {44,mips.REG_F30,"F30"}, {45,mips.REG_HI,"HI"}, {46,mips.REG_LO,"LO"}, {47,0,"SB"} });
        private static var gpRegMaskMIPS = regMask(335544318L);
        private static var fpRegMaskMIPS = regMask(35183835217920L);
        private static var specialRegMaskMIPS = regMask(105553116266496L);
        private static var framepointerRegMIPS = int8(-1L);
        private static var linkRegMIPS = int8(28L);
        private static array<Register> registersMIPS64 = new array<Register>(new Register[] { {0,mips.REG_R0,"R0"}, {1,mips.REG_R1,"R1"}, {2,mips.REG_R2,"R2"}, {3,mips.REG_R3,"R3"}, {4,mips.REG_R4,"R4"}, {5,mips.REG_R5,"R5"}, {6,mips.REG_R6,"R6"}, {7,mips.REG_R7,"R7"}, {8,mips.REG_R8,"R8"}, {9,mips.REG_R9,"R9"}, {10,mips.REG_R10,"R10"}, {11,mips.REG_R11,"R11"}, {12,mips.REG_R12,"R12"}, {13,mips.REG_R13,"R13"}, {14,mips.REG_R14,"R14"}, {15,mips.REG_R15,"R15"}, {16,mips.REG_R16,"R16"}, {17,mips.REG_R17,"R17"}, {18,mips.REG_R18,"R18"}, {19,mips.REG_R19,"R19"}, {20,mips.REG_R20,"R20"}, {21,mips.REG_R21,"R21"}, {22,mips.REG_R22,"R22"}, {23,mips.REG_R24,"R24"}, {24,mips.REG_R25,"R25"}, {25,mips.REGSP,"SP"}, {26,mips.REGG,"g"}, {27,mips.REG_R31,"R31"}, {28,mips.REG_F0,"F0"}, {29,mips.REG_F1,"F1"}, {30,mips.REG_F2,"F2"}, {31,mips.REG_F3,"F3"}, {32,mips.REG_F4,"F4"}, {33,mips.REG_F5,"F5"}, {34,mips.REG_F6,"F6"}, {35,mips.REG_F7,"F7"}, {36,mips.REG_F8,"F8"}, {37,mips.REG_F9,"F9"}, {38,mips.REG_F10,"F10"}, {39,mips.REG_F11,"F11"}, {40,mips.REG_F12,"F12"}, {41,mips.REG_F13,"F13"}, {42,mips.REG_F14,"F14"}, {43,mips.REG_F15,"F15"}, {44,mips.REG_F16,"F16"}, {45,mips.REG_F17,"F17"}, {46,mips.REG_F18,"F18"}, {47,mips.REG_F19,"F19"}, {48,mips.REG_F20,"F20"}, {49,mips.REG_F21,"F21"}, {50,mips.REG_F22,"F22"}, {51,mips.REG_F23,"F23"}, {52,mips.REG_F24,"F24"}, {53,mips.REG_F25,"F25"}, {54,mips.REG_F26,"F26"}, {55,mips.REG_F27,"F27"}, {56,mips.REG_F28,"F28"}, {57,mips.REG_F29,"F29"}, {58,mips.REG_F30,"F30"}, {59,mips.REG_F31,"F31"}, {60,mips.REG_HI,"HI"}, {61,mips.REG_LO,"LO"}, {62,0,"SB"} });
        private static var gpRegMaskMIPS64 = regMask(167772158L);
        private static var fpRegMaskMIPS64 = regMask(1152921504338411520L);
        private static var specialRegMaskMIPS64 = regMask(3458764513820540928L);
        private static var framepointerRegMIPS64 = int8(-1L);
        private static var linkRegMIPS64 = int8(27L);
        private static array<Register> registersPPC64 = new array<Register>(new Register[] { {0,ppc64.REG_R0,"R0"}, {1,ppc64.REGSP,"SP"}, {2,0,"SB"}, {3,ppc64.REG_R3,"R3"}, {4,ppc64.REG_R4,"R4"}, {5,ppc64.REG_R5,"R5"}, {6,ppc64.REG_R6,"R6"}, {7,ppc64.REG_R7,"R7"}, {8,ppc64.REG_R8,"R8"}, {9,ppc64.REG_R9,"R9"}, {10,ppc64.REG_R10,"R10"}, {11,ppc64.REG_R11,"R11"}, {12,ppc64.REG_R12,"R12"}, {13,ppc64.REG_R13,"R13"}, {14,ppc64.REG_R14,"R14"}, {15,ppc64.REG_R15,"R15"}, {16,ppc64.REG_R16,"R16"}, {17,ppc64.REG_R17,"R17"}, {18,ppc64.REG_R18,"R18"}, {19,ppc64.REG_R19,"R19"}, {20,ppc64.REG_R20,"R20"}, {21,ppc64.REG_R21,"R21"}, {22,ppc64.REG_R22,"R22"}, {23,ppc64.REG_R23,"R23"}, {24,ppc64.REG_R24,"R24"}, {25,ppc64.REG_R25,"R25"}, {26,ppc64.REG_R26,"R26"}, {27,ppc64.REG_R27,"R27"}, {28,ppc64.REG_R28,"R28"}, {29,ppc64.REG_R29,"R29"}, {30,ppc64.REGG,"g"}, {31,ppc64.REG_R31,"R31"}, {32,ppc64.REG_F0,"F0"}, {33,ppc64.REG_F1,"F1"}, {34,ppc64.REG_F2,"F2"}, {35,ppc64.REG_F3,"F3"}, {36,ppc64.REG_F4,"F4"}, {37,ppc64.REG_F5,"F5"}, {38,ppc64.REG_F6,"F6"}, {39,ppc64.REG_F7,"F7"}, {40,ppc64.REG_F8,"F8"}, {41,ppc64.REG_F9,"F9"}, {42,ppc64.REG_F10,"F10"}, {43,ppc64.REG_F11,"F11"}, {44,ppc64.REG_F12,"F12"}, {45,ppc64.REG_F13,"F13"}, {46,ppc64.REG_F14,"F14"}, {47,ppc64.REG_F15,"F15"}, {48,ppc64.REG_F16,"F16"}, {49,ppc64.REG_F17,"F17"}, {50,ppc64.REG_F18,"F18"}, {51,ppc64.REG_F19,"F19"}, {52,ppc64.REG_F20,"F20"}, {53,ppc64.REG_F21,"F21"}, {54,ppc64.REG_F22,"F22"}, {55,ppc64.REG_F23,"F23"}, {56,ppc64.REG_F24,"F24"}, {57,ppc64.REG_F25,"F25"}, {58,ppc64.REG_F26,"F26"}, {59,ppc64.REG_F27,"F27"}, {60,ppc64.REG_F28,"F28"}, {61,ppc64.REG_F29,"F29"}, {62,ppc64.REG_F30,"F30"}, {63,ppc64.REG_F31,"F31"} });
        private static var gpRegMaskPPC64 = regMask(1073733624L);
        private static var fpRegMaskPPC64 = regMask(576460743713488896L);
        private static var specialRegMaskPPC64 = regMask(0L);
        private static var framepointerRegPPC64 = int8(1L);
        private static var linkRegPPC64 = int8(-1L);
        private static array<Register> registersS390X = new array<Register>(new Register[] { {0,s390x.REG_R0,"R0"}, {1,s390x.REG_R1,"R1"}, {2,s390x.REG_R2,"R2"}, {3,s390x.REG_R3,"R3"}, {4,s390x.REG_R4,"R4"}, {5,s390x.REG_R5,"R5"}, {6,s390x.REG_R6,"R6"}, {7,s390x.REG_R7,"R7"}, {8,s390x.REG_R8,"R8"}, {9,s390x.REG_R9,"R9"}, {10,s390x.REG_R10,"R10"}, {11,s390x.REG_R11,"R11"}, {12,s390x.REG_R12,"R12"}, {13,s390x.REGG,"g"}, {14,s390x.REG_R14,"R14"}, {15,s390x.REGSP,"SP"}, {16,s390x.REG_F0,"F0"}, {17,s390x.REG_F1,"F1"}, {18,s390x.REG_F2,"F2"}, {19,s390x.REG_F3,"F3"}, {20,s390x.REG_F4,"F4"}, {21,s390x.REG_F5,"F5"}, {22,s390x.REG_F6,"F6"}, {23,s390x.REG_F7,"F7"}, {24,s390x.REG_F8,"F8"}, {25,s390x.REG_F9,"F9"}, {26,s390x.REG_F10,"F10"}, {27,s390x.REG_F11,"F11"}, {28,s390x.REG_F12,"F12"}, {29,s390x.REG_F13,"F13"}, {30,s390x.REG_F14,"F14"}, {31,s390x.REG_F15,"F15"}, {32,0,"SB"} });
        private static var gpRegMaskS390X = regMask(21503L);
        private static var fpRegMaskS390X = regMask(4294901760L);
        private static var specialRegMaskS390X = regMask(0L);
        private static var framepointerRegS390X = int8(-1L);
        private static var linkRegS390X = int8(14L);
    }
}}}}
