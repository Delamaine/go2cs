//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:54:43 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using io = go.io_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface funcPrinter
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter As<T>(in T target) => (funcPrinter<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter As<T>(ptr<T> target_ptr) => (funcPrinter<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter? As(object target) =>
                typeof(funcPrinter<>).CreateInterfaceHandler<funcPrinter>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class funcPrinter<T> : funcPrinter
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public funcPrinter(in T target) => m_target = target;

            public funcPrinter(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate void headerByRef(ref T value, ref Func f);
            private delegate void headerByVal(T value, ref Func f);

            private static readonly headerByRef s_headerByRef;
            private static readonly headerByVal s_headerByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void header(ref Func f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_headerByRef is null)
                {
                    s_headerByVal!(target, f);
                    return;
                }

                s_headerByRef(ref target, f);
                return;
                
            }

            private delegate void startBlockByRef(ref T value, ref Block b, bool reachable);
            private delegate void startBlockByVal(T value, ref Block b, bool reachable);

            private static readonly startBlockByRef s_startBlockByRef;
            private static readonly startBlockByVal s_startBlockByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void startBlock(ref Block b, bool reachable)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_startBlockByRef is null)
                {
                    s_startBlockByVal!(target, b, reachable);
                    return;
                }

                s_startBlockByRef(ref target, b, reachable);
                return;
                
            }

            private delegate void endBlockByRef(ref T value, ref Block b);
            private delegate void endBlockByVal(T value, ref Block b);

            private static readonly endBlockByRef s_endBlockByRef;
            private static readonly endBlockByVal s_endBlockByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void endBlock(ref Block b)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_endBlockByRef is null)
                {
                    s_endBlockByVal!(target, b);
                    return;
                }

                s_endBlockByRef(ref target, b);
                return;
                
            }

            private delegate void valueByRef(ref T value, ref Value v, bool live);
            private delegate void valueByVal(T value, ref Value v, bool live);

            private static readonly valueByRef s_valueByRef;
            private static readonly valueByVal s_valueByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void value(ref Value v, bool live)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_valueByRef is null)
                {
                    s_valueByVal!(target, v, live);
                    return;
                }

                s_valueByRef(ref target, v, live);
                return;
                
            }

            private delegate void startDepCycleByRef(ref T value);
            private delegate void startDepCycleByVal(T value);

            private static readonly startDepCycleByRef s_startDepCycleByRef;
            private static readonly startDepCycleByVal s_startDepCycleByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void startDepCycle()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_startDepCycleByRef is null)
                {
                    s_startDepCycleByVal!(target);
                    return;
                }

                s_startDepCycleByRef(ref target);
                return;
                
            }

            private delegate void endDepCycleByRef(ref T value);
            private delegate void endDepCycleByVal(T value);

            private static readonly endDepCycleByRef s_endDepCycleByRef;
            private static readonly endDepCycleByVal s_endDepCycleByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void endDepCycle()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_endDepCycleByRef is null)
                {
                    s_endDepCycleByVal!(target);
                    return;
                }

                s_endDepCycleByRef(ref target);
                return;
                
            }

            private delegate void namedByRef(ref T value, LocalSlot n, slice<ref Value> vals);
            private delegate void namedByVal(T value, LocalSlot n, slice<ref Value> vals);

            private static readonly namedByRef s_namedByRef;
            private static readonly namedByVal s_namedByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void named(LocalSlot n, slice<ref Value> vals)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_namedByRef is null)
                {
                    s_namedByVal!(target, n, vals);
                    return;
                }

                s_namedByRef(ref target, n, vals);
                return;
                
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static funcPrinter()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("header");

                if (!(extensionMethod is null))
                    s_headerByRef = extensionMethod.CreateStaticDelegate(typeof(headerByRef)) as headerByRef;

                if (s_headerByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("header");

                    if (!(extensionMethod is null))
                        s_headerByVal = extensionMethod.CreateStaticDelegate(typeof(headerByVal)) as headerByVal;
                }

                if (s_headerByRef is null && s_headerByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.header method", new Exception("header"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("startBlock");

                if (!(extensionMethod is null))
                    s_startBlockByRef = extensionMethod.CreateStaticDelegate(typeof(startBlockByRef)) as startBlockByRef;

                if (s_startBlockByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("startBlock");

                    if (!(extensionMethod is null))
                        s_startBlockByVal = extensionMethod.CreateStaticDelegate(typeof(startBlockByVal)) as startBlockByVal;
                }

                if (s_startBlockByRef is null && s_startBlockByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.startBlock method", new Exception("startBlock"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("endBlock");

                if (!(extensionMethod is null))
                    s_endBlockByRef = extensionMethod.CreateStaticDelegate(typeof(endBlockByRef)) as endBlockByRef;

                if (s_endBlockByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("endBlock");

                    if (!(extensionMethod is null))
                        s_endBlockByVal = extensionMethod.CreateStaticDelegate(typeof(endBlockByVal)) as endBlockByVal;
                }

                if (s_endBlockByRef is null && s_endBlockByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.endBlock method", new Exception("endBlock"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("value");

                if (!(extensionMethod is null))
                    s_valueByRef = extensionMethod.CreateStaticDelegate(typeof(valueByRef)) as valueByRef;

                if (s_valueByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("value");

                    if (!(extensionMethod is null))
                        s_valueByVal = extensionMethod.CreateStaticDelegate(typeof(valueByVal)) as valueByVal;
                }

                if (s_valueByRef is null && s_valueByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.value method", new Exception("value"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("startDepCycle");

                if (!(extensionMethod is null))
                    s_startDepCycleByRef = extensionMethod.CreateStaticDelegate(typeof(startDepCycleByRef)) as startDepCycleByRef;

                if (s_startDepCycleByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("startDepCycle");

                    if (!(extensionMethod is null))
                        s_startDepCycleByVal = extensionMethod.CreateStaticDelegate(typeof(startDepCycleByVal)) as startDepCycleByVal;
                }

                if (s_startDepCycleByRef is null && s_startDepCycleByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.startDepCycle method", new Exception("startDepCycle"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("endDepCycle");

                if (!(extensionMethod is null))
                    s_endDepCycleByRef = extensionMethod.CreateStaticDelegate(typeof(endDepCycleByRef)) as endDepCycleByRef;

                if (s_endDepCycleByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("endDepCycle");

                    if (!(extensionMethod is null))
                        s_endDepCycleByVal = extensionMethod.CreateStaticDelegate(typeof(endDepCycleByVal)) as endDepCycleByVal;
                }

                if (s_endDepCycleByRef is null && s_endDepCycleByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.endDepCycle method", new Exception("endDepCycle"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("named");

                if (!(extensionMethod is null))
                    s_namedByRef = extensionMethod.CreateStaticDelegate(typeof(namedByRef)) as namedByRef;

                if (s_namedByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("named");

                    if (!(extensionMethod is null))
                        s_namedByVal = extensionMethod.CreateStaticDelegate(typeof(namedByVal)) as namedByVal;
                }

                if (s_namedByRef is null && s_namedByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.named method", new Exception("named"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator funcPrinter<T>(in ptr<T> target_ptr) => new funcPrinter<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator funcPrinter<T>(in T target) => new funcPrinter<T>(target);

            // Enable comparisons between nil and funcPrinter<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(funcPrinter<T> value, NilType nil) => Activator.CreateInstance<funcPrinter<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(funcPrinter<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, funcPrinter<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, funcPrinter<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class ssa_funcPrinterExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.compile.@internal.ssa_package.funcPrinter target)
        {
            try
            {
                return ((go.cmd.compile.@internal.ssa_package.funcPrinter<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.compile.@internal.ssa_package.funcPrinter target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.compile.@internal.ssa_package.funcPrinter target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.compile.@internal.ssa_package.funcPrinter<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.compile.@internal.ssa_package.funcPrinter target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}