// run
// Code generated by gen/arithBoundaryGen.go. DO NOT EDIT.

// package main -- go2cs converted at 2020 August 29 09:30:24 UTC
// Original source: C:\Go\src\cmd\compile\internal\gc\testdata\arithBoundary.go
using fmt = go.fmt_package;
using static go.builtin;

namespace go
{
    public static partial class main_package
    {
        private partial struct utd64
        {
            public ulong a;
            public ulong b;
            public ulong add;
            public ulong sub;
            public ulong mul;
            public ulong div;
            public ulong mod;
        }
        private partial struct itd64
        {
            public long a;
            public long b;
            public long add;
            public long sub;
            public long mul;
            public long div;
            public long mod;
        }
        private partial struct utd32
        {
            public uint a;
            public uint b;
            public uint add;
            public uint sub;
            public uint mul;
            public uint div;
            public uint mod;
        }
        private partial struct itd32
        {
            public int a;
            public int b;
            public int add;
            public int sub;
            public int mul;
            public int div;
            public int mod;
        }
        private partial struct utd16
        {
            public ushort a;
            public ushort b;
            public ushort add;
            public ushort sub;
            public ushort mul;
            public ushort div;
            public ushort mod;
        }
        private partial struct itd16
        {
            public short a;
            public short b;
            public short add;
            public short sub;
            public short mul;
            public short div;
            public short mod;
        }
        private partial struct utd8
        {
            public byte a;
            public byte b;
            public byte add;
            public byte sub;
            public byte mul;
            public byte div;
            public byte mod;
        }
        private partial struct itd8
        {
            public sbyte a;
            public sbyte b;
            public sbyte add;
            public sbyte sub;
            public sbyte mul;
            public sbyte div;
            public sbyte mod;
        }

        //go:noinline
        private static ulong add_uint64_ssa(ulong a, ulong b)
        {
            return a + b;
        }

        //go:noinline
        private static ulong sub_uint64_ssa(ulong a, ulong b)
        {
            return a - b;
        }

        //go:noinline
        private static ulong div_uint64_ssa(ulong a, ulong b)
        {
            return a / b;
        }

        //go:noinline
        private static ulong mod_uint64_ssa(ulong a, ulong b)
        {
            return a % b;
        }

        //go:noinline
        private static ulong mul_uint64_ssa(ulong a, ulong b)
        {
            return a * b;
        }

        //go:noinline
        private static long add_int64_ssa(long a, long b)
        {
            return a + b;
        }

        //go:noinline
        private static long sub_int64_ssa(long a, long b)
        {
            return a - b;
        }

        //go:noinline
        private static long div_int64_ssa(long a, long b)
        {
            return a / b;
        }

        //go:noinline
        private static long mod_int64_ssa(long a, long b)
        {
            return a % b;
        }

        //go:noinline
        private static long mul_int64_ssa(long a, long b)
        {
            return a * b;
        }

        //go:noinline
        private static uint add_uint32_ssa(uint a, uint b)
        {
            return a + b;
        }

        //go:noinline
        private static uint sub_uint32_ssa(uint a, uint b)
        {
            return a - b;
        }

        //go:noinline
        private static uint div_uint32_ssa(uint a, uint b)
        {
            return a / b;
        }

        //go:noinline
        private static uint mod_uint32_ssa(uint a, uint b)
        {
            return a % b;
        }

        //go:noinline
        private static uint mul_uint32_ssa(uint a, uint b)
        {
            return a * b;
        }

        //go:noinline
        private static int add_int32_ssa(int a, int b)
        {
            return a + b;
        }

        //go:noinline
        private static int sub_int32_ssa(int a, int b)
        {
            return a - b;
        }

        //go:noinline
        private static int div_int32_ssa(int a, int b)
        {
            return a / b;
        }

        //go:noinline
        private static int mod_int32_ssa(int a, int b)
        {
            return a % b;
        }

        //go:noinline
        private static int mul_int32_ssa(int a, int b)
        {
            return a * b;
        }

        //go:noinline
        private static ushort add_uint16_ssa(ushort a, ushort b)
        {
            return a + b;
        }

        //go:noinline
        private static ushort sub_uint16_ssa(ushort a, ushort b)
        {
            return a - b;
        }

        //go:noinline
        private static ushort div_uint16_ssa(ushort a, ushort b)
        {
            return a / b;
        }

        //go:noinline
        private static ushort mod_uint16_ssa(ushort a, ushort b)
        {
            return a % b;
        }

        //go:noinline
        private static ushort mul_uint16_ssa(ushort a, ushort b)
        {
            return a * b;
        }

        //go:noinline
        private static short add_int16_ssa(short a, short b)
        {
            return a + b;
        }

        //go:noinline
        private static short sub_int16_ssa(short a, short b)
        {
            return a - b;
        }

        //go:noinline
        private static short div_int16_ssa(short a, short b)
        {
            return a / b;
        }

        //go:noinline
        private static short mod_int16_ssa(short a, short b)
        {
            return a % b;
        }

        //go:noinline
        private static short mul_int16_ssa(short a, short b)
        {
            return a * b;
        }

        //go:noinline
        private static byte add_uint8_ssa(byte a, byte b)
        {
            return a + b;
        }

        //go:noinline
        private static byte sub_uint8_ssa(byte a, byte b)
        {
            return a - b;
        }

        //go:noinline
        private static byte div_uint8_ssa(byte a, byte b)
        {
            return a / b;
        }

        //go:noinline
        private static byte mod_uint8_ssa(byte a, byte b)
        {
            return a % b;
        }

        //go:noinline
        private static byte mul_uint8_ssa(byte a, byte b)
        {
            return a * b;
        }

        //go:noinline
        private static sbyte add_int8_ssa(sbyte a, sbyte b)
        {
            return a + b;
        }

        //go:noinline
        private static sbyte sub_int8_ssa(sbyte a, sbyte b)
        {
            return a - b;
        }

        //go:noinline
        private static sbyte div_int8_ssa(sbyte a, sbyte b)
        {
            return a / b;
        }

        //go:noinline
        private static sbyte mod_int8_ssa(sbyte a, sbyte b)
        {
            return a % b;
        }

        //go:noinline
        private static sbyte mul_int8_ssa(sbyte a, sbyte b)
        {
            return a * b;
        }

        private static slice<utd64> uint64_data = new slice<utd64>(new utd64[] { utd64{a:0,b:0,add:0,sub:0,mul:0}, utd64{a:0,b:1,add:1,sub:18446744073709551615,mul:0,div:0,mod:0}, utd64{a:0,b:4294967296,add:4294967296,sub:18446744069414584320,mul:0,div:0,mod:0}, utd64{a:0,b:18446744073709551615,add:18446744073709551615,sub:1,mul:0,div:0,mod:0}, utd64{a:1,b:0,add:1,sub:1,mul:0}, utd64{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, utd64{a:1,b:4294967296,add:4294967297,sub:18446744069414584321,mul:4294967296,div:0,mod:1}, utd64{a:1,b:18446744073709551615,add:0,sub:2,mul:18446744073709551615,div:0,mod:1}, utd64{a:4294967296,b:0,add:4294967296,sub:4294967296,mul:0}, utd64{a:4294967296,b:1,add:4294967297,sub:4294967295,mul:4294967296,div:4294967296,mod:0}, utd64{a:4294967296,b:4294967296,add:8589934592,sub:0,mul:0,div:1,mod:0}, utd64{a:4294967296,b:18446744073709551615,add:4294967295,sub:4294967297,mul:18446744069414584320,div:0,mod:4294967296}, utd64{a:18446744073709551615,b:0,add:18446744073709551615,sub:18446744073709551615,mul:0}, utd64{a:18446744073709551615,b:1,add:0,sub:18446744073709551614,mul:18446744073709551615,div:18446744073709551615,mod:0}, utd64{a:18446744073709551615,b:4294967296,add:4294967295,sub:18446744069414584319,mul:18446744069414584320,div:4294967295,mod:4294967295}, utd64{a:18446744073709551615,b:18446744073709551615,add:18446744073709551614,sub:0,mul:1,div:1,mod:0} });
        private static slice<itd64> int64_data = new slice<itd64>(new itd64[] { itd64{a:-9223372036854775808,b:-9223372036854775808,add:0,sub:0,mul:0,div:1,mod:0}, itd64{a:-9223372036854775808,b:-9223372036854775807,add:1,sub:-1,mul:-9223372036854775808,div:1,mod:-1}, itd64{a:-9223372036854775808,b:-4294967296,add:9223372032559808512,sub:-9223372032559808512,mul:0,div:2147483648,mod:0}, itd64{a:-9223372036854775808,b:-1,add:9223372036854775807,sub:-9223372036854775807,mul:-9223372036854775808,div:-9223372036854775808,mod:0}, itd64{a:-9223372036854775808,b:0,add:-9223372036854775808,sub:-9223372036854775808,mul:0}, itd64{a:-9223372036854775808,b:1,add:-9223372036854775807,sub:9223372036854775807,mul:-9223372036854775808,div:-9223372036854775808,mod:0}, itd64{a:-9223372036854775808,b:4294967296,add:-9223372032559808512,sub:9223372032559808512,mul:0,div:-2147483648,mod:0}, itd64{a:-9223372036854775808,b:9223372036854775806,add:-2,sub:2,mul:0,div:-1,mod:-2}, itd64{a:-9223372036854775808,b:9223372036854775807,add:-1,sub:1,mul:-9223372036854775808,div:-1,mod:-1}, itd64{a:-9223372036854775807,b:-9223372036854775808,add:1,sub:1,mul:-9223372036854775808,div:0,mod:-9223372036854775807}, itd64{a:-9223372036854775807,b:-9223372036854775807,add:2,sub:0,mul:1,div:1,mod:0}, itd64{a:-9223372036854775807,b:-4294967296,add:9223372032559808513,sub:-9223372032559808511,mul:-4294967296,div:2147483647,mod:-4294967295}, itd64{a:-9223372036854775807,b:-1,add:-9223372036854775808,sub:-9223372036854775806,mul:9223372036854775807,div:9223372036854775807,mod:0}, itd64{a:-9223372036854775807,b:0,add:-9223372036854775807,sub:-9223372036854775807,mul:0}, itd64{a:-9223372036854775807,b:1,add:-9223372036854775806,sub:-9223372036854775808,mul:-9223372036854775807,div:-9223372036854775807,mod:0}, itd64{a:-9223372036854775807,b:4294967296,add:-9223372032559808511,sub:9223372032559808513,mul:4294967296,div:-2147483647,mod:-4294967295}, itd64{a:-9223372036854775807,b:9223372036854775806,add:-1,sub:3,mul:9223372036854775806,div:-1,mod:-1}, itd64{a:-9223372036854775807,b:9223372036854775807,add:0,sub:2,mul:-1,div:-1,mod:0}, itd64{a:-4294967296,b:-9223372036854775808,add:9223372032559808512,sub:9223372032559808512,mul:0,div:0,mod:-4294967296}, itd64{a:-4294967296,b:-9223372036854775807,add:9223372032559808513,sub:9223372032559808511,mul:-4294967296,div:0,mod:-4294967296}, itd64{a:-4294967296,b:-4294967296,add:-8589934592,sub:0,mul:0,div:1,mod:0}, itd64{a:-4294967296,b:-1,add:-4294967297,sub:-4294967295,mul:4294967296,div:4294967296,mod:0}, itd64{a:-4294967296,b:0,add:-4294967296,sub:-4294967296,mul:0}, itd64{a:-4294967296,b:1,add:-4294967295,sub:-4294967297,mul:-4294967296,div:-4294967296,mod:0}, itd64{a:-4294967296,b:4294967296,add:0,sub:-8589934592,mul:0,div:-1,mod:0}, itd64{a:-4294967296,b:9223372036854775806,add:9223372032559808510,sub:9223372032559808514,mul:8589934592,div:0,mod:-4294967296}, itd64{a:-4294967296,b:9223372036854775807,add:9223372032559808511,sub:9223372032559808513,mul:4294967296,div:0,mod:-4294967296}, itd64{a:-1,b:-9223372036854775808,add:9223372036854775807,sub:9223372036854775807,mul:-9223372036854775808,div:0,mod:-1}, itd64{a:-1,b:-9223372036854775807,add:-9223372036854775808,sub:9223372036854775806,mul:9223372036854775807,div:0,mod:-1}, itd64{a:-1,b:-4294967296,add:-4294967297,sub:4294967295,mul:4294967296,div:0,mod:-1}, itd64{a:-1,b:-1,add:-2,sub:0,mul:1,div:1,mod:0}, itd64{a:-1,b:0,add:-1,sub:-1,mul:0}, itd64{a:-1,b:1,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd64{a:-1,b:4294967296,add:4294967295,sub:-4294967297,mul:-4294967296,div:0,mod:-1}, itd64{a:-1,b:9223372036854775806,add:9223372036854775805,sub:-9223372036854775807,mul:-9223372036854775806,div:0,mod:-1}, itd64{a:-1,b:9223372036854775807,add:9223372036854775806,sub:-9223372036854775808,mul:-9223372036854775807,div:0,mod:-1}, itd64{a:0,b:-9223372036854775808,add:-9223372036854775808,sub:-9223372036854775808,mul:0,div:0,mod:0}, itd64{a:0,b:-9223372036854775807,add:-9223372036854775807,sub:9223372036854775807,mul:0,div:0,mod:0}, itd64{a:0,b:-4294967296,add:-4294967296,sub:4294967296,mul:0,div:0,mod:0}, itd64{a:0,b:-1,add:-1,sub:1,mul:0,div:0,mod:0}, itd64{a:0,b:0,add:0,sub:0,mul:0}, itd64{a:0,b:1,add:1,sub:-1,mul:0,div:0,mod:0}, itd64{a:0,b:4294967296,add:4294967296,sub:-4294967296,mul:0,div:0,mod:0}, itd64{a:0,b:9223372036854775806,add:9223372036854775806,sub:-9223372036854775806,mul:0,div:0,mod:0}, itd64{a:0,b:9223372036854775807,add:9223372036854775807,sub:-9223372036854775807,mul:0,div:0,mod:0}, itd64{a:1,b:-9223372036854775808,add:-9223372036854775807,sub:-9223372036854775807,mul:-9223372036854775808,div:0,mod:1}, itd64{a:1,b:-9223372036854775807,add:-9223372036854775806,sub:-9223372036854775808,mul:-9223372036854775807,div:0,mod:1}, itd64{a:1,b:-4294967296,add:-4294967295,sub:4294967297,mul:-4294967296,div:0,mod:1}, itd64{a:1,b:-1,add:0,sub:2,mul:-1,div:-1,mod:0}, itd64{a:1,b:0,add:1,sub:1,mul:0}, itd64{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, itd64{a:1,b:4294967296,add:4294967297,sub:-4294967295,mul:4294967296,div:0,mod:1}, itd64{a:1,b:9223372036854775806,add:9223372036854775807,sub:-9223372036854775805,mul:9223372036854775806,div:0,mod:1}, itd64{a:1,b:9223372036854775807,add:-9223372036854775808,sub:-9223372036854775806,mul:9223372036854775807,div:0,mod:1}, itd64{a:4294967296,b:-9223372036854775808,add:-9223372032559808512,sub:-9223372032559808512,mul:0,div:0,mod:4294967296}, itd64{a:4294967296,b:-9223372036854775807,add:-9223372032559808511,sub:-9223372032559808513,mul:4294967296,div:0,mod:4294967296}, itd64{a:4294967296,b:-4294967296,add:0,sub:8589934592,mul:0,div:-1,mod:0}, itd64{a:4294967296,b:-1,add:4294967295,sub:4294967297,mul:-4294967296,div:-4294967296,mod:0}, itd64{a:4294967296,b:0,add:4294967296,sub:4294967296,mul:0}, itd64{a:4294967296,b:1,add:4294967297,sub:4294967295,mul:4294967296,div:4294967296,mod:0}, itd64{a:4294967296,b:4294967296,add:8589934592,sub:0,mul:0,div:1,mod:0}, itd64{a:4294967296,b:9223372036854775806,add:-9223372032559808514,sub:-9223372032559808510,mul:-8589934592,div:0,mod:4294967296}, itd64{a:4294967296,b:9223372036854775807,add:-9223372032559808513,sub:-9223372032559808511,mul:-4294967296,div:0,mod:4294967296}, itd64{a:9223372036854775806,b:-9223372036854775808,add:-2,sub:-2,mul:0,div:0,mod:9223372036854775806}, itd64{a:9223372036854775806,b:-9223372036854775807,add:-1,sub:-3,mul:9223372036854775806,div:0,mod:9223372036854775806}, itd64{a:9223372036854775806,b:-4294967296,add:9223372032559808510,sub:-9223372032559808514,mul:8589934592,div:-2147483647,mod:4294967294}, itd64{a:9223372036854775806,b:-1,add:9223372036854775805,sub:9223372036854775807,mul:-9223372036854775806,div:-9223372036854775806,mod:0}, itd64{a:9223372036854775806,b:0,add:9223372036854775806,sub:9223372036854775806,mul:0}, itd64{a:9223372036854775806,b:1,add:9223372036854775807,sub:9223372036854775805,mul:9223372036854775806,div:9223372036854775806,mod:0}, itd64{a:9223372036854775806,b:4294967296,add:-9223372032559808514,sub:9223372032559808510,mul:-8589934592,div:2147483647,mod:4294967294}, itd64{a:9223372036854775806,b:9223372036854775806,add:-4,sub:0,mul:4,div:1,mod:0}, itd64{a:9223372036854775806,b:9223372036854775807,add:-3,sub:-1,mul:-9223372036854775806,div:0,mod:9223372036854775806}, itd64{a:9223372036854775807,b:-9223372036854775808,add:-1,sub:-1,mul:-9223372036854775808,div:0,mod:9223372036854775807}, itd64{a:9223372036854775807,b:-9223372036854775807,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd64{a:9223372036854775807,b:-4294967296,add:9223372032559808511,sub:-9223372032559808513,mul:4294967296,div:-2147483647,mod:4294967295}, itd64{a:9223372036854775807,b:-1,add:9223372036854775806,sub:-9223372036854775808,mul:-9223372036854775807,div:-9223372036854775807,mod:0}, itd64{a:9223372036854775807,b:0,add:9223372036854775807,sub:9223372036854775807,mul:0}, itd64{a:9223372036854775807,b:1,add:-9223372036854775808,sub:9223372036854775806,mul:9223372036854775807,div:9223372036854775807,mod:0}, itd64{a:9223372036854775807,b:4294967296,add:-9223372032559808513,sub:9223372032559808511,mul:-4294967296,div:2147483647,mod:4294967295}, itd64{a:9223372036854775807,b:9223372036854775806,add:-3,sub:1,mul:-9223372036854775806,div:1,mod:1}, itd64{a:9223372036854775807,b:9223372036854775807,add:-2,sub:0,mul:1,div:1,mod:0} });
        private static slice<utd32> uint32_data = new slice<utd32>(new utd32[] { utd32{a:0,b:0,add:0,sub:0,mul:0}, utd32{a:0,b:1,add:1,sub:4294967295,mul:0,div:0,mod:0}, utd32{a:0,b:4294967295,add:4294967295,sub:1,mul:0,div:0,mod:0}, utd32{a:1,b:0,add:1,sub:1,mul:0}, utd32{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, utd32{a:1,b:4294967295,add:0,sub:2,mul:4294967295,div:0,mod:1}, utd32{a:4294967295,b:0,add:4294967295,sub:4294967295,mul:0}, utd32{a:4294967295,b:1,add:0,sub:4294967294,mul:4294967295,div:4294967295,mod:0}, utd32{a:4294967295,b:4294967295,add:4294967294,sub:0,mul:1,div:1,mod:0} });
        private static slice<itd32> int32_data = new slice<itd32>(new itd32[] { itd32{a:-2147483648,b:-2147483648,add:0,sub:0,mul:0,div:1,mod:0}, itd32{a:-2147483648,b:-2147483647,add:1,sub:-1,mul:-2147483648,div:1,mod:-1}, itd32{a:-2147483648,b:-1,add:2147483647,sub:-2147483647,mul:-2147483648,div:-2147483648,mod:0}, itd32{a:-2147483648,b:0,add:-2147483648,sub:-2147483648,mul:0}, itd32{a:-2147483648,b:1,add:-2147483647,sub:2147483647,mul:-2147483648,div:-2147483648,mod:0}, itd32{a:-2147483648,b:2147483647,add:-1,sub:1,mul:-2147483648,div:-1,mod:-1}, itd32{a:-2147483647,b:-2147483648,add:1,sub:1,mul:-2147483648,div:0,mod:-2147483647}, itd32{a:-2147483647,b:-2147483647,add:2,sub:0,mul:1,div:1,mod:0}, itd32{a:-2147483647,b:-1,add:-2147483648,sub:-2147483646,mul:2147483647,div:2147483647,mod:0}, itd32{a:-2147483647,b:0,add:-2147483647,sub:-2147483647,mul:0}, itd32{a:-2147483647,b:1,add:-2147483646,sub:-2147483648,mul:-2147483647,div:-2147483647,mod:0}, itd32{a:-2147483647,b:2147483647,add:0,sub:2,mul:-1,div:-1,mod:0}, itd32{a:-1,b:-2147483648,add:2147483647,sub:2147483647,mul:-2147483648,div:0,mod:-1}, itd32{a:-1,b:-2147483647,add:-2147483648,sub:2147483646,mul:2147483647,div:0,mod:-1}, itd32{a:-1,b:-1,add:-2,sub:0,mul:1,div:1,mod:0}, itd32{a:-1,b:0,add:-1,sub:-1,mul:0}, itd32{a:-1,b:1,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd32{a:-1,b:2147483647,add:2147483646,sub:-2147483648,mul:-2147483647,div:0,mod:-1}, itd32{a:0,b:-2147483648,add:-2147483648,sub:-2147483648,mul:0,div:0,mod:0}, itd32{a:0,b:-2147483647,add:-2147483647,sub:2147483647,mul:0,div:0,mod:0}, itd32{a:0,b:-1,add:-1,sub:1,mul:0,div:0,mod:0}, itd32{a:0,b:0,add:0,sub:0,mul:0}, itd32{a:0,b:1,add:1,sub:-1,mul:0,div:0,mod:0}, itd32{a:0,b:2147483647,add:2147483647,sub:-2147483647,mul:0,div:0,mod:0}, itd32{a:1,b:-2147483648,add:-2147483647,sub:-2147483647,mul:-2147483648,div:0,mod:1}, itd32{a:1,b:-2147483647,add:-2147483646,sub:-2147483648,mul:-2147483647,div:0,mod:1}, itd32{a:1,b:-1,add:0,sub:2,mul:-1,div:-1,mod:0}, itd32{a:1,b:0,add:1,sub:1,mul:0}, itd32{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, itd32{a:1,b:2147483647,add:-2147483648,sub:-2147483646,mul:2147483647,div:0,mod:1}, itd32{a:2147483647,b:-2147483648,add:-1,sub:-1,mul:-2147483648,div:0,mod:2147483647}, itd32{a:2147483647,b:-2147483647,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd32{a:2147483647,b:-1,add:2147483646,sub:-2147483648,mul:-2147483647,div:-2147483647,mod:0}, itd32{a:2147483647,b:0,add:2147483647,sub:2147483647,mul:0}, itd32{a:2147483647,b:1,add:-2147483648,sub:2147483646,mul:2147483647,div:2147483647,mod:0}, itd32{a:2147483647,b:2147483647,add:-2,sub:0,mul:1,div:1,mod:0} });
        private static slice<utd16> uint16_data = new slice<utd16>(new utd16[] { utd16{a:0,b:0,add:0,sub:0,mul:0}, utd16{a:0,b:1,add:1,sub:65535,mul:0,div:0,mod:0}, utd16{a:0,b:65535,add:65535,sub:1,mul:0,div:0,mod:0}, utd16{a:1,b:0,add:1,sub:1,mul:0}, utd16{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, utd16{a:1,b:65535,add:0,sub:2,mul:65535,div:0,mod:1}, utd16{a:65535,b:0,add:65535,sub:65535,mul:0}, utd16{a:65535,b:1,add:0,sub:65534,mul:65535,div:65535,mod:0}, utd16{a:65535,b:65535,add:65534,sub:0,mul:1,div:1,mod:0} });
        private static slice<itd16> int16_data = new slice<itd16>(new itd16[] { itd16{a:-32768,b:-32768,add:0,sub:0,mul:0,div:1,mod:0}, itd16{a:-32768,b:-32767,add:1,sub:-1,mul:-32768,div:1,mod:-1}, itd16{a:-32768,b:-1,add:32767,sub:-32767,mul:-32768,div:-32768,mod:0}, itd16{a:-32768,b:0,add:-32768,sub:-32768,mul:0}, itd16{a:-32768,b:1,add:-32767,sub:32767,mul:-32768,div:-32768,mod:0}, itd16{a:-32768,b:32766,add:-2,sub:2,mul:0,div:-1,mod:-2}, itd16{a:-32768,b:32767,add:-1,sub:1,mul:-32768,div:-1,mod:-1}, itd16{a:-32767,b:-32768,add:1,sub:1,mul:-32768,div:0,mod:-32767}, itd16{a:-32767,b:-32767,add:2,sub:0,mul:1,div:1,mod:0}, itd16{a:-32767,b:-1,add:-32768,sub:-32766,mul:32767,div:32767,mod:0}, itd16{a:-32767,b:0,add:-32767,sub:-32767,mul:0}, itd16{a:-32767,b:1,add:-32766,sub:-32768,mul:-32767,div:-32767,mod:0}, itd16{a:-32767,b:32766,add:-1,sub:3,mul:32766,div:-1,mod:-1}, itd16{a:-32767,b:32767,add:0,sub:2,mul:-1,div:-1,mod:0}, itd16{a:-1,b:-32768,add:32767,sub:32767,mul:-32768,div:0,mod:-1}, itd16{a:-1,b:-32767,add:-32768,sub:32766,mul:32767,div:0,mod:-1}, itd16{a:-1,b:-1,add:-2,sub:0,mul:1,div:1,mod:0}, itd16{a:-1,b:0,add:-1,sub:-1,mul:0}, itd16{a:-1,b:1,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd16{a:-1,b:32766,add:32765,sub:-32767,mul:-32766,div:0,mod:-1}, itd16{a:-1,b:32767,add:32766,sub:-32768,mul:-32767,div:0,mod:-1}, itd16{a:0,b:-32768,add:-32768,sub:-32768,mul:0,div:0,mod:0}, itd16{a:0,b:-32767,add:-32767,sub:32767,mul:0,div:0,mod:0}, itd16{a:0,b:-1,add:-1,sub:1,mul:0,div:0,mod:0}, itd16{a:0,b:0,add:0,sub:0,mul:0}, itd16{a:0,b:1,add:1,sub:-1,mul:0,div:0,mod:0}, itd16{a:0,b:32766,add:32766,sub:-32766,mul:0,div:0,mod:0}, itd16{a:0,b:32767,add:32767,sub:-32767,mul:0,div:0,mod:0}, itd16{a:1,b:-32768,add:-32767,sub:-32767,mul:-32768,div:0,mod:1}, itd16{a:1,b:-32767,add:-32766,sub:-32768,mul:-32767,div:0,mod:1}, itd16{a:1,b:-1,add:0,sub:2,mul:-1,div:-1,mod:0}, itd16{a:1,b:0,add:1,sub:1,mul:0}, itd16{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, itd16{a:1,b:32766,add:32767,sub:-32765,mul:32766,div:0,mod:1}, itd16{a:1,b:32767,add:-32768,sub:-32766,mul:32767,div:0,mod:1}, itd16{a:32766,b:-32768,add:-2,sub:-2,mul:0,div:0,mod:32766}, itd16{a:32766,b:-32767,add:-1,sub:-3,mul:32766,div:0,mod:32766}, itd16{a:32766,b:-1,add:32765,sub:32767,mul:-32766,div:-32766,mod:0}, itd16{a:32766,b:0,add:32766,sub:32766,mul:0}, itd16{a:32766,b:1,add:32767,sub:32765,mul:32766,div:32766,mod:0}, itd16{a:32766,b:32766,add:-4,sub:0,mul:4,div:1,mod:0}, itd16{a:32766,b:32767,add:-3,sub:-1,mul:-32766,div:0,mod:32766}, itd16{a:32767,b:-32768,add:-1,sub:-1,mul:-32768,div:0,mod:32767}, itd16{a:32767,b:-32767,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd16{a:32767,b:-1,add:32766,sub:-32768,mul:-32767,div:-32767,mod:0}, itd16{a:32767,b:0,add:32767,sub:32767,mul:0}, itd16{a:32767,b:1,add:-32768,sub:32766,mul:32767,div:32767,mod:0}, itd16{a:32767,b:32766,add:-3,sub:1,mul:-32766,div:1,mod:1}, itd16{a:32767,b:32767,add:-2,sub:0,mul:1,div:1,mod:0} });
        private static slice<utd8> uint8_data = new slice<utd8>(new utd8[] { utd8{a:0,b:0,add:0,sub:0,mul:0}, utd8{a:0,b:1,add:1,sub:255,mul:0,div:0,mod:0}, utd8{a:0,b:255,add:255,sub:1,mul:0,div:0,mod:0}, utd8{a:1,b:0,add:1,sub:1,mul:0}, utd8{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, utd8{a:1,b:255,add:0,sub:2,mul:255,div:0,mod:1}, utd8{a:255,b:0,add:255,sub:255,mul:0}, utd8{a:255,b:1,add:0,sub:254,mul:255,div:255,mod:0}, utd8{a:255,b:255,add:254,sub:0,mul:1,div:1,mod:0} });
        private static slice<itd8> int8_data = new slice<itd8>(new itd8[] { itd8{a:-128,b:-128,add:0,sub:0,mul:0,div:1,mod:0}, itd8{a:-128,b:-127,add:1,sub:-1,mul:-128,div:1,mod:-1}, itd8{a:-128,b:-1,add:127,sub:-127,mul:-128,div:-128,mod:0}, itd8{a:-128,b:0,add:-128,sub:-128,mul:0}, itd8{a:-128,b:1,add:-127,sub:127,mul:-128,div:-128,mod:0}, itd8{a:-128,b:126,add:-2,sub:2,mul:0,div:-1,mod:-2}, itd8{a:-128,b:127,add:-1,sub:1,mul:-128,div:-1,mod:-1}, itd8{a:-127,b:-128,add:1,sub:1,mul:-128,div:0,mod:-127}, itd8{a:-127,b:-127,add:2,sub:0,mul:1,div:1,mod:0}, itd8{a:-127,b:-1,add:-128,sub:-126,mul:127,div:127,mod:0}, itd8{a:-127,b:0,add:-127,sub:-127,mul:0}, itd8{a:-127,b:1,add:-126,sub:-128,mul:-127,div:-127,mod:0}, itd8{a:-127,b:126,add:-1,sub:3,mul:126,div:-1,mod:-1}, itd8{a:-127,b:127,add:0,sub:2,mul:-1,div:-1,mod:0}, itd8{a:-1,b:-128,add:127,sub:127,mul:-128,div:0,mod:-1}, itd8{a:-1,b:-127,add:-128,sub:126,mul:127,div:0,mod:-1}, itd8{a:-1,b:-1,add:-2,sub:0,mul:1,div:1,mod:0}, itd8{a:-1,b:0,add:-1,sub:-1,mul:0}, itd8{a:-1,b:1,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd8{a:-1,b:126,add:125,sub:-127,mul:-126,div:0,mod:-1}, itd8{a:-1,b:127,add:126,sub:-128,mul:-127,div:0,mod:-1}, itd8{a:0,b:-128,add:-128,sub:-128,mul:0,div:0,mod:0}, itd8{a:0,b:-127,add:-127,sub:127,mul:0,div:0,mod:0}, itd8{a:0,b:-1,add:-1,sub:1,mul:0,div:0,mod:0}, itd8{a:0,b:0,add:0,sub:0,mul:0}, itd8{a:0,b:1,add:1,sub:-1,mul:0,div:0,mod:0}, itd8{a:0,b:126,add:126,sub:-126,mul:0,div:0,mod:0}, itd8{a:0,b:127,add:127,sub:-127,mul:0,div:0,mod:0}, itd8{a:1,b:-128,add:-127,sub:-127,mul:-128,div:0,mod:1}, itd8{a:1,b:-127,add:-126,sub:-128,mul:-127,div:0,mod:1}, itd8{a:1,b:-1,add:0,sub:2,mul:-1,div:-1,mod:0}, itd8{a:1,b:0,add:1,sub:1,mul:0}, itd8{a:1,b:1,add:2,sub:0,mul:1,div:1,mod:0}, itd8{a:1,b:126,add:127,sub:-125,mul:126,div:0,mod:1}, itd8{a:1,b:127,add:-128,sub:-126,mul:127,div:0,mod:1}, itd8{a:126,b:-128,add:-2,sub:-2,mul:0,div:0,mod:126}, itd8{a:126,b:-127,add:-1,sub:-3,mul:126,div:0,mod:126}, itd8{a:126,b:-1,add:125,sub:127,mul:-126,div:-126,mod:0}, itd8{a:126,b:0,add:126,sub:126,mul:0}, itd8{a:126,b:1,add:127,sub:125,mul:126,div:126,mod:0}, itd8{a:126,b:126,add:-4,sub:0,mul:4,div:1,mod:0}, itd8{a:126,b:127,add:-3,sub:-1,mul:-126,div:0,mod:126}, itd8{a:127,b:-128,add:-1,sub:-1,mul:-128,div:0,mod:127}, itd8{a:127,b:-127,add:0,sub:-2,mul:-1,div:-1,mod:0}, itd8{a:127,b:-1,add:126,sub:-128,mul:-127,div:-127,mod:0}, itd8{a:127,b:0,add:127,sub:127,mul:0}, itd8{a:127,b:1,add:-128,sub:126,mul:127,div:127,mod:0}, itd8{a:127,b:126,add:-3,sub:1,mul:-126,div:1,mod:1}, itd8{a:127,b:127,add:-2,sub:0,mul:1,div:1,mod:0} });
        private static bool failed = default;

        private static void Main() => func((_, panic, __) =>
        {
            {
                var v__prev1 = v;

                foreach (var (_, __v) in uint64_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        var got = add_uint64_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_uint64 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_uint64_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_uint64 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_uint64_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_uint64 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_uint64_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_uint64 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_uint64_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_uint64 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in int64_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_int64_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_int64 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_int64_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_int64 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_int64_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_int64 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_int64_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_int64 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_int64_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_int64 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in uint32_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_uint32_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_uint32 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_uint32_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_uint32 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_uint32_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_uint32 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_uint32_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_uint32 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_uint32_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_uint32 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in int32_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_int32_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_int32 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_int32_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_int32 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_int32_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_int32 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_int32_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_int32 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_int32_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_int32 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in uint16_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_uint16_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_uint16 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_uint16_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_uint16 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_uint16_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_uint16 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_uint16_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_uint16 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_uint16_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_uint16 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in int16_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_int16_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_int16 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_int16_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_int16 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_int16_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_int16 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_int16_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_int16 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_int16_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_int16 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in uint8_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_uint8_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_uint8 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_uint8_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_uint8 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_uint8_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_uint8 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_uint8_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_uint8 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_uint8_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_uint8 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            {
                var v__prev1 = v;

                foreach (var (_, __v) in int8_data)
                {
                    v = __v;
                    {
                        var got__prev1 = got;

                        got = add_int8_ssa(v.a, v.b);

                        if (got != v.add)
                        {
                            fmt.Printf("add_int8 %d+%d = %d, wanted %d\n", v.a, v.b, got, v.add);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    {
                        var got__prev1 = got;

                        got = sub_int8_ssa(v.a, v.b);

                        if (got != v.sub)
                        {
                            fmt.Printf("sub_int8 %d-%d = %d, wanted %d\n", v.a, v.b, got, v.sub);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = div_int8_ssa(v.a, v.b);

                            if (got != v.div)
                            {
                                fmt.Printf("div_int8 %d/%d = %d, wanted %d\n", v.a, v.b, got, v.div);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    if (v.b != 0L)
                    {
                        {
                            var got__prev2 = got;

                            got = mod_int8_ssa(v.a, v.b);

                            if (got != v.mod)
                            {
                                fmt.Printf("mod_int8 %d%%%d = %d, wanted %d\n", v.a, v.b, got, v.mod);
                                failed = true;
                            }

                            got = got__prev2;

                        }

                    }
                    {
                        var got__prev1 = got;

                        got = mul_int8_ssa(v.a, v.b);

                        if (got != v.mul)
                        {
                            fmt.Printf("mul_int8 %d*%d = %d, wanted %d\n", v.a, v.b, got, v.mul);
                            failed = true;
                        }

                        got = got__prev1;

                    }
                }

                v = v__prev1;
            }

            if (failed)
            {
                panic("tests failed");
            }
        });
    }
}
