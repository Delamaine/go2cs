// run
// Code generated by gen/cmpConstGen.go. DO NOT EDIT.

// package main -- go2cs converted at 2020 August 29 09:57:45 UTC
// Original source: C:\Go\src\cmd\compile\internal\gc\testdata\cmpConst.go
using fmt = go.fmt_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using static go.builtin;
using System;

namespace go
{
    public static partial class main_package
    {
        // results show the expected result for the elements left of, equal to and right of the index.
        private partial struct result
        {
            public bool l;
            public bool e;
            public bool r;
        }

        private static result eq = new result(l:false,e:true,r:false);        private static result ne = new result(l:true,e:false,r:true);        private static result lt = new result(l:true,e:false,r:false);        private static result le = new result(l:true,e:true,r:false);        private static result gt = new result(l:false,e:false,r:true);        private static result ge = new result(l:false,e:true,r:true);

        // uint64 tests
        private static ulong uint64_vals = new slice<ulong>(new ulong[] { 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767, 32768, 65534, 65535, 65536, 2147483646, 2147483647, 2147483648, 4278190080, 4294967294, 4294967295, 4294967296, 1095216660480, 9223372036854775806, 9223372036854775807, 9223372036854775808, 18374686479671623680, 18446744073709551614, 18446744073709551615 });

        private static bool lt_0_uint64(ulong x)
        {
            return x < 0L;
        }
        private static bool le_0_uint64(ulong x)
        {
            return x <= 0L;
        }
        private static bool gt_0_uint64(ulong x)
        {
            return x > 0L;
        }
        private static bool ge_0_uint64(ulong x)
        {
            return x >= 0L;
        }
        private static bool eq_0_uint64(ulong x)
        {
            return x == 0L;
        }
        private static bool ne_0_uint64(ulong x)
        {
            return x != 0L;
        }
        private static bool lt_1_uint64(ulong x)
        {
            return x < 1L;
        }
        private static bool le_1_uint64(ulong x)
        {
            return x <= 1L;
        }
        private static bool gt_1_uint64(ulong x)
        {
            return x > 1L;
        }
        private static bool ge_1_uint64(ulong x)
        {
            return x >= 1L;
        }
        private static bool eq_1_uint64(ulong x)
        {
            return x == 1L;
        }
        private static bool ne_1_uint64(ulong x)
        {
            return x != 1L;
        }
        private static bool lt_126_uint64(ulong x)
        {
            return x < 126L;
        }
        private static bool le_126_uint64(ulong x)
        {
            return x <= 126L;
        }
        private static bool gt_126_uint64(ulong x)
        {
            return x > 126L;
        }
        private static bool ge_126_uint64(ulong x)
        {
            return x >= 126L;
        }
        private static bool eq_126_uint64(ulong x)
        {
            return x == 126L;
        }
        private static bool ne_126_uint64(ulong x)
        {
            return x != 126L;
        }
        private static bool lt_127_uint64(ulong x)
        {
            return x < 127L;
        }
        private static bool le_127_uint64(ulong x)
        {
            return x <= 127L;
        }
        private static bool gt_127_uint64(ulong x)
        {
            return x > 127L;
        }
        private static bool ge_127_uint64(ulong x)
        {
            return x >= 127L;
        }
        private static bool eq_127_uint64(ulong x)
        {
            return x == 127L;
        }
        private static bool ne_127_uint64(ulong x)
        {
            return x != 127L;
        }
        private static bool lt_128_uint64(ulong x)
        {
            return x < 128L;
        }
        private static bool le_128_uint64(ulong x)
        {
            return x <= 128L;
        }
        private static bool gt_128_uint64(ulong x)
        {
            return x > 128L;
        }
        private static bool ge_128_uint64(ulong x)
        {
            return x >= 128L;
        }
        private static bool eq_128_uint64(ulong x)
        {
            return x == 128L;
        }
        private static bool ne_128_uint64(ulong x)
        {
            return x != 128L;
        }
        private static bool lt_254_uint64(ulong x)
        {
            return x < 254L;
        }
        private static bool le_254_uint64(ulong x)
        {
            return x <= 254L;
        }
        private static bool gt_254_uint64(ulong x)
        {
            return x > 254L;
        }
        private static bool ge_254_uint64(ulong x)
        {
            return x >= 254L;
        }
        private static bool eq_254_uint64(ulong x)
        {
            return x == 254L;
        }
        private static bool ne_254_uint64(ulong x)
        {
            return x != 254L;
        }
        private static bool lt_255_uint64(ulong x)
        {
            return x < 255L;
        }
        private static bool le_255_uint64(ulong x)
        {
            return x <= 255L;
        }
        private static bool gt_255_uint64(ulong x)
        {
            return x > 255L;
        }
        private static bool ge_255_uint64(ulong x)
        {
            return x >= 255L;
        }
        private static bool eq_255_uint64(ulong x)
        {
            return x == 255L;
        }
        private static bool ne_255_uint64(ulong x)
        {
            return x != 255L;
        }
        private static bool lt_256_uint64(ulong x)
        {
            return x < 256L;
        }
        private static bool le_256_uint64(ulong x)
        {
            return x <= 256L;
        }
        private static bool gt_256_uint64(ulong x)
        {
            return x > 256L;
        }
        private static bool ge_256_uint64(ulong x)
        {
            return x >= 256L;
        }
        private static bool eq_256_uint64(ulong x)
        {
            return x == 256L;
        }
        private static bool ne_256_uint64(ulong x)
        {
            return x != 256L;
        }
        private static bool lt_32766_uint64(ulong x)
        {
            return x < 32766L;
        }
        private static bool le_32766_uint64(ulong x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_uint64(ulong x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_uint64(ulong x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_uint64(ulong x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_uint64(ulong x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_uint64(ulong x)
        {
            return x < 32767L;
        }
        private static bool le_32767_uint64(ulong x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_uint64(ulong x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_uint64(ulong x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_uint64(ulong x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_uint64(ulong x)
        {
            return x != 32767L;
        }
        private static bool lt_32768_uint64(ulong x)
        {
            return x < 32768L;
        }
        private static bool le_32768_uint64(ulong x)
        {
            return x <= 32768L;
        }
        private static bool gt_32768_uint64(ulong x)
        {
            return x > 32768L;
        }
        private static bool ge_32768_uint64(ulong x)
        {
            return x >= 32768L;
        }
        private static bool eq_32768_uint64(ulong x)
        {
            return x == 32768L;
        }
        private static bool ne_32768_uint64(ulong x)
        {
            return x != 32768L;
        }
        private static bool lt_65534_uint64(ulong x)
        {
            return x < 65534L;
        }
        private static bool le_65534_uint64(ulong x)
        {
            return x <= 65534L;
        }
        private static bool gt_65534_uint64(ulong x)
        {
            return x > 65534L;
        }
        private static bool ge_65534_uint64(ulong x)
        {
            return x >= 65534L;
        }
        private static bool eq_65534_uint64(ulong x)
        {
            return x == 65534L;
        }
        private static bool ne_65534_uint64(ulong x)
        {
            return x != 65534L;
        }
        private static bool lt_65535_uint64(ulong x)
        {
            return x < 65535L;
        }
        private static bool le_65535_uint64(ulong x)
        {
            return x <= 65535L;
        }
        private static bool gt_65535_uint64(ulong x)
        {
            return x > 65535L;
        }
        private static bool ge_65535_uint64(ulong x)
        {
            return x >= 65535L;
        }
        private static bool eq_65535_uint64(ulong x)
        {
            return x == 65535L;
        }
        private static bool ne_65535_uint64(ulong x)
        {
            return x != 65535L;
        }
        private static bool lt_65536_uint64(ulong x)
        {
            return x < 65536L;
        }
        private static bool le_65536_uint64(ulong x)
        {
            return x <= 65536L;
        }
        private static bool gt_65536_uint64(ulong x)
        {
            return x > 65536L;
        }
        private static bool ge_65536_uint64(ulong x)
        {
            return x >= 65536L;
        }
        private static bool eq_65536_uint64(ulong x)
        {
            return x == 65536L;
        }
        private static bool ne_65536_uint64(ulong x)
        {
            return x != 65536L;
        }
        private static bool lt_2147483646_uint64(ulong x)
        {
            return x < 2147483646L;
        }
        private static bool le_2147483646_uint64(ulong x)
        {
            return x <= 2147483646L;
        }
        private static bool gt_2147483646_uint64(ulong x)
        {
            return x > 2147483646L;
        }
        private static bool ge_2147483646_uint64(ulong x)
        {
            return x >= 2147483646L;
        }
        private static bool eq_2147483646_uint64(ulong x)
        {
            return x == 2147483646L;
        }
        private static bool ne_2147483646_uint64(ulong x)
        {
            return x != 2147483646L;
        }
        private static bool lt_2147483647_uint64(ulong x)
        {
            return x < 2147483647L;
        }
        private static bool le_2147483647_uint64(ulong x)
        {
            return x <= 2147483647L;
        }
        private static bool gt_2147483647_uint64(ulong x)
        {
            return x > 2147483647L;
        }
        private static bool ge_2147483647_uint64(ulong x)
        {
            return x >= 2147483647L;
        }
        private static bool eq_2147483647_uint64(ulong x)
        {
            return x == 2147483647L;
        }
        private static bool ne_2147483647_uint64(ulong x)
        {
            return x != 2147483647L;
        }
        private static bool lt_2147483648_uint64(ulong x)
        {
            return x < 2147483648L;
        }
        private static bool le_2147483648_uint64(ulong x)
        {
            return x <= 2147483648L;
        }
        private static bool gt_2147483648_uint64(ulong x)
        {
            return x > 2147483648L;
        }
        private static bool ge_2147483648_uint64(ulong x)
        {
            return x >= 2147483648L;
        }
        private static bool eq_2147483648_uint64(ulong x)
        {
            return x == 2147483648L;
        }
        private static bool ne_2147483648_uint64(ulong x)
        {
            return x != 2147483648L;
        }
        private static bool lt_4278190080_uint64(ulong x)
        {
            return x < 4278190080L;
        }
        private static bool le_4278190080_uint64(ulong x)
        {
            return x <= 4278190080L;
        }
        private static bool gt_4278190080_uint64(ulong x)
        {
            return x > 4278190080L;
        }
        private static bool ge_4278190080_uint64(ulong x)
        {
            return x >= 4278190080L;
        }
        private static bool eq_4278190080_uint64(ulong x)
        {
            return x == 4278190080L;
        }
        private static bool ne_4278190080_uint64(ulong x)
        {
            return x != 4278190080L;
        }
        private static bool lt_4294967294_uint64(ulong x)
        {
            return x < 4294967294L;
        }
        private static bool le_4294967294_uint64(ulong x)
        {
            return x <= 4294967294L;
        }
        private static bool gt_4294967294_uint64(ulong x)
        {
            return x > 4294967294L;
        }
        private static bool ge_4294967294_uint64(ulong x)
        {
            return x >= 4294967294L;
        }
        private static bool eq_4294967294_uint64(ulong x)
        {
            return x == 4294967294L;
        }
        private static bool ne_4294967294_uint64(ulong x)
        {
            return x != 4294967294L;
        }
        private static bool lt_4294967295_uint64(ulong x)
        {
            return x < 4294967295L;
        }
        private static bool le_4294967295_uint64(ulong x)
        {
            return x <= 4294967295L;
        }
        private static bool gt_4294967295_uint64(ulong x)
        {
            return x > 4294967295L;
        }
        private static bool ge_4294967295_uint64(ulong x)
        {
            return x >= 4294967295L;
        }
        private static bool eq_4294967295_uint64(ulong x)
        {
            return x == 4294967295L;
        }
        private static bool ne_4294967295_uint64(ulong x)
        {
            return x != 4294967295L;
        }
        private static bool lt_4294967296_uint64(ulong x)
        {
            return x < 4294967296L;
        }
        private static bool le_4294967296_uint64(ulong x)
        {
            return x <= 4294967296L;
        }
        private static bool gt_4294967296_uint64(ulong x)
        {
            return x > 4294967296L;
        }
        private static bool ge_4294967296_uint64(ulong x)
        {
            return x >= 4294967296L;
        }
        private static bool eq_4294967296_uint64(ulong x)
        {
            return x == 4294967296L;
        }
        private static bool ne_4294967296_uint64(ulong x)
        {
            return x != 4294967296L;
        }
        private static bool lt_1095216660480_uint64(ulong x)
        {
            return x < 1095216660480L;
        }
        private static bool le_1095216660480_uint64(ulong x)
        {
            return x <= 1095216660480L;
        }
        private static bool gt_1095216660480_uint64(ulong x)
        {
            return x > 1095216660480L;
        }
        private static bool ge_1095216660480_uint64(ulong x)
        {
            return x >= 1095216660480L;
        }
        private static bool eq_1095216660480_uint64(ulong x)
        {
            return x == 1095216660480L;
        }
        private static bool ne_1095216660480_uint64(ulong x)
        {
            return x != 1095216660480L;
        }
        private static bool lt_9223372036854775806_uint64(ulong x)
        {
            return x < 9223372036854775806L;
        }
        private static bool le_9223372036854775806_uint64(ulong x)
        {
            return x <= 9223372036854775806L;
        }
        private static bool gt_9223372036854775806_uint64(ulong x)
        {
            return x > 9223372036854775806L;
        }
        private static bool ge_9223372036854775806_uint64(ulong x)
        {
            return x >= 9223372036854775806L;
        }
        private static bool eq_9223372036854775806_uint64(ulong x)
        {
            return x == 9223372036854775806L;
        }
        private static bool ne_9223372036854775806_uint64(ulong x)
        {
            return x != 9223372036854775806L;
        }
        private static bool lt_9223372036854775807_uint64(ulong x)
        {
            return x < 9223372036854775807L;
        }
        private static bool le_9223372036854775807_uint64(ulong x)
        {
            return x <= 9223372036854775807L;
        }
        private static bool gt_9223372036854775807_uint64(ulong x)
        {
            return x > 9223372036854775807L;
        }
        private static bool ge_9223372036854775807_uint64(ulong x)
        {
            return x >= 9223372036854775807L;
        }
        private static bool eq_9223372036854775807_uint64(ulong x)
        {
            return x == 9223372036854775807L;
        }
        private static bool ne_9223372036854775807_uint64(ulong x)
        {
            return x != 9223372036854775807L;
        }
        private static bool lt_9223372036854775808_uint64(ulong x)
        {
            return x < 9223372036854775808UL;
        }
        private static bool le_9223372036854775808_uint64(ulong x)
        {
            return x <= 9223372036854775808UL;
        }
        private static bool gt_9223372036854775808_uint64(ulong x)
        {
            return x > 9223372036854775808UL;
        }
        private static bool ge_9223372036854775808_uint64(ulong x)
        {
            return x >= 9223372036854775808UL;
        }
        private static bool eq_9223372036854775808_uint64(ulong x)
        {
            return x == 9223372036854775808UL;
        }
        private static bool ne_9223372036854775808_uint64(ulong x)
        {
            return x != 9223372036854775808UL;
        }
        private static bool lt_18374686479671623680_uint64(ulong x)
        {
            return x < 18374686479671623680UL;
        }
        private static bool le_18374686479671623680_uint64(ulong x)
        {
            return x <= 18374686479671623680UL;
        }
        private static bool gt_18374686479671623680_uint64(ulong x)
        {
            return x > 18374686479671623680UL;
        }
        private static bool ge_18374686479671623680_uint64(ulong x)
        {
            return x >= 18374686479671623680UL;
        }
        private static bool eq_18374686479671623680_uint64(ulong x)
        {
            return x == 18374686479671623680UL;
        }
        private static bool ne_18374686479671623680_uint64(ulong x)
        {
            return x != 18374686479671623680UL;
        }
        private static bool lt_18446744073709551614_uint64(ulong x)
        {
            return x < 18446744073709551614UL;
        }
        private static bool le_18446744073709551614_uint64(ulong x)
        {
            return x <= 18446744073709551614UL;
        }
        private static bool gt_18446744073709551614_uint64(ulong x)
        {
            return x > 18446744073709551614UL;
        }
        private static bool ge_18446744073709551614_uint64(ulong x)
        {
            return x >= 18446744073709551614UL;
        }
        private static bool eq_18446744073709551614_uint64(ulong x)
        {
            return x == 18446744073709551614UL;
        }
        private static bool ne_18446744073709551614_uint64(ulong x)
        {
            return x != 18446744073709551614UL;
        }
        private static bool lt_18446744073709551615_uint64(ulong x)
        {
            return x < 18446744073709551615UL;
        }
        private static bool le_18446744073709551615_uint64(ulong x)
        {
            return x <= 18446744073709551615UL;
        }
        private static bool gt_18446744073709551615_uint64(ulong x)
        {
            return x > 18446744073709551615UL;
        }
        private static bool ge_18446744073709551615_uint64(ulong x)
        {
            return x >= 18446744073709551615UL;
        }
        private static bool eq_18446744073709551615_uint64(ulong x)
        {
            return x == 18446744073709551615UL;
        }
        private static bool ne_18446744073709551615_uint64(ulong x)
        {
            return x != 18446744073709551615UL;
        }



        // uint32 tests
        private static uint uint32_vals = new slice<uint>(new uint[] { 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767, 32768, 65534, 65535, 65536, 2147483646, 2147483647, 2147483648, 4278190080, 4294967294, 4294967295 });

        private static bool lt_0_uint32(uint x)
        {
            return x < 0L;
        }
        private static bool le_0_uint32(uint x)
        {
            return x <= 0L;
        }
        private static bool gt_0_uint32(uint x)
        {
            return x > 0L;
        }
        private static bool ge_0_uint32(uint x)
        {
            return x >= 0L;
        }
        private static bool eq_0_uint32(uint x)
        {
            return x == 0L;
        }
        private static bool ne_0_uint32(uint x)
        {
            return x != 0L;
        }
        private static bool lt_1_uint32(uint x)
        {
            return x < 1L;
        }
        private static bool le_1_uint32(uint x)
        {
            return x <= 1L;
        }
        private static bool gt_1_uint32(uint x)
        {
            return x > 1L;
        }
        private static bool ge_1_uint32(uint x)
        {
            return x >= 1L;
        }
        private static bool eq_1_uint32(uint x)
        {
            return x == 1L;
        }
        private static bool ne_1_uint32(uint x)
        {
            return x != 1L;
        }
        private static bool lt_126_uint32(uint x)
        {
            return x < 126L;
        }
        private static bool le_126_uint32(uint x)
        {
            return x <= 126L;
        }
        private static bool gt_126_uint32(uint x)
        {
            return x > 126L;
        }
        private static bool ge_126_uint32(uint x)
        {
            return x >= 126L;
        }
        private static bool eq_126_uint32(uint x)
        {
            return x == 126L;
        }
        private static bool ne_126_uint32(uint x)
        {
            return x != 126L;
        }
        private static bool lt_127_uint32(uint x)
        {
            return x < 127L;
        }
        private static bool le_127_uint32(uint x)
        {
            return x <= 127L;
        }
        private static bool gt_127_uint32(uint x)
        {
            return x > 127L;
        }
        private static bool ge_127_uint32(uint x)
        {
            return x >= 127L;
        }
        private static bool eq_127_uint32(uint x)
        {
            return x == 127L;
        }
        private static bool ne_127_uint32(uint x)
        {
            return x != 127L;
        }
        private static bool lt_128_uint32(uint x)
        {
            return x < 128L;
        }
        private static bool le_128_uint32(uint x)
        {
            return x <= 128L;
        }
        private static bool gt_128_uint32(uint x)
        {
            return x > 128L;
        }
        private static bool ge_128_uint32(uint x)
        {
            return x >= 128L;
        }
        private static bool eq_128_uint32(uint x)
        {
            return x == 128L;
        }
        private static bool ne_128_uint32(uint x)
        {
            return x != 128L;
        }
        private static bool lt_254_uint32(uint x)
        {
            return x < 254L;
        }
        private static bool le_254_uint32(uint x)
        {
            return x <= 254L;
        }
        private static bool gt_254_uint32(uint x)
        {
            return x > 254L;
        }
        private static bool ge_254_uint32(uint x)
        {
            return x >= 254L;
        }
        private static bool eq_254_uint32(uint x)
        {
            return x == 254L;
        }
        private static bool ne_254_uint32(uint x)
        {
            return x != 254L;
        }
        private static bool lt_255_uint32(uint x)
        {
            return x < 255L;
        }
        private static bool le_255_uint32(uint x)
        {
            return x <= 255L;
        }
        private static bool gt_255_uint32(uint x)
        {
            return x > 255L;
        }
        private static bool ge_255_uint32(uint x)
        {
            return x >= 255L;
        }
        private static bool eq_255_uint32(uint x)
        {
            return x == 255L;
        }
        private static bool ne_255_uint32(uint x)
        {
            return x != 255L;
        }
        private static bool lt_256_uint32(uint x)
        {
            return x < 256L;
        }
        private static bool le_256_uint32(uint x)
        {
            return x <= 256L;
        }
        private static bool gt_256_uint32(uint x)
        {
            return x > 256L;
        }
        private static bool ge_256_uint32(uint x)
        {
            return x >= 256L;
        }
        private static bool eq_256_uint32(uint x)
        {
            return x == 256L;
        }
        private static bool ne_256_uint32(uint x)
        {
            return x != 256L;
        }
        private static bool lt_32766_uint32(uint x)
        {
            return x < 32766L;
        }
        private static bool le_32766_uint32(uint x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_uint32(uint x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_uint32(uint x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_uint32(uint x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_uint32(uint x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_uint32(uint x)
        {
            return x < 32767L;
        }
        private static bool le_32767_uint32(uint x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_uint32(uint x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_uint32(uint x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_uint32(uint x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_uint32(uint x)
        {
            return x != 32767L;
        }
        private static bool lt_32768_uint32(uint x)
        {
            return x < 32768L;
        }
        private static bool le_32768_uint32(uint x)
        {
            return x <= 32768L;
        }
        private static bool gt_32768_uint32(uint x)
        {
            return x > 32768L;
        }
        private static bool ge_32768_uint32(uint x)
        {
            return x >= 32768L;
        }
        private static bool eq_32768_uint32(uint x)
        {
            return x == 32768L;
        }
        private static bool ne_32768_uint32(uint x)
        {
            return x != 32768L;
        }
        private static bool lt_65534_uint32(uint x)
        {
            return x < 65534L;
        }
        private static bool le_65534_uint32(uint x)
        {
            return x <= 65534L;
        }
        private static bool gt_65534_uint32(uint x)
        {
            return x > 65534L;
        }
        private static bool ge_65534_uint32(uint x)
        {
            return x >= 65534L;
        }
        private static bool eq_65534_uint32(uint x)
        {
            return x == 65534L;
        }
        private static bool ne_65534_uint32(uint x)
        {
            return x != 65534L;
        }
        private static bool lt_65535_uint32(uint x)
        {
            return x < 65535L;
        }
        private static bool le_65535_uint32(uint x)
        {
            return x <= 65535L;
        }
        private static bool gt_65535_uint32(uint x)
        {
            return x > 65535L;
        }
        private static bool ge_65535_uint32(uint x)
        {
            return x >= 65535L;
        }
        private static bool eq_65535_uint32(uint x)
        {
            return x == 65535L;
        }
        private static bool ne_65535_uint32(uint x)
        {
            return x != 65535L;
        }
        private static bool lt_65536_uint32(uint x)
        {
            return x < 65536L;
        }
        private static bool le_65536_uint32(uint x)
        {
            return x <= 65536L;
        }
        private static bool gt_65536_uint32(uint x)
        {
            return x > 65536L;
        }
        private static bool ge_65536_uint32(uint x)
        {
            return x >= 65536L;
        }
        private static bool eq_65536_uint32(uint x)
        {
            return x == 65536L;
        }
        private static bool ne_65536_uint32(uint x)
        {
            return x != 65536L;
        }
        private static bool lt_2147483646_uint32(uint x)
        {
            return x < 2147483646L;
        }
        private static bool le_2147483646_uint32(uint x)
        {
            return x <= 2147483646L;
        }
        private static bool gt_2147483646_uint32(uint x)
        {
            return x > 2147483646L;
        }
        private static bool ge_2147483646_uint32(uint x)
        {
            return x >= 2147483646L;
        }
        private static bool eq_2147483646_uint32(uint x)
        {
            return x == 2147483646L;
        }
        private static bool ne_2147483646_uint32(uint x)
        {
            return x != 2147483646L;
        }
        private static bool lt_2147483647_uint32(uint x)
        {
            return x < 2147483647L;
        }
        private static bool le_2147483647_uint32(uint x)
        {
            return x <= 2147483647L;
        }
        private static bool gt_2147483647_uint32(uint x)
        {
            return x > 2147483647L;
        }
        private static bool ge_2147483647_uint32(uint x)
        {
            return x >= 2147483647L;
        }
        private static bool eq_2147483647_uint32(uint x)
        {
            return x == 2147483647L;
        }
        private static bool ne_2147483647_uint32(uint x)
        {
            return x != 2147483647L;
        }
        private static bool lt_2147483648_uint32(uint x)
        {
            return x < 2147483648L;
        }
        private static bool le_2147483648_uint32(uint x)
        {
            return x <= 2147483648L;
        }
        private static bool gt_2147483648_uint32(uint x)
        {
            return x > 2147483648L;
        }
        private static bool ge_2147483648_uint32(uint x)
        {
            return x >= 2147483648L;
        }
        private static bool eq_2147483648_uint32(uint x)
        {
            return x == 2147483648L;
        }
        private static bool ne_2147483648_uint32(uint x)
        {
            return x != 2147483648L;
        }
        private static bool lt_4278190080_uint32(uint x)
        {
            return x < 4278190080L;
        }
        private static bool le_4278190080_uint32(uint x)
        {
            return x <= 4278190080L;
        }
        private static bool gt_4278190080_uint32(uint x)
        {
            return x > 4278190080L;
        }
        private static bool ge_4278190080_uint32(uint x)
        {
            return x >= 4278190080L;
        }
        private static bool eq_4278190080_uint32(uint x)
        {
            return x == 4278190080L;
        }
        private static bool ne_4278190080_uint32(uint x)
        {
            return x != 4278190080L;
        }
        private static bool lt_4294967294_uint32(uint x)
        {
            return x < 4294967294L;
        }
        private static bool le_4294967294_uint32(uint x)
        {
            return x <= 4294967294L;
        }
        private static bool gt_4294967294_uint32(uint x)
        {
            return x > 4294967294L;
        }
        private static bool ge_4294967294_uint32(uint x)
        {
            return x >= 4294967294L;
        }
        private static bool eq_4294967294_uint32(uint x)
        {
            return x == 4294967294L;
        }
        private static bool ne_4294967294_uint32(uint x)
        {
            return x != 4294967294L;
        }
        private static bool lt_4294967295_uint32(uint x)
        {
            return x < 4294967295L;
        }
        private static bool le_4294967295_uint32(uint x)
        {
            return x <= 4294967295L;
        }
        private static bool gt_4294967295_uint32(uint x)
        {
            return x > 4294967295L;
        }
        private static bool ge_4294967295_uint32(uint x)
        {
            return x >= 4294967295L;
        }
        private static bool eq_4294967295_uint32(uint x)
        {
            return x == 4294967295L;
        }
        private static bool ne_4294967295_uint32(uint x)
        {
            return x != 4294967295L;
        }



        // uint16 tests
        private static ushort uint16_vals = new slice<ushort>(new ushort[] { 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767, 32768, 65534, 65535 });

        private static bool lt_0_uint16(ushort x)
        {
            return x < 0L;
        }
        private static bool le_0_uint16(ushort x)
        {
            return x <= 0L;
        }
        private static bool gt_0_uint16(ushort x)
        {
            return x > 0L;
        }
        private static bool ge_0_uint16(ushort x)
        {
            return x >= 0L;
        }
        private static bool eq_0_uint16(ushort x)
        {
            return x == 0L;
        }
        private static bool ne_0_uint16(ushort x)
        {
            return x != 0L;
        }
        private static bool lt_1_uint16(ushort x)
        {
            return x < 1L;
        }
        private static bool le_1_uint16(ushort x)
        {
            return x <= 1L;
        }
        private static bool gt_1_uint16(ushort x)
        {
            return x > 1L;
        }
        private static bool ge_1_uint16(ushort x)
        {
            return x >= 1L;
        }
        private static bool eq_1_uint16(ushort x)
        {
            return x == 1L;
        }
        private static bool ne_1_uint16(ushort x)
        {
            return x != 1L;
        }
        private static bool lt_126_uint16(ushort x)
        {
            return x < 126L;
        }
        private static bool le_126_uint16(ushort x)
        {
            return x <= 126L;
        }
        private static bool gt_126_uint16(ushort x)
        {
            return x > 126L;
        }
        private static bool ge_126_uint16(ushort x)
        {
            return x >= 126L;
        }
        private static bool eq_126_uint16(ushort x)
        {
            return x == 126L;
        }
        private static bool ne_126_uint16(ushort x)
        {
            return x != 126L;
        }
        private static bool lt_127_uint16(ushort x)
        {
            return x < 127L;
        }
        private static bool le_127_uint16(ushort x)
        {
            return x <= 127L;
        }
        private static bool gt_127_uint16(ushort x)
        {
            return x > 127L;
        }
        private static bool ge_127_uint16(ushort x)
        {
            return x >= 127L;
        }
        private static bool eq_127_uint16(ushort x)
        {
            return x == 127L;
        }
        private static bool ne_127_uint16(ushort x)
        {
            return x != 127L;
        }
        private static bool lt_128_uint16(ushort x)
        {
            return x < 128L;
        }
        private static bool le_128_uint16(ushort x)
        {
            return x <= 128L;
        }
        private static bool gt_128_uint16(ushort x)
        {
            return x > 128L;
        }
        private static bool ge_128_uint16(ushort x)
        {
            return x >= 128L;
        }
        private static bool eq_128_uint16(ushort x)
        {
            return x == 128L;
        }
        private static bool ne_128_uint16(ushort x)
        {
            return x != 128L;
        }
        private static bool lt_254_uint16(ushort x)
        {
            return x < 254L;
        }
        private static bool le_254_uint16(ushort x)
        {
            return x <= 254L;
        }
        private static bool gt_254_uint16(ushort x)
        {
            return x > 254L;
        }
        private static bool ge_254_uint16(ushort x)
        {
            return x >= 254L;
        }
        private static bool eq_254_uint16(ushort x)
        {
            return x == 254L;
        }
        private static bool ne_254_uint16(ushort x)
        {
            return x != 254L;
        }
        private static bool lt_255_uint16(ushort x)
        {
            return x < 255L;
        }
        private static bool le_255_uint16(ushort x)
        {
            return x <= 255L;
        }
        private static bool gt_255_uint16(ushort x)
        {
            return x > 255L;
        }
        private static bool ge_255_uint16(ushort x)
        {
            return x >= 255L;
        }
        private static bool eq_255_uint16(ushort x)
        {
            return x == 255L;
        }
        private static bool ne_255_uint16(ushort x)
        {
            return x != 255L;
        }
        private static bool lt_256_uint16(ushort x)
        {
            return x < 256L;
        }
        private static bool le_256_uint16(ushort x)
        {
            return x <= 256L;
        }
        private static bool gt_256_uint16(ushort x)
        {
            return x > 256L;
        }
        private static bool ge_256_uint16(ushort x)
        {
            return x >= 256L;
        }
        private static bool eq_256_uint16(ushort x)
        {
            return x == 256L;
        }
        private static bool ne_256_uint16(ushort x)
        {
            return x != 256L;
        }
        private static bool lt_32766_uint16(ushort x)
        {
            return x < 32766L;
        }
        private static bool le_32766_uint16(ushort x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_uint16(ushort x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_uint16(ushort x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_uint16(ushort x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_uint16(ushort x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_uint16(ushort x)
        {
            return x < 32767L;
        }
        private static bool le_32767_uint16(ushort x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_uint16(ushort x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_uint16(ushort x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_uint16(ushort x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_uint16(ushort x)
        {
            return x != 32767L;
        }
        private static bool lt_32768_uint16(ushort x)
        {
            return x < 32768L;
        }
        private static bool le_32768_uint16(ushort x)
        {
            return x <= 32768L;
        }
        private static bool gt_32768_uint16(ushort x)
        {
            return x > 32768L;
        }
        private static bool ge_32768_uint16(ushort x)
        {
            return x >= 32768L;
        }
        private static bool eq_32768_uint16(ushort x)
        {
            return x == 32768L;
        }
        private static bool ne_32768_uint16(ushort x)
        {
            return x != 32768L;
        }
        private static bool lt_65534_uint16(ushort x)
        {
            return x < 65534L;
        }
        private static bool le_65534_uint16(ushort x)
        {
            return x <= 65534L;
        }
        private static bool gt_65534_uint16(ushort x)
        {
            return x > 65534L;
        }
        private static bool ge_65534_uint16(ushort x)
        {
            return x >= 65534L;
        }
        private static bool eq_65534_uint16(ushort x)
        {
            return x == 65534L;
        }
        private static bool ne_65534_uint16(ushort x)
        {
            return x != 65534L;
        }
        private static bool lt_65535_uint16(ushort x)
        {
            return x < 65535L;
        }
        private static bool le_65535_uint16(ushort x)
        {
            return x <= 65535L;
        }
        private static bool gt_65535_uint16(ushort x)
        {
            return x > 65535L;
        }
        private static bool ge_65535_uint16(ushort x)
        {
            return x >= 65535L;
        }
        private static bool eq_65535_uint16(ushort x)
        {
            return x == 65535L;
        }
        private static bool ne_65535_uint16(ushort x)
        {
            return x != 65535L;
        }



        // uint8 tests
        private static byte uint8_vals = new slice<byte>(new byte[] { 0, 1, 126, 127, 128, 254, 255 });

        private static bool lt_0_uint8(byte x)
        {
            return x < 0L;
        }
        private static bool le_0_uint8(byte x)
        {
            return x <= 0L;
        }
        private static bool gt_0_uint8(byte x)
        {
            return x > 0L;
        }
        private static bool ge_0_uint8(byte x)
        {
            return x >= 0L;
        }
        private static bool eq_0_uint8(byte x)
        {
            return x == 0L;
        }
        private static bool ne_0_uint8(byte x)
        {
            return x != 0L;
        }
        private static bool lt_1_uint8(byte x)
        {
            return x < 1L;
        }
        private static bool le_1_uint8(byte x)
        {
            return x <= 1L;
        }
        private static bool gt_1_uint8(byte x)
        {
            return x > 1L;
        }
        private static bool ge_1_uint8(byte x)
        {
            return x >= 1L;
        }
        private static bool eq_1_uint8(byte x)
        {
            return x == 1L;
        }
        private static bool ne_1_uint8(byte x)
        {
            return x != 1L;
        }
        private static bool lt_126_uint8(byte x)
        {
            return x < 126L;
        }
        private static bool le_126_uint8(byte x)
        {
            return x <= 126L;
        }
        private static bool gt_126_uint8(byte x)
        {
            return x > 126L;
        }
        private static bool ge_126_uint8(byte x)
        {
            return x >= 126L;
        }
        private static bool eq_126_uint8(byte x)
        {
            return x == 126L;
        }
        private static bool ne_126_uint8(byte x)
        {
            return x != 126L;
        }
        private static bool lt_127_uint8(byte x)
        {
            return x < 127L;
        }
        private static bool le_127_uint8(byte x)
        {
            return x <= 127L;
        }
        private static bool gt_127_uint8(byte x)
        {
            return x > 127L;
        }
        private static bool ge_127_uint8(byte x)
        {
            return x >= 127L;
        }
        private static bool eq_127_uint8(byte x)
        {
            return x == 127L;
        }
        private static bool ne_127_uint8(byte x)
        {
            return x != 127L;
        }
        private static bool lt_128_uint8(byte x)
        {
            return x < 128L;
        }
        private static bool le_128_uint8(byte x)
        {
            return x <= 128L;
        }
        private static bool gt_128_uint8(byte x)
        {
            return x > 128L;
        }
        private static bool ge_128_uint8(byte x)
        {
            return x >= 128L;
        }
        private static bool eq_128_uint8(byte x)
        {
            return x == 128L;
        }
        private static bool ne_128_uint8(byte x)
        {
            return x != 128L;
        }
        private static bool lt_254_uint8(byte x)
        {
            return x < 254L;
        }
        private static bool le_254_uint8(byte x)
        {
            return x <= 254L;
        }
        private static bool gt_254_uint8(byte x)
        {
            return x > 254L;
        }
        private static bool ge_254_uint8(byte x)
        {
            return x >= 254L;
        }
        private static bool eq_254_uint8(byte x)
        {
            return x == 254L;
        }
        private static bool ne_254_uint8(byte x)
        {
            return x != 254L;
        }
        private static bool lt_255_uint8(byte x)
        {
            return x < 255L;
        }
        private static bool le_255_uint8(byte x)
        {
            return x <= 255L;
        }
        private static bool gt_255_uint8(byte x)
        {
            return x > 255L;
        }
        private static bool ge_255_uint8(byte x)
        {
            return x >= 255L;
        }
        private static bool eq_255_uint8(byte x)
        {
            return x == 255L;
        }
        private static bool ne_255_uint8(byte x)
        {
            return x != 255L;
        }



        // int64 tests
        private static long int64_vals = new slice<long>(new long[] { -9223372036854775808, -9223372036854775807, -2147483649, -2147483648, -2147483647, -32769, -32768, -32767, -129, -128, -127, -1, 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767, 32768, 65534, 65535, 65536, 2147483646, 2147483647, 2147483648, 4278190080, 4294967294, 4294967295, 4294967296, 1095216660480, 9223372036854775806, 9223372036854775807 });

        private static bool lt_neg9223372036854775808_int64(long x)
        {
            return x < -9223372036854775808UL;
        }
        private static bool le_neg9223372036854775808_int64(long x)
        {
            return x <= -9223372036854775808UL;
        }
        private static bool gt_neg9223372036854775808_int64(long x)
        {
            return x > -9223372036854775808UL;
        }
        private static bool ge_neg9223372036854775808_int64(long x)
        {
            return x >= -9223372036854775808UL;
        }
        private static bool eq_neg9223372036854775808_int64(long x)
        {
            return x == -9223372036854775808UL;
        }
        private static bool ne_neg9223372036854775808_int64(long x)
        {
            return x != -9223372036854775808UL;
        }
        private static bool lt_neg9223372036854775807_int64(long x)
        {
            return x < -9223372036854775807L;
        }
        private static bool le_neg9223372036854775807_int64(long x)
        {
            return x <= -9223372036854775807L;
        }
        private static bool gt_neg9223372036854775807_int64(long x)
        {
            return x > -9223372036854775807L;
        }
        private static bool ge_neg9223372036854775807_int64(long x)
        {
            return x >= -9223372036854775807L;
        }
        private static bool eq_neg9223372036854775807_int64(long x)
        {
            return x == -9223372036854775807L;
        }
        private static bool ne_neg9223372036854775807_int64(long x)
        {
            return x != -9223372036854775807L;
        }
        private static bool lt_neg2147483649_int64(long x)
        {
            return x < -2147483649L;
        }
        private static bool le_neg2147483649_int64(long x)
        {
            return x <= -2147483649L;
        }
        private static bool gt_neg2147483649_int64(long x)
        {
            return x > -2147483649L;
        }
        private static bool ge_neg2147483649_int64(long x)
        {
            return x >= -2147483649L;
        }
        private static bool eq_neg2147483649_int64(long x)
        {
            return x == -2147483649L;
        }
        private static bool ne_neg2147483649_int64(long x)
        {
            return x != -2147483649L;
        }
        private static bool lt_neg2147483648_int64(long x)
        {
            return x < -2147483648L;
        }
        private static bool le_neg2147483648_int64(long x)
        {
            return x <= -2147483648L;
        }
        private static bool gt_neg2147483648_int64(long x)
        {
            return x > -2147483648L;
        }
        private static bool ge_neg2147483648_int64(long x)
        {
            return x >= -2147483648L;
        }
        private static bool eq_neg2147483648_int64(long x)
        {
            return x == -2147483648L;
        }
        private static bool ne_neg2147483648_int64(long x)
        {
            return x != -2147483648L;
        }
        private static bool lt_neg2147483647_int64(long x)
        {
            return x < -2147483647L;
        }
        private static bool le_neg2147483647_int64(long x)
        {
            return x <= -2147483647L;
        }
        private static bool gt_neg2147483647_int64(long x)
        {
            return x > -2147483647L;
        }
        private static bool ge_neg2147483647_int64(long x)
        {
            return x >= -2147483647L;
        }
        private static bool eq_neg2147483647_int64(long x)
        {
            return x == -2147483647L;
        }
        private static bool ne_neg2147483647_int64(long x)
        {
            return x != -2147483647L;
        }
        private static bool lt_neg32769_int64(long x)
        {
            return x < -32769L;
        }
        private static bool le_neg32769_int64(long x)
        {
            return x <= -32769L;
        }
        private static bool gt_neg32769_int64(long x)
        {
            return x > -32769L;
        }
        private static bool ge_neg32769_int64(long x)
        {
            return x >= -32769L;
        }
        private static bool eq_neg32769_int64(long x)
        {
            return x == -32769L;
        }
        private static bool ne_neg32769_int64(long x)
        {
            return x != -32769L;
        }
        private static bool lt_neg32768_int64(long x)
        {
            return x < -32768L;
        }
        private static bool le_neg32768_int64(long x)
        {
            return x <= -32768L;
        }
        private static bool gt_neg32768_int64(long x)
        {
            return x > -32768L;
        }
        private static bool ge_neg32768_int64(long x)
        {
            return x >= -32768L;
        }
        private static bool eq_neg32768_int64(long x)
        {
            return x == -32768L;
        }
        private static bool ne_neg32768_int64(long x)
        {
            return x != -32768L;
        }
        private static bool lt_neg32767_int64(long x)
        {
            return x < -32767L;
        }
        private static bool le_neg32767_int64(long x)
        {
            return x <= -32767L;
        }
        private static bool gt_neg32767_int64(long x)
        {
            return x > -32767L;
        }
        private static bool ge_neg32767_int64(long x)
        {
            return x >= -32767L;
        }
        private static bool eq_neg32767_int64(long x)
        {
            return x == -32767L;
        }
        private static bool ne_neg32767_int64(long x)
        {
            return x != -32767L;
        }
        private static bool lt_neg129_int64(long x)
        {
            return x < -129L;
        }
        private static bool le_neg129_int64(long x)
        {
            return x <= -129L;
        }
        private static bool gt_neg129_int64(long x)
        {
            return x > -129L;
        }
        private static bool ge_neg129_int64(long x)
        {
            return x >= -129L;
        }
        private static bool eq_neg129_int64(long x)
        {
            return x == -129L;
        }
        private static bool ne_neg129_int64(long x)
        {
            return x != -129L;
        }
        private static bool lt_neg128_int64(long x)
        {
            return x < -128L;
        }
        private static bool le_neg128_int64(long x)
        {
            return x <= -128L;
        }
        private static bool gt_neg128_int64(long x)
        {
            return x > -128L;
        }
        private static bool ge_neg128_int64(long x)
        {
            return x >= -128L;
        }
        private static bool eq_neg128_int64(long x)
        {
            return x == -128L;
        }
        private static bool ne_neg128_int64(long x)
        {
            return x != -128L;
        }
        private static bool lt_neg127_int64(long x)
        {
            return x < -127L;
        }
        private static bool le_neg127_int64(long x)
        {
            return x <= -127L;
        }
        private static bool gt_neg127_int64(long x)
        {
            return x > -127L;
        }
        private static bool ge_neg127_int64(long x)
        {
            return x >= -127L;
        }
        private static bool eq_neg127_int64(long x)
        {
            return x == -127L;
        }
        private static bool ne_neg127_int64(long x)
        {
            return x != -127L;
        }
        private static bool lt_neg1_int64(long x)
        {
            return x < -1L;
        }
        private static bool le_neg1_int64(long x)
        {
            return x <= -1L;
        }
        private static bool gt_neg1_int64(long x)
        {
            return x > -1L;
        }
        private static bool ge_neg1_int64(long x)
        {
            return x >= -1L;
        }
        private static bool eq_neg1_int64(long x)
        {
            return x == -1L;
        }
        private static bool ne_neg1_int64(long x)
        {
            return x != -1L;
        }
        private static bool lt_0_int64(long x)
        {
            return x < 0L;
        }
        private static bool le_0_int64(long x)
        {
            return x <= 0L;
        }
        private static bool gt_0_int64(long x)
        {
            return x > 0L;
        }
        private static bool ge_0_int64(long x)
        {
            return x >= 0L;
        }
        private static bool eq_0_int64(long x)
        {
            return x == 0L;
        }
        private static bool ne_0_int64(long x)
        {
            return x != 0L;
        }
        private static bool lt_1_int64(long x)
        {
            return x < 1L;
        }
        private static bool le_1_int64(long x)
        {
            return x <= 1L;
        }
        private static bool gt_1_int64(long x)
        {
            return x > 1L;
        }
        private static bool ge_1_int64(long x)
        {
            return x >= 1L;
        }
        private static bool eq_1_int64(long x)
        {
            return x == 1L;
        }
        private static bool ne_1_int64(long x)
        {
            return x != 1L;
        }
        private static bool lt_126_int64(long x)
        {
            return x < 126L;
        }
        private static bool le_126_int64(long x)
        {
            return x <= 126L;
        }
        private static bool gt_126_int64(long x)
        {
            return x > 126L;
        }
        private static bool ge_126_int64(long x)
        {
            return x >= 126L;
        }
        private static bool eq_126_int64(long x)
        {
            return x == 126L;
        }
        private static bool ne_126_int64(long x)
        {
            return x != 126L;
        }
        private static bool lt_127_int64(long x)
        {
            return x < 127L;
        }
        private static bool le_127_int64(long x)
        {
            return x <= 127L;
        }
        private static bool gt_127_int64(long x)
        {
            return x > 127L;
        }
        private static bool ge_127_int64(long x)
        {
            return x >= 127L;
        }
        private static bool eq_127_int64(long x)
        {
            return x == 127L;
        }
        private static bool ne_127_int64(long x)
        {
            return x != 127L;
        }
        private static bool lt_128_int64(long x)
        {
            return x < 128L;
        }
        private static bool le_128_int64(long x)
        {
            return x <= 128L;
        }
        private static bool gt_128_int64(long x)
        {
            return x > 128L;
        }
        private static bool ge_128_int64(long x)
        {
            return x >= 128L;
        }
        private static bool eq_128_int64(long x)
        {
            return x == 128L;
        }
        private static bool ne_128_int64(long x)
        {
            return x != 128L;
        }
        private static bool lt_254_int64(long x)
        {
            return x < 254L;
        }
        private static bool le_254_int64(long x)
        {
            return x <= 254L;
        }
        private static bool gt_254_int64(long x)
        {
            return x > 254L;
        }
        private static bool ge_254_int64(long x)
        {
            return x >= 254L;
        }
        private static bool eq_254_int64(long x)
        {
            return x == 254L;
        }
        private static bool ne_254_int64(long x)
        {
            return x != 254L;
        }
        private static bool lt_255_int64(long x)
        {
            return x < 255L;
        }
        private static bool le_255_int64(long x)
        {
            return x <= 255L;
        }
        private static bool gt_255_int64(long x)
        {
            return x > 255L;
        }
        private static bool ge_255_int64(long x)
        {
            return x >= 255L;
        }
        private static bool eq_255_int64(long x)
        {
            return x == 255L;
        }
        private static bool ne_255_int64(long x)
        {
            return x != 255L;
        }
        private static bool lt_256_int64(long x)
        {
            return x < 256L;
        }
        private static bool le_256_int64(long x)
        {
            return x <= 256L;
        }
        private static bool gt_256_int64(long x)
        {
            return x > 256L;
        }
        private static bool ge_256_int64(long x)
        {
            return x >= 256L;
        }
        private static bool eq_256_int64(long x)
        {
            return x == 256L;
        }
        private static bool ne_256_int64(long x)
        {
            return x != 256L;
        }
        private static bool lt_32766_int64(long x)
        {
            return x < 32766L;
        }
        private static bool le_32766_int64(long x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_int64(long x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_int64(long x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_int64(long x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_int64(long x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_int64(long x)
        {
            return x < 32767L;
        }
        private static bool le_32767_int64(long x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_int64(long x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_int64(long x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_int64(long x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_int64(long x)
        {
            return x != 32767L;
        }
        private static bool lt_32768_int64(long x)
        {
            return x < 32768L;
        }
        private static bool le_32768_int64(long x)
        {
            return x <= 32768L;
        }
        private static bool gt_32768_int64(long x)
        {
            return x > 32768L;
        }
        private static bool ge_32768_int64(long x)
        {
            return x >= 32768L;
        }
        private static bool eq_32768_int64(long x)
        {
            return x == 32768L;
        }
        private static bool ne_32768_int64(long x)
        {
            return x != 32768L;
        }
        private static bool lt_65534_int64(long x)
        {
            return x < 65534L;
        }
        private static bool le_65534_int64(long x)
        {
            return x <= 65534L;
        }
        private static bool gt_65534_int64(long x)
        {
            return x > 65534L;
        }
        private static bool ge_65534_int64(long x)
        {
            return x >= 65534L;
        }
        private static bool eq_65534_int64(long x)
        {
            return x == 65534L;
        }
        private static bool ne_65534_int64(long x)
        {
            return x != 65534L;
        }
        private static bool lt_65535_int64(long x)
        {
            return x < 65535L;
        }
        private static bool le_65535_int64(long x)
        {
            return x <= 65535L;
        }
        private static bool gt_65535_int64(long x)
        {
            return x > 65535L;
        }
        private static bool ge_65535_int64(long x)
        {
            return x >= 65535L;
        }
        private static bool eq_65535_int64(long x)
        {
            return x == 65535L;
        }
        private static bool ne_65535_int64(long x)
        {
            return x != 65535L;
        }
        private static bool lt_65536_int64(long x)
        {
            return x < 65536L;
        }
        private static bool le_65536_int64(long x)
        {
            return x <= 65536L;
        }
        private static bool gt_65536_int64(long x)
        {
            return x > 65536L;
        }
        private static bool ge_65536_int64(long x)
        {
            return x >= 65536L;
        }
        private static bool eq_65536_int64(long x)
        {
            return x == 65536L;
        }
        private static bool ne_65536_int64(long x)
        {
            return x != 65536L;
        }
        private static bool lt_2147483646_int64(long x)
        {
            return x < 2147483646L;
        }
        private static bool le_2147483646_int64(long x)
        {
            return x <= 2147483646L;
        }
        private static bool gt_2147483646_int64(long x)
        {
            return x > 2147483646L;
        }
        private static bool ge_2147483646_int64(long x)
        {
            return x >= 2147483646L;
        }
        private static bool eq_2147483646_int64(long x)
        {
            return x == 2147483646L;
        }
        private static bool ne_2147483646_int64(long x)
        {
            return x != 2147483646L;
        }
        private static bool lt_2147483647_int64(long x)
        {
            return x < 2147483647L;
        }
        private static bool le_2147483647_int64(long x)
        {
            return x <= 2147483647L;
        }
        private static bool gt_2147483647_int64(long x)
        {
            return x > 2147483647L;
        }
        private static bool ge_2147483647_int64(long x)
        {
            return x >= 2147483647L;
        }
        private static bool eq_2147483647_int64(long x)
        {
            return x == 2147483647L;
        }
        private static bool ne_2147483647_int64(long x)
        {
            return x != 2147483647L;
        }
        private static bool lt_2147483648_int64(long x)
        {
            return x < 2147483648L;
        }
        private static bool le_2147483648_int64(long x)
        {
            return x <= 2147483648L;
        }
        private static bool gt_2147483648_int64(long x)
        {
            return x > 2147483648L;
        }
        private static bool ge_2147483648_int64(long x)
        {
            return x >= 2147483648L;
        }
        private static bool eq_2147483648_int64(long x)
        {
            return x == 2147483648L;
        }
        private static bool ne_2147483648_int64(long x)
        {
            return x != 2147483648L;
        }
        private static bool lt_4278190080_int64(long x)
        {
            return x < 4278190080L;
        }
        private static bool le_4278190080_int64(long x)
        {
            return x <= 4278190080L;
        }
        private static bool gt_4278190080_int64(long x)
        {
            return x > 4278190080L;
        }
        private static bool ge_4278190080_int64(long x)
        {
            return x >= 4278190080L;
        }
        private static bool eq_4278190080_int64(long x)
        {
            return x == 4278190080L;
        }
        private static bool ne_4278190080_int64(long x)
        {
            return x != 4278190080L;
        }
        private static bool lt_4294967294_int64(long x)
        {
            return x < 4294967294L;
        }
        private static bool le_4294967294_int64(long x)
        {
            return x <= 4294967294L;
        }
        private static bool gt_4294967294_int64(long x)
        {
            return x > 4294967294L;
        }
        private static bool ge_4294967294_int64(long x)
        {
            return x >= 4294967294L;
        }
        private static bool eq_4294967294_int64(long x)
        {
            return x == 4294967294L;
        }
        private static bool ne_4294967294_int64(long x)
        {
            return x != 4294967294L;
        }
        private static bool lt_4294967295_int64(long x)
        {
            return x < 4294967295L;
        }
        private static bool le_4294967295_int64(long x)
        {
            return x <= 4294967295L;
        }
        private static bool gt_4294967295_int64(long x)
        {
            return x > 4294967295L;
        }
        private static bool ge_4294967295_int64(long x)
        {
            return x >= 4294967295L;
        }
        private static bool eq_4294967295_int64(long x)
        {
            return x == 4294967295L;
        }
        private static bool ne_4294967295_int64(long x)
        {
            return x != 4294967295L;
        }
        private static bool lt_4294967296_int64(long x)
        {
            return x < 4294967296L;
        }
        private static bool le_4294967296_int64(long x)
        {
            return x <= 4294967296L;
        }
        private static bool gt_4294967296_int64(long x)
        {
            return x > 4294967296L;
        }
        private static bool ge_4294967296_int64(long x)
        {
            return x >= 4294967296L;
        }
        private static bool eq_4294967296_int64(long x)
        {
            return x == 4294967296L;
        }
        private static bool ne_4294967296_int64(long x)
        {
            return x != 4294967296L;
        }
        private static bool lt_1095216660480_int64(long x)
        {
            return x < 1095216660480L;
        }
        private static bool le_1095216660480_int64(long x)
        {
            return x <= 1095216660480L;
        }
        private static bool gt_1095216660480_int64(long x)
        {
            return x > 1095216660480L;
        }
        private static bool ge_1095216660480_int64(long x)
        {
            return x >= 1095216660480L;
        }
        private static bool eq_1095216660480_int64(long x)
        {
            return x == 1095216660480L;
        }
        private static bool ne_1095216660480_int64(long x)
        {
            return x != 1095216660480L;
        }
        private static bool lt_9223372036854775806_int64(long x)
        {
            return x < 9223372036854775806L;
        }
        private static bool le_9223372036854775806_int64(long x)
        {
            return x <= 9223372036854775806L;
        }
        private static bool gt_9223372036854775806_int64(long x)
        {
            return x > 9223372036854775806L;
        }
        private static bool ge_9223372036854775806_int64(long x)
        {
            return x >= 9223372036854775806L;
        }
        private static bool eq_9223372036854775806_int64(long x)
        {
            return x == 9223372036854775806L;
        }
        private static bool ne_9223372036854775806_int64(long x)
        {
            return x != 9223372036854775806L;
        }
        private static bool lt_9223372036854775807_int64(long x)
        {
            return x < 9223372036854775807L;
        }
        private static bool le_9223372036854775807_int64(long x)
        {
            return x <= 9223372036854775807L;
        }
        private static bool gt_9223372036854775807_int64(long x)
        {
            return x > 9223372036854775807L;
        }
        private static bool ge_9223372036854775807_int64(long x)
        {
            return x >= 9223372036854775807L;
        }
        private static bool eq_9223372036854775807_int64(long x)
        {
            return x == 9223372036854775807L;
        }
        private static bool ne_9223372036854775807_int64(long x)
        {
            return x != 9223372036854775807L;
        }



        // int32 tests
        private static int int32_vals = new slice<int>(new int[] { -2147483648, -2147483647, -32769, -32768, -32767, -129, -128, -127, -1, 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767, 32768, 65534, 65535, 65536, 2147483646, 2147483647 });

        private static bool lt_neg2147483648_int32(int x)
        {
            return x < -2147483648L;
        }
        private static bool le_neg2147483648_int32(int x)
        {
            return x <= -2147483648L;
        }
        private static bool gt_neg2147483648_int32(int x)
        {
            return x > -2147483648L;
        }
        private static bool ge_neg2147483648_int32(int x)
        {
            return x >= -2147483648L;
        }
        private static bool eq_neg2147483648_int32(int x)
        {
            return x == -2147483648L;
        }
        private static bool ne_neg2147483648_int32(int x)
        {
            return x != -2147483648L;
        }
        private static bool lt_neg2147483647_int32(int x)
        {
            return x < -2147483647L;
        }
        private static bool le_neg2147483647_int32(int x)
        {
            return x <= -2147483647L;
        }
        private static bool gt_neg2147483647_int32(int x)
        {
            return x > -2147483647L;
        }
        private static bool ge_neg2147483647_int32(int x)
        {
            return x >= -2147483647L;
        }
        private static bool eq_neg2147483647_int32(int x)
        {
            return x == -2147483647L;
        }
        private static bool ne_neg2147483647_int32(int x)
        {
            return x != -2147483647L;
        }
        private static bool lt_neg32769_int32(int x)
        {
            return x < -32769L;
        }
        private static bool le_neg32769_int32(int x)
        {
            return x <= -32769L;
        }
        private static bool gt_neg32769_int32(int x)
        {
            return x > -32769L;
        }
        private static bool ge_neg32769_int32(int x)
        {
            return x >= -32769L;
        }
        private static bool eq_neg32769_int32(int x)
        {
            return x == -32769L;
        }
        private static bool ne_neg32769_int32(int x)
        {
            return x != -32769L;
        }
        private static bool lt_neg32768_int32(int x)
        {
            return x < -32768L;
        }
        private static bool le_neg32768_int32(int x)
        {
            return x <= -32768L;
        }
        private static bool gt_neg32768_int32(int x)
        {
            return x > -32768L;
        }
        private static bool ge_neg32768_int32(int x)
        {
            return x >= -32768L;
        }
        private static bool eq_neg32768_int32(int x)
        {
            return x == -32768L;
        }
        private static bool ne_neg32768_int32(int x)
        {
            return x != -32768L;
        }
        private static bool lt_neg32767_int32(int x)
        {
            return x < -32767L;
        }
        private static bool le_neg32767_int32(int x)
        {
            return x <= -32767L;
        }
        private static bool gt_neg32767_int32(int x)
        {
            return x > -32767L;
        }
        private static bool ge_neg32767_int32(int x)
        {
            return x >= -32767L;
        }
        private static bool eq_neg32767_int32(int x)
        {
            return x == -32767L;
        }
        private static bool ne_neg32767_int32(int x)
        {
            return x != -32767L;
        }
        private static bool lt_neg129_int32(int x)
        {
            return x < -129L;
        }
        private static bool le_neg129_int32(int x)
        {
            return x <= -129L;
        }
        private static bool gt_neg129_int32(int x)
        {
            return x > -129L;
        }
        private static bool ge_neg129_int32(int x)
        {
            return x >= -129L;
        }
        private static bool eq_neg129_int32(int x)
        {
            return x == -129L;
        }
        private static bool ne_neg129_int32(int x)
        {
            return x != -129L;
        }
        private static bool lt_neg128_int32(int x)
        {
            return x < -128L;
        }
        private static bool le_neg128_int32(int x)
        {
            return x <= -128L;
        }
        private static bool gt_neg128_int32(int x)
        {
            return x > -128L;
        }
        private static bool ge_neg128_int32(int x)
        {
            return x >= -128L;
        }
        private static bool eq_neg128_int32(int x)
        {
            return x == -128L;
        }
        private static bool ne_neg128_int32(int x)
        {
            return x != -128L;
        }
        private static bool lt_neg127_int32(int x)
        {
            return x < -127L;
        }
        private static bool le_neg127_int32(int x)
        {
            return x <= -127L;
        }
        private static bool gt_neg127_int32(int x)
        {
            return x > -127L;
        }
        private static bool ge_neg127_int32(int x)
        {
            return x >= -127L;
        }
        private static bool eq_neg127_int32(int x)
        {
            return x == -127L;
        }
        private static bool ne_neg127_int32(int x)
        {
            return x != -127L;
        }
        private static bool lt_neg1_int32(int x)
        {
            return x < -1L;
        }
        private static bool le_neg1_int32(int x)
        {
            return x <= -1L;
        }
        private static bool gt_neg1_int32(int x)
        {
            return x > -1L;
        }
        private static bool ge_neg1_int32(int x)
        {
            return x >= -1L;
        }
        private static bool eq_neg1_int32(int x)
        {
            return x == -1L;
        }
        private static bool ne_neg1_int32(int x)
        {
            return x != -1L;
        }
        private static bool lt_0_int32(int x)
        {
            return x < 0L;
        }
        private static bool le_0_int32(int x)
        {
            return x <= 0L;
        }
        private static bool gt_0_int32(int x)
        {
            return x > 0L;
        }
        private static bool ge_0_int32(int x)
        {
            return x >= 0L;
        }
        private static bool eq_0_int32(int x)
        {
            return x == 0L;
        }
        private static bool ne_0_int32(int x)
        {
            return x != 0L;
        }
        private static bool lt_1_int32(int x)
        {
            return x < 1L;
        }
        private static bool le_1_int32(int x)
        {
            return x <= 1L;
        }
        private static bool gt_1_int32(int x)
        {
            return x > 1L;
        }
        private static bool ge_1_int32(int x)
        {
            return x >= 1L;
        }
        private static bool eq_1_int32(int x)
        {
            return x == 1L;
        }
        private static bool ne_1_int32(int x)
        {
            return x != 1L;
        }
        private static bool lt_126_int32(int x)
        {
            return x < 126L;
        }
        private static bool le_126_int32(int x)
        {
            return x <= 126L;
        }
        private static bool gt_126_int32(int x)
        {
            return x > 126L;
        }
        private static bool ge_126_int32(int x)
        {
            return x >= 126L;
        }
        private static bool eq_126_int32(int x)
        {
            return x == 126L;
        }
        private static bool ne_126_int32(int x)
        {
            return x != 126L;
        }
        private static bool lt_127_int32(int x)
        {
            return x < 127L;
        }
        private static bool le_127_int32(int x)
        {
            return x <= 127L;
        }
        private static bool gt_127_int32(int x)
        {
            return x > 127L;
        }
        private static bool ge_127_int32(int x)
        {
            return x >= 127L;
        }
        private static bool eq_127_int32(int x)
        {
            return x == 127L;
        }
        private static bool ne_127_int32(int x)
        {
            return x != 127L;
        }
        private static bool lt_128_int32(int x)
        {
            return x < 128L;
        }
        private static bool le_128_int32(int x)
        {
            return x <= 128L;
        }
        private static bool gt_128_int32(int x)
        {
            return x > 128L;
        }
        private static bool ge_128_int32(int x)
        {
            return x >= 128L;
        }
        private static bool eq_128_int32(int x)
        {
            return x == 128L;
        }
        private static bool ne_128_int32(int x)
        {
            return x != 128L;
        }
        private static bool lt_254_int32(int x)
        {
            return x < 254L;
        }
        private static bool le_254_int32(int x)
        {
            return x <= 254L;
        }
        private static bool gt_254_int32(int x)
        {
            return x > 254L;
        }
        private static bool ge_254_int32(int x)
        {
            return x >= 254L;
        }
        private static bool eq_254_int32(int x)
        {
            return x == 254L;
        }
        private static bool ne_254_int32(int x)
        {
            return x != 254L;
        }
        private static bool lt_255_int32(int x)
        {
            return x < 255L;
        }
        private static bool le_255_int32(int x)
        {
            return x <= 255L;
        }
        private static bool gt_255_int32(int x)
        {
            return x > 255L;
        }
        private static bool ge_255_int32(int x)
        {
            return x >= 255L;
        }
        private static bool eq_255_int32(int x)
        {
            return x == 255L;
        }
        private static bool ne_255_int32(int x)
        {
            return x != 255L;
        }
        private static bool lt_256_int32(int x)
        {
            return x < 256L;
        }
        private static bool le_256_int32(int x)
        {
            return x <= 256L;
        }
        private static bool gt_256_int32(int x)
        {
            return x > 256L;
        }
        private static bool ge_256_int32(int x)
        {
            return x >= 256L;
        }
        private static bool eq_256_int32(int x)
        {
            return x == 256L;
        }
        private static bool ne_256_int32(int x)
        {
            return x != 256L;
        }
        private static bool lt_32766_int32(int x)
        {
            return x < 32766L;
        }
        private static bool le_32766_int32(int x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_int32(int x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_int32(int x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_int32(int x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_int32(int x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_int32(int x)
        {
            return x < 32767L;
        }
        private static bool le_32767_int32(int x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_int32(int x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_int32(int x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_int32(int x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_int32(int x)
        {
            return x != 32767L;
        }
        private static bool lt_32768_int32(int x)
        {
            return x < 32768L;
        }
        private static bool le_32768_int32(int x)
        {
            return x <= 32768L;
        }
        private static bool gt_32768_int32(int x)
        {
            return x > 32768L;
        }
        private static bool ge_32768_int32(int x)
        {
            return x >= 32768L;
        }
        private static bool eq_32768_int32(int x)
        {
            return x == 32768L;
        }
        private static bool ne_32768_int32(int x)
        {
            return x != 32768L;
        }
        private static bool lt_65534_int32(int x)
        {
            return x < 65534L;
        }
        private static bool le_65534_int32(int x)
        {
            return x <= 65534L;
        }
        private static bool gt_65534_int32(int x)
        {
            return x > 65534L;
        }
        private static bool ge_65534_int32(int x)
        {
            return x >= 65534L;
        }
        private static bool eq_65534_int32(int x)
        {
            return x == 65534L;
        }
        private static bool ne_65534_int32(int x)
        {
            return x != 65534L;
        }
        private static bool lt_65535_int32(int x)
        {
            return x < 65535L;
        }
        private static bool le_65535_int32(int x)
        {
            return x <= 65535L;
        }
        private static bool gt_65535_int32(int x)
        {
            return x > 65535L;
        }
        private static bool ge_65535_int32(int x)
        {
            return x >= 65535L;
        }
        private static bool eq_65535_int32(int x)
        {
            return x == 65535L;
        }
        private static bool ne_65535_int32(int x)
        {
            return x != 65535L;
        }
        private static bool lt_65536_int32(int x)
        {
            return x < 65536L;
        }
        private static bool le_65536_int32(int x)
        {
            return x <= 65536L;
        }
        private static bool gt_65536_int32(int x)
        {
            return x > 65536L;
        }
        private static bool ge_65536_int32(int x)
        {
            return x >= 65536L;
        }
        private static bool eq_65536_int32(int x)
        {
            return x == 65536L;
        }
        private static bool ne_65536_int32(int x)
        {
            return x != 65536L;
        }
        private static bool lt_2147483646_int32(int x)
        {
            return x < 2147483646L;
        }
        private static bool le_2147483646_int32(int x)
        {
            return x <= 2147483646L;
        }
        private static bool gt_2147483646_int32(int x)
        {
            return x > 2147483646L;
        }
        private static bool ge_2147483646_int32(int x)
        {
            return x >= 2147483646L;
        }
        private static bool eq_2147483646_int32(int x)
        {
            return x == 2147483646L;
        }
        private static bool ne_2147483646_int32(int x)
        {
            return x != 2147483646L;
        }
        private static bool lt_2147483647_int32(int x)
        {
            return x < 2147483647L;
        }
        private static bool le_2147483647_int32(int x)
        {
            return x <= 2147483647L;
        }
        private static bool gt_2147483647_int32(int x)
        {
            return x > 2147483647L;
        }
        private static bool ge_2147483647_int32(int x)
        {
            return x >= 2147483647L;
        }
        private static bool eq_2147483647_int32(int x)
        {
            return x == 2147483647L;
        }
        private static bool ne_2147483647_int32(int x)
        {
            return x != 2147483647L;
        }



        // int16 tests
        private static short int16_vals = new slice<short>(new short[] { -32768, -32767, -129, -128, -127, -1, 0, 1, 126, 127, 128, 254, 255, 256, 32766, 32767 });

        private static bool lt_neg32768_int16(short x)
        {
            return x < -32768L;
        }
        private static bool le_neg32768_int16(short x)
        {
            return x <= -32768L;
        }
        private static bool gt_neg32768_int16(short x)
        {
            return x > -32768L;
        }
        private static bool ge_neg32768_int16(short x)
        {
            return x >= -32768L;
        }
        private static bool eq_neg32768_int16(short x)
        {
            return x == -32768L;
        }
        private static bool ne_neg32768_int16(short x)
        {
            return x != -32768L;
        }
        private static bool lt_neg32767_int16(short x)
        {
            return x < -32767L;
        }
        private static bool le_neg32767_int16(short x)
        {
            return x <= -32767L;
        }
        private static bool gt_neg32767_int16(short x)
        {
            return x > -32767L;
        }
        private static bool ge_neg32767_int16(short x)
        {
            return x >= -32767L;
        }
        private static bool eq_neg32767_int16(short x)
        {
            return x == -32767L;
        }
        private static bool ne_neg32767_int16(short x)
        {
            return x != -32767L;
        }
        private static bool lt_neg129_int16(short x)
        {
            return x < -129L;
        }
        private static bool le_neg129_int16(short x)
        {
            return x <= -129L;
        }
        private static bool gt_neg129_int16(short x)
        {
            return x > -129L;
        }
        private static bool ge_neg129_int16(short x)
        {
            return x >= -129L;
        }
        private static bool eq_neg129_int16(short x)
        {
            return x == -129L;
        }
        private static bool ne_neg129_int16(short x)
        {
            return x != -129L;
        }
        private static bool lt_neg128_int16(short x)
        {
            return x < -128L;
        }
        private static bool le_neg128_int16(short x)
        {
            return x <= -128L;
        }
        private static bool gt_neg128_int16(short x)
        {
            return x > -128L;
        }
        private static bool ge_neg128_int16(short x)
        {
            return x >= -128L;
        }
        private static bool eq_neg128_int16(short x)
        {
            return x == -128L;
        }
        private static bool ne_neg128_int16(short x)
        {
            return x != -128L;
        }
        private static bool lt_neg127_int16(short x)
        {
            return x < -127L;
        }
        private static bool le_neg127_int16(short x)
        {
            return x <= -127L;
        }
        private static bool gt_neg127_int16(short x)
        {
            return x > -127L;
        }
        private static bool ge_neg127_int16(short x)
        {
            return x >= -127L;
        }
        private static bool eq_neg127_int16(short x)
        {
            return x == -127L;
        }
        private static bool ne_neg127_int16(short x)
        {
            return x != -127L;
        }
        private static bool lt_neg1_int16(short x)
        {
            return x < -1L;
        }
        private static bool le_neg1_int16(short x)
        {
            return x <= -1L;
        }
        private static bool gt_neg1_int16(short x)
        {
            return x > -1L;
        }
        private static bool ge_neg1_int16(short x)
        {
            return x >= -1L;
        }
        private static bool eq_neg1_int16(short x)
        {
            return x == -1L;
        }
        private static bool ne_neg1_int16(short x)
        {
            return x != -1L;
        }
        private static bool lt_0_int16(short x)
        {
            return x < 0L;
        }
        private static bool le_0_int16(short x)
        {
            return x <= 0L;
        }
        private static bool gt_0_int16(short x)
        {
            return x > 0L;
        }
        private static bool ge_0_int16(short x)
        {
            return x >= 0L;
        }
        private static bool eq_0_int16(short x)
        {
            return x == 0L;
        }
        private static bool ne_0_int16(short x)
        {
            return x != 0L;
        }
        private static bool lt_1_int16(short x)
        {
            return x < 1L;
        }
        private static bool le_1_int16(short x)
        {
            return x <= 1L;
        }
        private static bool gt_1_int16(short x)
        {
            return x > 1L;
        }
        private static bool ge_1_int16(short x)
        {
            return x >= 1L;
        }
        private static bool eq_1_int16(short x)
        {
            return x == 1L;
        }
        private static bool ne_1_int16(short x)
        {
            return x != 1L;
        }
        private static bool lt_126_int16(short x)
        {
            return x < 126L;
        }
        private static bool le_126_int16(short x)
        {
            return x <= 126L;
        }
        private static bool gt_126_int16(short x)
        {
            return x > 126L;
        }
        private static bool ge_126_int16(short x)
        {
            return x >= 126L;
        }
        private static bool eq_126_int16(short x)
        {
            return x == 126L;
        }
        private static bool ne_126_int16(short x)
        {
            return x != 126L;
        }
        private static bool lt_127_int16(short x)
        {
            return x < 127L;
        }
        private static bool le_127_int16(short x)
        {
            return x <= 127L;
        }
        private static bool gt_127_int16(short x)
        {
            return x > 127L;
        }
        private static bool ge_127_int16(short x)
        {
            return x >= 127L;
        }
        private static bool eq_127_int16(short x)
        {
            return x == 127L;
        }
        private static bool ne_127_int16(short x)
        {
            return x != 127L;
        }
        private static bool lt_128_int16(short x)
        {
            return x < 128L;
        }
        private static bool le_128_int16(short x)
        {
            return x <= 128L;
        }
        private static bool gt_128_int16(short x)
        {
            return x > 128L;
        }
        private static bool ge_128_int16(short x)
        {
            return x >= 128L;
        }
        private static bool eq_128_int16(short x)
        {
            return x == 128L;
        }
        private static bool ne_128_int16(short x)
        {
            return x != 128L;
        }
        private static bool lt_254_int16(short x)
        {
            return x < 254L;
        }
        private static bool le_254_int16(short x)
        {
            return x <= 254L;
        }
        private static bool gt_254_int16(short x)
        {
            return x > 254L;
        }
        private static bool ge_254_int16(short x)
        {
            return x >= 254L;
        }
        private static bool eq_254_int16(short x)
        {
            return x == 254L;
        }
        private static bool ne_254_int16(short x)
        {
            return x != 254L;
        }
        private static bool lt_255_int16(short x)
        {
            return x < 255L;
        }
        private static bool le_255_int16(short x)
        {
            return x <= 255L;
        }
        private static bool gt_255_int16(short x)
        {
            return x > 255L;
        }
        private static bool ge_255_int16(short x)
        {
            return x >= 255L;
        }
        private static bool eq_255_int16(short x)
        {
            return x == 255L;
        }
        private static bool ne_255_int16(short x)
        {
            return x != 255L;
        }
        private static bool lt_256_int16(short x)
        {
            return x < 256L;
        }
        private static bool le_256_int16(short x)
        {
            return x <= 256L;
        }
        private static bool gt_256_int16(short x)
        {
            return x > 256L;
        }
        private static bool ge_256_int16(short x)
        {
            return x >= 256L;
        }
        private static bool eq_256_int16(short x)
        {
            return x == 256L;
        }
        private static bool ne_256_int16(short x)
        {
            return x != 256L;
        }
        private static bool lt_32766_int16(short x)
        {
            return x < 32766L;
        }
        private static bool le_32766_int16(short x)
        {
            return x <= 32766L;
        }
        private static bool gt_32766_int16(short x)
        {
            return x > 32766L;
        }
        private static bool ge_32766_int16(short x)
        {
            return x >= 32766L;
        }
        private static bool eq_32766_int16(short x)
        {
            return x == 32766L;
        }
        private static bool ne_32766_int16(short x)
        {
            return x != 32766L;
        }
        private static bool lt_32767_int16(short x)
        {
            return x < 32767L;
        }
        private static bool le_32767_int16(short x)
        {
            return x <= 32767L;
        }
        private static bool gt_32767_int16(short x)
        {
            return x > 32767L;
        }
        private static bool ge_32767_int16(short x)
        {
            return x >= 32767L;
        }
        private static bool eq_32767_int16(short x)
        {
            return x == 32767L;
        }
        private static bool ne_32767_int16(short x)
        {
            return x != 32767L;
        }



        // int8 tests
        private static sbyte int8_vals = new slice<sbyte>(new sbyte[] { -128, -127, -1, 0, 1, 126, 127 });

        private static bool lt_neg128_int8(sbyte x)
        {
            return x < -128L;
        }
        private static bool le_neg128_int8(sbyte x)
        {
            return x <= -128L;
        }
        private static bool gt_neg128_int8(sbyte x)
        {
            return x > -128L;
        }
        private static bool ge_neg128_int8(sbyte x)
        {
            return x >= -128L;
        }
        private static bool eq_neg128_int8(sbyte x)
        {
            return x == -128L;
        }
        private static bool ne_neg128_int8(sbyte x)
        {
            return x != -128L;
        }
        private static bool lt_neg127_int8(sbyte x)
        {
            return x < -127L;
        }
        private static bool le_neg127_int8(sbyte x)
        {
            return x <= -127L;
        }
        private static bool gt_neg127_int8(sbyte x)
        {
            return x > -127L;
        }
        private static bool ge_neg127_int8(sbyte x)
        {
            return x >= -127L;
        }
        private static bool eq_neg127_int8(sbyte x)
        {
            return x == -127L;
        }
        private static bool ne_neg127_int8(sbyte x)
        {
            return x != -127L;
        }
        private static bool lt_neg1_int8(sbyte x)
        {
            return x < -1L;
        }
        private static bool le_neg1_int8(sbyte x)
        {
            return x <= -1L;
        }
        private static bool gt_neg1_int8(sbyte x)
        {
            return x > -1L;
        }
        private static bool ge_neg1_int8(sbyte x)
        {
            return x >= -1L;
        }
        private static bool eq_neg1_int8(sbyte x)
        {
            return x == -1L;
        }
        private static bool ne_neg1_int8(sbyte x)
        {
            return x != -1L;
        }
        private static bool lt_0_int8(sbyte x)
        {
            return x < 0L;
        }
        private static bool le_0_int8(sbyte x)
        {
            return x <= 0L;
        }
        private static bool gt_0_int8(sbyte x)
        {
            return x > 0L;
        }
        private static bool ge_0_int8(sbyte x)
        {
            return x >= 0L;
        }
        private static bool eq_0_int8(sbyte x)
        {
            return x == 0L;
        }
        private static bool ne_0_int8(sbyte x)
        {
            return x != 0L;
        }
        private static bool lt_1_int8(sbyte x)
        {
            return x < 1L;
        }
        private static bool le_1_int8(sbyte x)
        {
            return x <= 1L;
        }
        private static bool gt_1_int8(sbyte x)
        {
            return x > 1L;
        }
        private static bool ge_1_int8(sbyte x)
        {
            return x >= 1L;
        }
        private static bool eq_1_int8(sbyte x)
        {
            return x == 1L;
        }
        private static bool ne_1_int8(sbyte x)
        {
            return x != 1L;
        }
        private static bool lt_126_int8(sbyte x)
        {
            return x < 126L;
        }
        private static bool le_126_int8(sbyte x)
        {
            return x <= 126L;
        }
        private static bool gt_126_int8(sbyte x)
        {
            return x > 126L;
        }
        private static bool ge_126_int8(sbyte x)
        {
            return x >= 126L;
        }
        private static bool eq_126_int8(sbyte x)
        {
            return x == 126L;
        }
        private static bool ne_126_int8(sbyte x)
        {
            return x != 126L;
        }
        private static bool lt_127_int8(sbyte x)
        {
            return x < 127L;
        }
        private static bool le_127_int8(sbyte x)
        {
            return x <= 127L;
        }
        private static bool gt_127_int8(sbyte x)
        {
            return x > 127L;
        }
        private static bool ge_127_int8(sbyte x)
        {
            return x >= 127L;
        }
        private static bool eq_127_int8(sbyte x)
        {
            return x == 127L;
        }
        private static bool ne_127_int8(sbyte x)
        {
            return x != 127L;
        }



        private static void Main() => func((_, panic, __) =>
        {
            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in uint64_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in uint64_vals)
                        {
                            j = __j;
                            x = __x;
                            var want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                var fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                var msg = fmt.Sprintf("test failed: %v(%v) != %v [type=uint64 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in uint32_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in uint32_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=uint32 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in uint16_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in uint16_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=uint16 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in uint8_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in uint8_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=uint8 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in int64_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in int64_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=int64 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in int32_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in int32_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=int32 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in int16_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in int16_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=int16 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

            {
                var i__prev1 = i;
                var test__prev1 = test;

                foreach (var (__i, __test) in int8_tests)
                {
                    i = __i;
                    test = __test;
                    {
                        var j__prev2 = j;
                        var x__prev2 = x;

                        foreach (var (__j, __x) in int8_vals)
                        {
                            j = __j;
                            x = __x;
                            want = test.exp.l;
                            if (j == test.idx)
                            {
                                want = test.exp.e;
                            }
                            else if (j > test.idx)
                            {
                                want = test.exp.r;
                            }
                            if (test.fn(x) != want)
                            {
                                fn = runtime.FuncForPC(reflect.ValueOf(test.fn).Pointer()).Name();
                                msg = fmt.Sprintf("test failed: %v(%v) != %v [type=int8 i=%v j=%v idx=%v]", fn, x, want, i, j, test.idx);
                                panic(msg);
                            }
                        }

                        j = j__prev2;
                        x = x__prev2;
                    }

                }

                i = i__prev1;
                test = test__prev1;
            }

        });
    }
}
