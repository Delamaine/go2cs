//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 09:25:50 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using types = go.cmd.compile.@internal.types_package;
using src = go.cmd.@internal.src_package;
using binary = go.encoding.binary_package;
using fmt = go.fmt_package;
using big = go.math.big_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class gc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct importer
        {
            // Constructors
            public importer(NilType _)
            {
                this.@in = default;
                this.imp = default;
                this.buf = default;
                this.version = default;
                this.strList = default;
                this.pathList = default;
                this.pkgList = default;
                this.typList = default;
                this.funcList = default;
                this.trackAllTypes = default;
                this.cmpList = default;
                this.posInfoFormat = default;
                this.prevFile = default;
                this.prevLine = default;
                this.posBase = default;
                this.debugFormat = default;
                this.read = default;
            }

            public importer(ref ptr<bufio.Reader> @in = default, ref ptr<types.Pkg> imp = default, slice<byte> buf = default, long version = default, slice<@string> strList = default, slice<@string> pathList = default, slice<ref types.Pkg> pkgList = default, slice<ref types.Type> typList = default, slice<ref Node> funcList = default, bool trackAllTypes = default, slice<object> cmpList = default, bool posInfoFormat = default, @string prevFile = default, long prevLine = default, ref ptr<src.PosBase> posBase = default, bool debugFormat = default, long read = default)
            {
                this.@in = @in;
                this.imp = imp;
                this.buf = buf;
                this.version = version;
                this.strList = strList;
                this.pathList = pathList;
                this.pkgList = pkgList;
                this.typList = typList;
                this.funcList = funcList;
                this.trackAllTypes = trackAllTypes;
                this.cmpList = cmpList;
                this.posInfoFormat = posInfoFormat;
                this.prevFile = prevFile;
                this.prevLine = prevLine;
                this.posBase = posBase;
                this.debugFormat = debugFormat;
                this.read = read;
            }

            // Enable comparisons between nil and importer struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(importer value, NilType nil) => value.Equals(default(importer));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(importer value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, importer value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, importer value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator importer(NilType nil) => default(importer);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static importer importer_cast(dynamic value)
        {
            return new importer(ref value.@in, ref value.imp, value.buf, value.version, value.strList, value.pathList, value.pkgList, value.typList, value.funcList, value.trackAllTypes, value.cmpList, value.posInfoFormat, value.prevFile, value.prevLine, ref value.posBase, value.debugFormat, value.read);
        }
    }
}}}}