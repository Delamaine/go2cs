//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 09:29:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using binary = go.encoding.binary_package;
using fmt = go.fmt_package;
using html = go.html_package;
using os = go.os_package;
using sort = go.sort_package;
using ssa = go.cmd.compile.@internal.ssa_package;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using src = go.cmd.@internal.src_package;
using sys = go.cmd.@internal.sys_package;
using go;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class gc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct state
        {
            // Constructors
            public state(NilType _)
            {
                this.config = default;
                this.f = default;
                this.curfn = default;
                this.labels = default;
                this.labeledNodes = default;
                this.exitCode = default;
                this.breakTo = default;
                this.continueTo = default;
                this.curBlock = default;
                this.vars = default;
                this.fwdVars = default;
                this.defvars = default;
                this.decladdrs = default;
                this.startmem = default;
                this.sp = default;
                this.sb = default;
                this.line = default;
                this.lastPos = default;
                this.panics = default;
                this.returns = default;
                this.cgoUnsafeArgs = default;
                this.hasdefer = default;
                this.softFloat = default;
            }

            public state(ref ptr<ssa.Config> config = default, ref ptr<ssa.Func> f = default, ref ptr<Node> curfn = default, map<@string, ref ssaLabel> labels = default, map<ref Node, ref ssaLabel> labeledNodes = default, Nodes exitCode = default, ref ptr<ssa.Block> breakTo = default, ref ptr<ssa.Block> continueTo = default, ref ptr<ssa.Block> curBlock = default, map<ref Node, ref ssa.Value> vars = default, map<ref Node, ref ssa.Value> fwdVars = default, slice<map<ref Node, ref ssa.Value>> defvars = default, map<ref Node, ref ssa.Value> decladdrs = default, ref ptr<ssa.Value> startmem = default, ref ptr<ssa.Value> sp = default, ref ptr<ssa.Value> sb = default, slice<src.XPos> line = default, src.XPos lastPos = default, map<funcLine, ref ssa.Block> panics = default, slice<ref Node> returns = default, bool cgoUnsafeArgs = default, bool hasdefer = default, bool softFloat = default)
            {
                this.config = config;
                this.f = f;
                this.curfn = curfn;
                this.labels = labels;
                this.labeledNodes = labeledNodes;
                this.exitCode = exitCode;
                this.breakTo = breakTo;
                this.continueTo = continueTo;
                this.curBlock = curBlock;
                this.vars = vars;
                this.fwdVars = fwdVars;
                this.defvars = defvars;
                this.decladdrs = decladdrs;
                this.startmem = startmem;
                this.sp = sp;
                this.sb = sb;
                this.line = line;
                this.lastPos = lastPos;
                this.panics = panics;
                this.returns = returns;
                this.cgoUnsafeArgs = cgoUnsafeArgs;
                this.hasdefer = hasdefer;
                this.softFloat = softFloat;
            }

            // Enable comparisons between nil and state struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(state value, NilType nil) => value.Equals(default(state));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(state value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, state value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, state value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator state(NilType nil) => default(state);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static state state_cast(dynamic value)
        {
            return new state(ref value.config, ref value.f, ref value.curfn, value.labels, value.labeledNodes, value.exitCode, ref value.breakTo, ref value.continueTo, ref value.curBlock, value.vars, value.fwdVars, value.defvars, value.decladdrs, ref value.startmem, ref value.sp, ref value.sb, value.line, value.lastPos, value.panics, value.returns, value.cgoUnsafeArgs, value.hasdefer, value.softFloat);
        }
    }
}}}}