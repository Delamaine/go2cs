//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:43:13 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using sync = go.sync_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using @unsafe = go.@unsafe_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class reflect_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Type
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type As<T>(in T target) => (Type<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type As<T>(ptr<T> target_ptr) => (Type<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type? As(object target) =>
                typeof(Type<>).CreateInterfaceHandler<Type>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Type<T> : Type
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Type(in T target) => m_target = target;

            public Type(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate ref uncommonType AlignByRef(ref T value);
            private delegate ref uncommonType AlignByVal(T value);

            private static readonly AlignByRef s_AlignByRef;
            private static readonly AlignByVal s_AlignByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Align()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_AlignByRef is null)
                    return s_AlignByVal!(target);

                return s_AlignByRef(ref target);
            }

            private delegate ref uncommonType FieldAlignByRef(ref T value);
            private delegate ref uncommonType FieldAlignByVal(T value);

            private static readonly FieldAlignByRef s_FieldAlignByRef;
            private static readonly FieldAlignByVal s_FieldAlignByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType FieldAlign()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_FieldAlignByRef is null)
                    return s_FieldAlignByVal!(target);

                return s_FieldAlignByRef(ref target);
            }

            private delegate ref uncommonType MethodByRef(ref T value, long _p0);
            private delegate ref uncommonType MethodByVal(T value, long _p0);

            private static readonly MethodByRef s_MethodByRef;
            private static readonly MethodByVal s_MethodByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Method(long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_MethodByRef is null)
                    return s_MethodByVal!(target, _p0);

                return s_MethodByRef(ref target, _p0);
            }

            private delegate ref uncommonType MethodByNameByRef(ref T value, @string _p0);
            private delegate ref uncommonType MethodByNameByVal(T value, @string _p0);

            private static readonly MethodByNameByRef s_MethodByNameByRef;
            private static readonly MethodByNameByVal s_MethodByNameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType MethodByName(@string _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_MethodByNameByRef is null)
                    return s_MethodByNameByVal!(target, _p0);

                return s_MethodByNameByRef(ref target, _p0);
            }

            private delegate ref uncommonType NumMethodByRef(ref T value);
            private delegate ref uncommonType NumMethodByVal(T value);

            private static readonly NumMethodByRef s_NumMethodByRef;
            private static readonly NumMethodByVal s_NumMethodByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType NumMethod()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NumMethodByRef is null)
                    return s_NumMethodByVal!(target);

                return s_NumMethodByRef(ref target);
            }

            private delegate ref uncommonType NameByRef(ref T value);
            private delegate ref uncommonType NameByVal(T value);

            private static readonly NameByRef s_NameByRef;
            private static readonly NameByVal s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Name()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NameByRef is null)
                    return s_NameByVal!(target);

                return s_NameByRef(ref target);
            }

            private delegate ref uncommonType PkgPathByRef(ref T value);
            private delegate ref uncommonType PkgPathByVal(T value);

            private static readonly PkgPathByRef s_PkgPathByRef;
            private static readonly PkgPathByVal s_PkgPathByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType PkgPath()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PkgPathByRef is null)
                    return s_PkgPathByVal!(target);

                return s_PkgPathByRef(ref target);
            }

            private delegate ref uncommonType SizeByRef(ref T value);
            private delegate ref uncommonType SizeByVal(T value);

            private static readonly SizeByRef s_SizeByRef;
            private static readonly SizeByVal s_SizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Size()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SizeByRef is null)
                    return s_SizeByVal!(target);

                return s_SizeByRef(ref target);
            }

            private delegate ref uncommonType StringByRef(ref T value);
            private delegate ref uncommonType StringByVal(T value);

            private static readonly StringByRef s_StringByRef;
            private static readonly StringByVal s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType String()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringByRef is null)
                    return s_StringByVal!(target);

                return s_StringByRef(ref target);
            }

            private delegate ref uncommonType KindByRef(ref T value);
            private delegate ref uncommonType KindByVal(T value);

            private static readonly KindByRef s_KindByRef;
            private static readonly KindByVal s_KindByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Kind()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_KindByRef is null)
                    return s_KindByVal!(target);

                return s_KindByRef(ref target);
            }

            private delegate ref uncommonType ImplementsByRef(ref T value, Type u);
            private delegate ref uncommonType ImplementsByVal(T value, Type u);

            private static readonly ImplementsByRef s_ImplementsByRef;
            private static readonly ImplementsByVal s_ImplementsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Implements(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ImplementsByRef is null)
                    return s_ImplementsByVal!(target, u);

                return s_ImplementsByRef(ref target, u);
            }

            private delegate ref uncommonType AssignableToByRef(ref T value, Type u);
            private delegate ref uncommonType AssignableToByVal(T value, Type u);

            private static readonly AssignableToByRef s_AssignableToByRef;
            private static readonly AssignableToByVal s_AssignableToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType AssignableTo(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_AssignableToByRef is null)
                    return s_AssignableToByVal!(target, u);

                return s_AssignableToByRef(ref target, u);
            }

            private delegate ref uncommonType ConvertibleToByRef(ref T value, Type u);
            private delegate ref uncommonType ConvertibleToByVal(T value, Type u);

            private static readonly ConvertibleToByRef s_ConvertibleToByRef;
            private static readonly ConvertibleToByVal s_ConvertibleToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType ConvertibleTo(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ConvertibleToByRef is null)
                    return s_ConvertibleToByVal!(target, u);

                return s_ConvertibleToByRef(ref target, u);
            }

            private delegate ref uncommonType ComparableByRef(ref T value);
            private delegate ref uncommonType ComparableByVal(T value);

            private static readonly ComparableByRef s_ComparableByRef;
            private static readonly ComparableByVal s_ComparableByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Comparable()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ComparableByRef is null)
                    return s_ComparableByVal!(target);

                return s_ComparableByRef(ref target);
            }

            private delegate ref uncommonType BitsByRef(ref T value);
            private delegate ref uncommonType BitsByVal(T value);

            private static readonly BitsByRef s_BitsByRef;
            private static readonly BitsByVal s_BitsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Bits()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BitsByRef is null)
                    return s_BitsByVal!(target);

                return s_BitsByRef(ref target);
            }

            private delegate ref uncommonType ChanDirByRef(ref T value);
            private delegate ref uncommonType ChanDirByVal(T value);

            private static readonly ChanDirByRef s_ChanDirByRef;
            private static readonly ChanDirByVal s_ChanDirByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType ChanDir()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ChanDirByRef is null)
                    return s_ChanDirByVal!(target);

                return s_ChanDirByRef(ref target);
            }

            private delegate ref uncommonType IsVariadicByRef(ref T value);
            private delegate ref uncommonType IsVariadicByVal(T value);

            private static readonly IsVariadicByRef s_IsVariadicByRef;
            private static readonly IsVariadicByVal s_IsVariadicByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType IsVariadic()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_IsVariadicByRef is null)
                    return s_IsVariadicByVal!(target);

                return s_IsVariadicByRef(ref target);
            }

            private delegate ref uncommonType ElemByRef(ref T value);
            private delegate ref uncommonType ElemByVal(T value);

            private static readonly ElemByRef s_ElemByRef;
            private static readonly ElemByVal s_ElemByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Elem()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ElemByRef is null)
                    return s_ElemByVal!(target);

                return s_ElemByRef(ref target);
            }

            private delegate ref uncommonType FieldByRef(ref T value, long i);
            private delegate ref uncommonType FieldByVal(T value, long i);

            private static readonly FieldByRef s_FieldByRef;
            private static readonly FieldByVal s_FieldByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Field(long i)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_FieldByRef is null)
                    return s_FieldByVal!(target, i);

                return s_FieldByRef(ref target, i);
            }

            private delegate ref uncommonType FieldByIndexByRef(ref T value, slice<long> index);
            private delegate ref uncommonType FieldByIndexByVal(T value, slice<long> index);

            private static readonly FieldByIndexByRef s_FieldByIndexByRef;
            private static readonly FieldByIndexByVal s_FieldByIndexByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType FieldByIndex(slice<long> index)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_FieldByIndexByRef is null)
                    return s_FieldByIndexByVal!(target, index);

                return s_FieldByIndexByRef(ref target, index);
            }

            private delegate ref uncommonType FieldByNameByRef(ref T value, @string name);
            private delegate ref uncommonType FieldByNameByVal(T value, @string name);

            private static readonly FieldByNameByRef s_FieldByNameByRef;
            private static readonly FieldByNameByVal s_FieldByNameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType FieldByName(@string name)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_FieldByNameByRef is null)
                    return s_FieldByNameByVal!(target, name);

                return s_FieldByNameByRef(ref target, name);
            }

            private delegate ref uncommonType FieldByNameFuncByRef(ref T value, Func<@string, bool> match);
            private delegate ref uncommonType FieldByNameFuncByVal(T value, Func<@string, bool> match);

            private static readonly FieldByNameFuncByRef s_FieldByNameFuncByRef;
            private static readonly FieldByNameFuncByVal s_FieldByNameFuncByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType FieldByNameFunc(Func<@string, bool> match)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_FieldByNameFuncByRef is null)
                    return s_FieldByNameFuncByVal!(target, match);

                return s_FieldByNameFuncByRef(ref target, match);
            }

            private delegate ref uncommonType InByRef(ref T value, long i);
            private delegate ref uncommonType InByVal(T value, long i);

            private static readonly InByRef s_InByRef;
            private static readonly InByVal s_InByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType In(long i)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_InByRef is null)
                    return s_InByVal!(target, i);

                return s_InByRef(ref target, i);
            }

            private delegate ref uncommonType KeyByRef(ref T value);
            private delegate ref uncommonType KeyByVal(T value);

            private static readonly KeyByRef s_KeyByRef;
            private static readonly KeyByVal s_KeyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Key()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_KeyByRef is null)
                    return s_KeyByVal!(target);

                return s_KeyByRef(ref target);
            }

            private delegate ref uncommonType LenByRef(ref T value);
            private delegate ref uncommonType LenByVal(T value);

            private static readonly LenByRef s_LenByRef;
            private static readonly LenByVal s_LenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Len()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_LenByRef is null)
                    return s_LenByVal!(target);

                return s_LenByRef(ref target);
            }

            private delegate ref uncommonType NumFieldByRef(ref T value);
            private delegate ref uncommonType NumFieldByVal(T value);

            private static readonly NumFieldByRef s_NumFieldByRef;
            private static readonly NumFieldByVal s_NumFieldByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType NumField()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NumFieldByRef is null)
                    return s_NumFieldByVal!(target);

                return s_NumFieldByRef(ref target);
            }

            private delegate ref uncommonType NumInByRef(ref T value);
            private delegate ref uncommonType NumInByVal(T value);

            private static readonly NumInByRef s_NumInByRef;
            private static readonly NumInByVal s_NumInByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType NumIn()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NumInByRef is null)
                    return s_NumInByVal!(target);

                return s_NumInByRef(ref target);
            }

            private delegate ref uncommonType NumOutByRef(ref T value);
            private delegate ref uncommonType NumOutByVal(T value);

            private static readonly NumOutByRef s_NumOutByRef;
            private static readonly NumOutByVal s_NumOutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType NumOut()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NumOutByRef is null)
                    return s_NumOutByVal!(target);

                return s_NumOutByRef(ref target);
            }

            private delegate ref uncommonType OutByRef(ref T value, long i);
            private delegate ref uncommonType OutByVal(T value, long i);

            private static readonly OutByRef s_OutByRef;
            private static readonly OutByVal s_OutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType Out(long i)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_OutByRef is null)
                    return s_OutByVal!(target, i);

                return s_OutByRef(ref target, i);
            }

            private delegate ref uncommonType commonByRef(ref T value);
            private delegate ref uncommonType commonByVal(T value);

            private static readonly commonByRef s_commonByRef;
            private static readonly commonByVal s_commonByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType common()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_commonByRef is null)
                    return s_commonByVal!(target);

                return s_commonByRef(ref target);
            }

            private delegate ref uncommonType uncommonByRef(ref T value);
            private delegate ref uncommonType uncommonByVal(T value);

            private static readonly uncommonByRef s_uncommonByRef;
            private static readonly uncommonByVal s_uncommonByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref uncommonType uncommon()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_uncommonByRef is null)
                    return s_uncommonByVal!(target);

                return s_uncommonByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Type()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Align");

                if (!(extensionMethod is null))
                    s_AlignByRef = extensionMethod.CreateStaticDelegate(typeof(AlignByRef)) as AlignByRef;

                if (s_AlignByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Align");

                    if (!(extensionMethod is null))
                        s_AlignByVal = extensionMethod.CreateStaticDelegate(typeof(AlignByVal)) as AlignByVal;
                }

                if (s_AlignByRef is null && s_AlignByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Align method", new Exception("Align"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("FieldAlign");

                if (!(extensionMethod is null))
                    s_FieldAlignByRef = extensionMethod.CreateStaticDelegate(typeof(FieldAlignByRef)) as FieldAlignByRef;

                if (s_FieldAlignByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("FieldAlign");

                    if (!(extensionMethod is null))
                        s_FieldAlignByVal = extensionMethod.CreateStaticDelegate(typeof(FieldAlignByVal)) as FieldAlignByVal;
                }

                if (s_FieldAlignByRef is null && s_FieldAlignByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldAlign method", new Exception("FieldAlign"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Method");

                if (!(extensionMethod is null))
                    s_MethodByRef = extensionMethod.CreateStaticDelegate(typeof(MethodByRef)) as MethodByRef;

                if (s_MethodByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Method");

                    if (!(extensionMethod is null))
                        s_MethodByVal = extensionMethod.CreateStaticDelegate(typeof(MethodByVal)) as MethodByVal;
                }

                if (s_MethodByRef is null && s_MethodByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Method method", new Exception("Method"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("MethodByName");

                if (!(extensionMethod is null))
                    s_MethodByNameByRef = extensionMethod.CreateStaticDelegate(typeof(MethodByNameByRef)) as MethodByNameByRef;

                if (s_MethodByNameByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("MethodByName");

                    if (!(extensionMethod is null))
                        s_MethodByNameByVal = extensionMethod.CreateStaticDelegate(typeof(MethodByNameByVal)) as MethodByNameByVal;
                }

                if (s_MethodByNameByRef is null && s_MethodByNameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.MethodByName method", new Exception("MethodByName"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NumMethod");

                if (!(extensionMethod is null))
                    s_NumMethodByRef = extensionMethod.CreateStaticDelegate(typeof(NumMethodByRef)) as NumMethodByRef;

                if (s_NumMethodByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NumMethod");

                    if (!(extensionMethod is null))
                        s_NumMethodByVal = extensionMethod.CreateStaticDelegate(typeof(NumMethodByVal)) as NumMethodByVal;
                }

                if (s_NumMethodByRef is null && s_NumMethodByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumMethod method", new Exception("NumMethod"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Name");

                if (!(extensionMethod is null))
                    s_NameByRef = extensionMethod.CreateStaticDelegate(typeof(NameByRef)) as NameByRef;

                if (s_NameByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Name");

                    if (!(extensionMethod is null))
                        s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;
                }

                if (s_NameByRef is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Name method", new Exception("Name"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("PkgPath");

                if (!(extensionMethod is null))
                    s_PkgPathByRef = extensionMethod.CreateStaticDelegate(typeof(PkgPathByRef)) as PkgPathByRef;

                if (s_PkgPathByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("PkgPath");

                    if (!(extensionMethod is null))
                        s_PkgPathByVal = extensionMethod.CreateStaticDelegate(typeof(PkgPathByVal)) as PkgPathByVal;
                }

                if (s_PkgPathByRef is null && s_PkgPathByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.PkgPath method", new Exception("PkgPath"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByRef = extensionMethod.CreateStaticDelegate(typeof(SizeByRef)) as SizeByRef;

                if (s_SizeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Size");

                    if (!(extensionMethod is null))
                        s_SizeByVal = extensionMethod.CreateStaticDelegate(typeof(SizeByVal)) as SizeByVal;
                }

                if (s_SizeByRef is null && s_SizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Size method", new Exception("Size"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByRef = extensionMethod.CreateStaticDelegate(typeof(StringByRef)) as StringByRef;

                if (s_StringByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("String");

                    if (!(extensionMethod is null))
                        s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;
                }

                if (s_StringByRef is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.String method", new Exception("String"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Kind");

                if (!(extensionMethod is null))
                    s_KindByRef = extensionMethod.CreateStaticDelegate(typeof(KindByRef)) as KindByRef;

                if (s_KindByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Kind");

                    if (!(extensionMethod is null))
                        s_KindByVal = extensionMethod.CreateStaticDelegate(typeof(KindByVal)) as KindByVal;
                }

                if (s_KindByRef is null && s_KindByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Kind method", new Exception("Kind"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Implements");

                if (!(extensionMethod is null))
                    s_ImplementsByRef = extensionMethod.CreateStaticDelegate(typeof(ImplementsByRef)) as ImplementsByRef;

                if (s_ImplementsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Implements");

                    if (!(extensionMethod is null))
                        s_ImplementsByVal = extensionMethod.CreateStaticDelegate(typeof(ImplementsByVal)) as ImplementsByVal;
                }

                if (s_ImplementsByRef is null && s_ImplementsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Implements method", new Exception("Implements"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("AssignableTo");

                if (!(extensionMethod is null))
                    s_AssignableToByRef = extensionMethod.CreateStaticDelegate(typeof(AssignableToByRef)) as AssignableToByRef;

                if (s_AssignableToByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("AssignableTo");

                    if (!(extensionMethod is null))
                        s_AssignableToByVal = extensionMethod.CreateStaticDelegate(typeof(AssignableToByVal)) as AssignableToByVal;
                }

                if (s_AssignableToByRef is null && s_AssignableToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.AssignableTo method", new Exception("AssignableTo"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("ConvertibleTo");

                if (!(extensionMethod is null))
                    s_ConvertibleToByRef = extensionMethod.CreateStaticDelegate(typeof(ConvertibleToByRef)) as ConvertibleToByRef;

                if (s_ConvertibleToByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ConvertibleTo");

                    if (!(extensionMethod is null))
                        s_ConvertibleToByVal = extensionMethod.CreateStaticDelegate(typeof(ConvertibleToByVal)) as ConvertibleToByVal;
                }

                if (s_ConvertibleToByRef is null && s_ConvertibleToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.ConvertibleTo method", new Exception("ConvertibleTo"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Comparable");

                if (!(extensionMethod is null))
                    s_ComparableByRef = extensionMethod.CreateStaticDelegate(typeof(ComparableByRef)) as ComparableByRef;

                if (s_ComparableByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Comparable");

                    if (!(extensionMethod is null))
                        s_ComparableByVal = extensionMethod.CreateStaticDelegate(typeof(ComparableByVal)) as ComparableByVal;
                }

                if (s_ComparableByRef is null && s_ComparableByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Comparable method", new Exception("Comparable"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Bits");

                if (!(extensionMethod is null))
                    s_BitsByRef = extensionMethod.CreateStaticDelegate(typeof(BitsByRef)) as BitsByRef;

                if (s_BitsByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Bits");

                    if (!(extensionMethod is null))
                        s_BitsByVal = extensionMethod.CreateStaticDelegate(typeof(BitsByVal)) as BitsByVal;
                }

                if (s_BitsByRef is null && s_BitsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Bits method", new Exception("Bits"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("ChanDir");

                if (!(extensionMethod is null))
                    s_ChanDirByRef = extensionMethod.CreateStaticDelegate(typeof(ChanDirByRef)) as ChanDirByRef;

                if (s_ChanDirByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ChanDir");

                    if (!(extensionMethod is null))
                        s_ChanDirByVal = extensionMethod.CreateStaticDelegate(typeof(ChanDirByVal)) as ChanDirByVal;
                }

                if (s_ChanDirByRef is null && s_ChanDirByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.ChanDir method", new Exception("ChanDir"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("IsVariadic");

                if (!(extensionMethod is null))
                    s_IsVariadicByRef = extensionMethod.CreateStaticDelegate(typeof(IsVariadicByRef)) as IsVariadicByRef;

                if (s_IsVariadicByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("IsVariadic");

                    if (!(extensionMethod is null))
                        s_IsVariadicByVal = extensionMethod.CreateStaticDelegate(typeof(IsVariadicByVal)) as IsVariadicByVal;
                }

                if (s_IsVariadicByRef is null && s_IsVariadicByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.IsVariadic method", new Exception("IsVariadic"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Elem");

                if (!(extensionMethod is null))
                    s_ElemByRef = extensionMethod.CreateStaticDelegate(typeof(ElemByRef)) as ElemByRef;

                if (s_ElemByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Elem");

                    if (!(extensionMethod is null))
                        s_ElemByVal = extensionMethod.CreateStaticDelegate(typeof(ElemByVal)) as ElemByVal;
                }

                if (s_ElemByRef is null && s_ElemByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Elem method", new Exception("Elem"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Field");

                if (!(extensionMethod is null))
                    s_FieldByRef = extensionMethod.CreateStaticDelegate(typeof(FieldByRef)) as FieldByRef;

                if (s_FieldByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Field");

                    if (!(extensionMethod is null))
                        s_FieldByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByVal)) as FieldByVal;
                }

                if (s_FieldByRef is null && s_FieldByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Field method", new Exception("Field"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("FieldByIndex");

                if (!(extensionMethod is null))
                    s_FieldByIndexByRef = extensionMethod.CreateStaticDelegate(typeof(FieldByIndexByRef)) as FieldByIndexByRef;

                if (s_FieldByIndexByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("FieldByIndex");

                    if (!(extensionMethod is null))
                        s_FieldByIndexByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByIndexByVal)) as FieldByIndexByVal;
                }

                if (s_FieldByIndexByRef is null && s_FieldByIndexByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByIndex method", new Exception("FieldByIndex"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("FieldByName");

                if (!(extensionMethod is null))
                    s_FieldByNameByRef = extensionMethod.CreateStaticDelegate(typeof(FieldByNameByRef)) as FieldByNameByRef;

                if (s_FieldByNameByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("FieldByName");

                    if (!(extensionMethod is null))
                        s_FieldByNameByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByNameByVal)) as FieldByNameByVal;
                }

                if (s_FieldByNameByRef is null && s_FieldByNameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByName method", new Exception("FieldByName"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("FieldByNameFunc");

                if (!(extensionMethod is null))
                    s_FieldByNameFuncByRef = extensionMethod.CreateStaticDelegate(typeof(FieldByNameFuncByRef)) as FieldByNameFuncByRef;

                if (s_FieldByNameFuncByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("FieldByNameFunc");

                    if (!(extensionMethod is null))
                        s_FieldByNameFuncByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByNameFuncByVal)) as FieldByNameFuncByVal;
                }

                if (s_FieldByNameFuncByRef is null && s_FieldByNameFuncByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByNameFunc method", new Exception("FieldByNameFunc"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("In");

                if (!(extensionMethod is null))
                    s_InByRef = extensionMethod.CreateStaticDelegate(typeof(InByRef)) as InByRef;

                if (s_InByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("In");

                    if (!(extensionMethod is null))
                        s_InByVal = extensionMethod.CreateStaticDelegate(typeof(InByVal)) as InByVal;
                }

                if (s_InByRef is null && s_InByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.In method", new Exception("In"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Key");

                if (!(extensionMethod is null))
                    s_KeyByRef = extensionMethod.CreateStaticDelegate(typeof(KeyByRef)) as KeyByRef;

                if (s_KeyByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Key");

                    if (!(extensionMethod is null))
                        s_KeyByVal = extensionMethod.CreateStaticDelegate(typeof(KeyByVal)) as KeyByVal;
                }

                if (s_KeyByRef is null && s_KeyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Key method", new Exception("Key"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Len");

                if (!(extensionMethod is null))
                    s_LenByRef = extensionMethod.CreateStaticDelegate(typeof(LenByRef)) as LenByRef;

                if (s_LenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Len");

                    if (!(extensionMethod is null))
                        s_LenByVal = extensionMethod.CreateStaticDelegate(typeof(LenByVal)) as LenByVal;
                }

                if (s_LenByRef is null && s_LenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Len method", new Exception("Len"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NumField");

                if (!(extensionMethod is null))
                    s_NumFieldByRef = extensionMethod.CreateStaticDelegate(typeof(NumFieldByRef)) as NumFieldByRef;

                if (s_NumFieldByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NumField");

                    if (!(extensionMethod is null))
                        s_NumFieldByVal = extensionMethod.CreateStaticDelegate(typeof(NumFieldByVal)) as NumFieldByVal;
                }

                if (s_NumFieldByRef is null && s_NumFieldByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumField method", new Exception("NumField"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NumIn");

                if (!(extensionMethod is null))
                    s_NumInByRef = extensionMethod.CreateStaticDelegate(typeof(NumInByRef)) as NumInByRef;

                if (s_NumInByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NumIn");

                    if (!(extensionMethod is null))
                        s_NumInByVal = extensionMethod.CreateStaticDelegate(typeof(NumInByVal)) as NumInByVal;
                }

                if (s_NumInByRef is null && s_NumInByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumIn method", new Exception("NumIn"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("NumOut");

                if (!(extensionMethod is null))
                    s_NumOutByRef = extensionMethod.CreateStaticDelegate(typeof(NumOutByRef)) as NumOutByRef;

                if (s_NumOutByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("NumOut");

                    if (!(extensionMethod is null))
                        s_NumOutByVal = extensionMethod.CreateStaticDelegate(typeof(NumOutByVal)) as NumOutByVal;
                }

                if (s_NumOutByRef is null && s_NumOutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumOut method", new Exception("NumOut"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Out");

                if (!(extensionMethod is null))
                    s_OutByRef = extensionMethod.CreateStaticDelegate(typeof(OutByRef)) as OutByRef;

                if (s_OutByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Out");

                    if (!(extensionMethod is null))
                        s_OutByVal = extensionMethod.CreateStaticDelegate(typeof(OutByVal)) as OutByVal;
                }

                if (s_OutByRef is null && s_OutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Out method", new Exception("Out"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("common");

                if (!(extensionMethod is null))
                    s_commonByRef = extensionMethod.CreateStaticDelegate(typeof(commonByRef)) as commonByRef;

                if (s_commonByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("common");

                    if (!(extensionMethod is null))
                        s_commonByVal = extensionMethod.CreateStaticDelegate(typeof(commonByVal)) as commonByVal;
                }

                if (s_commonByRef is null && s_commonByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.common method", new Exception("common"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("uncommon");

                if (!(extensionMethod is null))
                    s_uncommonByRef = extensionMethod.CreateStaticDelegate(typeof(uncommonByRef)) as uncommonByRef;

                if (s_uncommonByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("uncommon");

                    if (!(extensionMethod is null))
                        s_uncommonByVal = extensionMethod.CreateStaticDelegate(typeof(uncommonByVal)) as uncommonByVal;
                }

                if (s_uncommonByRef is null && s_uncommonByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.uncommon method", new Exception("uncommon"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Type<T>(in ptr<T> target_ptr) => new Type<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Type<T>(in T target) => new Type<T>(target);

            // Enable comparisons between nil and Type<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Type<T> value, NilType nil) => Activator.CreateInstance<Type<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Type<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Type<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Type<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class reflect_TypeExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.reflect_package.Type target)
        {
            try
            {
                return ((go.reflect_package.Type<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.reflect_package.Type target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.reflect_package.Type target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.reflect_package.Type<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.reflect_package.Type target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}