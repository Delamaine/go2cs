// mksysnum_freebsd.pl
// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT

// +build 386,freebsd

// package syscall -- go2cs converted at 2020 August 29 08:42:01 UTC
// import "syscall" ==> using syscall = go.syscall_package
// Original source: C:\Go\src\syscall\zsysnum_freebsd_386.go

using static go.builtin;

namespace go
{
    public static partial class syscall_package
    {
 
        // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
        public static readonly long SYS_EXIT = 1L; // { void sys_exit(int rval); } exit \
        public static readonly long SYS_FORK = 2L; // { int fork(void); }
        public static readonly long SYS_READ = 3L; // { ssize_t read(int fd, void *buf, \
        public static readonly long SYS_WRITE = 4L; // { ssize_t write(int fd, const void *buf, \
        public static readonly long SYS_OPEN = 5L; // { int open(char *path, int flags, int mode); }
        public static readonly long SYS_CLOSE = 6L; // { int close(int fd); }
        public static readonly long SYS_WAIT4 = 7L; // { int wait4(int pid, int *status, \
        public static readonly long SYS_LINK = 9L; // { int link(char *path, char *link); }
        public static readonly long SYS_UNLINK = 10L; // { int unlink(char *path); }
        public static readonly long SYS_CHDIR = 12L; // { int chdir(char *path); }
        public static readonly long SYS_FCHDIR = 13L; // { int fchdir(int fd); }
        public static readonly long SYS_MKNOD = 14L; // { int mknod(char *path, int mode, int dev); }
        public static readonly long SYS_CHMOD = 15L; // { int chmod(char *path, int mode); }
        public static readonly long SYS_CHOWN = 16L; // { int chown(char *path, int uid, int gid); }
        public static readonly long SYS_OBREAK = 17L; // { int obreak(char *nsize); } break \
        public static readonly long SYS_GETPID = 20L; // { pid_t getpid(void); }
        public static readonly long SYS_MOUNT = 21L; // { int mount(char *type, char *path, \
        public static readonly long SYS_UNMOUNT = 22L; // { int unmount(char *path, int flags); }
        public static readonly long SYS_SETUID = 23L; // { int setuid(uid_t uid); }
        public static readonly long SYS_GETUID = 24L; // { uid_t getuid(void); }
        public static readonly long SYS_GETEUID = 25L; // { uid_t geteuid(void); }
        public static readonly long SYS_PTRACE = 26L; // { int ptrace(int req, pid_t pid, \
        public static readonly long SYS_RECVMSG = 27L; // { int recvmsg(int s, struct msghdr *msg, \
        public static readonly long SYS_SENDMSG = 28L; // { int sendmsg(int s, struct msghdr *msg, \
        public static readonly long SYS_RECVFROM = 29L; // { int recvfrom(int s, caddr_t buf, \
        public static readonly long SYS_ACCEPT = 30L; // { int accept(int s, \
        public static readonly long SYS_GETPEERNAME = 31L; // { int getpeername(int fdes, \
        public static readonly long SYS_GETSOCKNAME = 32L; // { int getsockname(int fdes, \
        public static readonly long SYS_ACCESS = 33L; // { int access(char *path, int amode); }
        public static readonly long SYS_CHFLAGS = 34L; // { int chflags(const char *path, u_long flags); }
        public static readonly long SYS_FCHFLAGS = 35L; // { int fchflags(int fd, u_long flags); }
        public static readonly long SYS_SYNC = 36L; // { int sync(void); }
        public static readonly long SYS_KILL = 37L; // { int kill(int pid, int signum); }
        public static readonly long SYS_GETPPID = 39L; // { pid_t getppid(void); }
        public static readonly long SYS_DUP = 41L; // { int dup(u_int fd); }
        public static readonly long SYS_PIPE = 42L; // { int pipe(void); }
        public static readonly long SYS_GETEGID = 43L; // { gid_t getegid(void); }
        public static readonly long SYS_PROFIL = 44L; // { int profil(caddr_t samples, size_t size, \
        public static readonly long SYS_KTRACE = 45L; // { int ktrace(const char *fname, int ops, \
        public static readonly long SYS_GETGID = 47L; // { gid_t getgid(void); }
        public static readonly long SYS_GETLOGIN = 49L; // { int getlogin(char *namebuf, u_int \
        public static readonly long SYS_SETLOGIN = 50L; // { int setlogin(char *namebuf); }
        public static readonly long SYS_ACCT = 51L; // { int acct(char *path); }
        public static readonly long SYS_SIGALTSTACK = 53L; // { int sigaltstack(stack_t *ss, \
        public static readonly long SYS_IOCTL = 54L; // { int ioctl(int fd, u_long com, \
        public static readonly long SYS_REBOOT = 55L; // { int reboot(int opt); }
        public static readonly long SYS_REVOKE = 56L; // { int revoke(char *path); }
        public static readonly long SYS_SYMLINK = 57L; // { int symlink(char *path, char *link); }
        public static readonly long SYS_READLINK = 58L; // { ssize_t readlink(char *path, char *buf, \
        public static readonly long SYS_EXECVE = 59L; // { int execve(char *fname, char **argv, \
        public static readonly long SYS_UMASK = 60L; // { int umask(int newmask); } umask umask_args \
        public static readonly long SYS_CHROOT = 61L; // { int chroot(char *path); }
        public static readonly long SYS_MSYNC = 65L; // { int msync(void *addr, size_t len, \
        public static readonly long SYS_VFORK = 66L; // { int vfork(void); }
        public static readonly long SYS_SBRK = 69L; // { int sbrk(int incr); }
        public static readonly long SYS_SSTK = 70L; // { int sstk(int incr); }
        public static readonly long SYS_OVADVISE = 72L; // { int ovadvise(int anom); } vadvise \
        public static readonly long SYS_MUNMAP = 73L; // { int munmap(void *addr, size_t len); }
        public static readonly long SYS_MPROTECT = 74L; // { int mprotect(const void *addr, size_t len, \
        public static readonly long SYS_MADVISE = 75L; // { int madvise(void *addr, size_t len, \
        public static readonly long SYS_MINCORE = 78L; // { int mincore(const void *addr, size_t len, \
        public static readonly long SYS_GETGROUPS = 79L; // { int getgroups(u_int gidsetsize, \
        public static readonly long SYS_SETGROUPS = 80L; // { int setgroups(u_int gidsetsize, \
        public static readonly long SYS_GETPGRP = 81L; // { int getpgrp(void); }
        public static readonly long SYS_SETPGID = 82L; // { int setpgid(int pid, int pgid); }
        public static readonly long SYS_SETITIMER = 83L; // { int setitimer(u_int which, struct \
        public static readonly long SYS_SWAPON = 85L; // { int swapon(char *name); }
        public static readonly long SYS_GETITIMER = 86L; // { int getitimer(u_int which, \
        public static readonly long SYS_GETDTABLESIZE = 89L; // { int getdtablesize(void); }
        public static readonly long SYS_DUP2 = 90L; // { int dup2(u_int from, u_int to); }
        public static readonly long SYS_FCNTL = 92L; // { int fcntl(int fd, int cmd, long arg); }
        public static readonly long SYS_SELECT = 93L; // { int select(int nd, fd_set *in, fd_set *ou, \
        public static readonly long SYS_FSYNC = 95L; // { int fsync(int fd); }
        public static readonly long SYS_SETPRIORITY = 96L; // { int setpriority(int which, int who, \
        public static readonly long SYS_SOCKET = 97L; // { int socket(int domain, int type, \
        public static readonly long SYS_CONNECT = 98L; // { int connect(int s, caddr_t name, \
        public static readonly long SYS_GETPRIORITY = 100L; // { int getpriority(int which, int who); }
        public static readonly long SYS_BIND = 104L; // { int bind(int s, caddr_t name, \
        public static readonly long SYS_SETSOCKOPT = 105L; // { int setsockopt(int s, int level, int name, \
        public static readonly long SYS_LISTEN = 106L; // { int listen(int s, int backlog); }
        public static readonly long SYS_GETTIMEOFDAY = 116L; // { int gettimeofday(struct timeval *tp, \
        public static readonly long SYS_GETRUSAGE = 117L; // { int getrusage(int who, \
        public static readonly long SYS_GETSOCKOPT = 118L; // { int getsockopt(int s, int level, int name, \
        public static readonly long SYS_READV = 120L; // { int readv(int fd, struct iovec *iovp, \
        public static readonly long SYS_WRITEV = 121L; // { int writev(int fd, struct iovec *iovp, \
        public static readonly long SYS_SETTIMEOFDAY = 122L; // { int settimeofday(struct timeval *tv, \
        public static readonly long SYS_FCHOWN = 123L; // { int fchown(int fd, int uid, int gid); }
        public static readonly long SYS_FCHMOD = 124L; // { int fchmod(int fd, int mode); }
        public static readonly long SYS_SETREUID = 126L; // { int setreuid(int ruid, int euid); }
        public static readonly long SYS_SETREGID = 127L; // { int setregid(int rgid, int egid); }
        public static readonly long SYS_RENAME = 128L; // { int rename(char *from, char *to); }
        public static readonly long SYS_FLOCK = 131L; // { int flock(int fd, int how); }
        public static readonly long SYS_MKFIFO = 132L; // { int mkfifo(char *path, int mode); }
        public static readonly long SYS_SENDTO = 133L; // { int sendto(int s, caddr_t buf, size_t len, \
        public static readonly long SYS_SHUTDOWN = 134L; // { int shutdown(int s, int how); }
        public static readonly long SYS_SOCKETPAIR = 135L; // { int socketpair(int domain, int type, \
        public static readonly long SYS_MKDIR = 136L; // { int mkdir(char *path, int mode); }
        public static readonly long SYS_RMDIR = 137L; // { int rmdir(char *path); }
        public static readonly long SYS_UTIMES = 138L; // { int utimes(char *path, \
        public static readonly long SYS_ADJTIME = 140L; // { int adjtime(struct timeval *delta, \
        public static readonly long SYS_SETSID = 147L; // { int setsid(void); }
        public static readonly long SYS_QUOTACTL = 148L; // { int quotactl(char *path, int cmd, int uid, \
        public static readonly long SYS_LGETFH = 160L; // { int lgetfh(char *fname, \
        public static readonly long SYS_GETFH = 161L; // { int getfh(char *fname, \
        public static readonly long SYS_SYSARCH = 165L; // { int sysarch(int op, char *parms); }
        public static readonly long SYS_RTPRIO = 166L; // { int rtprio(int function, pid_t pid, \
        public static readonly long SYS_FREEBSD6_PREAD = 173L; // { ssize_t freebsd6_pread(int fd, void *buf, \
        public static readonly long SYS_FREEBSD6_PWRITE = 174L; // { ssize_t freebsd6_pwrite(int fd, \
        public static readonly long SYS_SETFIB = 175L; // { int setfib(int fibnum); }
        public static readonly long SYS_NTP_ADJTIME = 176L; // { int ntp_adjtime(struct timex *tp); }
        public static readonly long SYS_SETGID = 181L; // { int setgid(gid_t gid); }
        public static readonly long SYS_SETEGID = 182L; // { int setegid(gid_t egid); }
        public static readonly long SYS_SETEUID = 183L; // { int seteuid(uid_t euid); }
        public static readonly long SYS_STAT = 188L; // { int stat(char *path, struct stat *ub); }
        public static readonly long SYS_FSTAT = 189L; // { int fstat(int fd, struct stat *sb); }
        public static readonly long SYS_LSTAT = 190L; // { int lstat(char *path, struct stat *ub); }
        public static readonly long SYS_PATHCONF = 191L; // { int pathconf(char *path, int name); }
        public static readonly long SYS_FPATHCONF = 192L; // { int fpathconf(int fd, int name); }
        public static readonly long SYS_GETRLIMIT = 194L; // { int getrlimit(u_int which, \
        public static readonly long SYS_SETRLIMIT = 195L; // { int setrlimit(u_int which, \
        public static readonly long SYS_GETDIRENTRIES = 196L; // { int getdirentries(int fd, char *buf, \
        public static readonly long SYS_FREEBSD6_MMAP = 197L; // { caddr_t freebsd6_mmap(caddr_t addr, \
        public static readonly long SYS_FREEBSD6_LSEEK = 199L; // { off_t freebsd6_lseek(int fd, int pad, \
        public static readonly long SYS_FREEBSD6_TRUNCATE = 200L; // { int freebsd6_truncate(char *path, int pad, \
        public static readonly long SYS_FREEBSD6_FTRUNCATE = 201L; // { int freebsd6_ftruncate(int fd, int pad, \
        public static readonly long SYS___SYSCTL = 202L; // { int __sysctl(int *name, u_int namelen, \
        public static readonly long SYS_MLOCK = 203L; // { int mlock(const void *addr, size_t len); }
        public static readonly long SYS_MUNLOCK = 204L; // { int munlock(const void *addr, size_t len); }
        public static readonly long SYS_UNDELETE = 205L; // { int undelete(char *path); }
        public static readonly long SYS_FUTIMES = 206L; // { int futimes(int fd, struct timeval *tptr); }
        public static readonly long SYS_GETPGID = 207L; // { int getpgid(pid_t pid); }
        public static readonly long SYS_POLL = 209L; // { int poll(struct pollfd *fds, u_int nfds, \
        public static readonly long SYS_CLOCK_GETTIME = 232L; // { int clock_gettime(clockid_t clock_id, \
        public static readonly long SYS_CLOCK_SETTIME = 233L; // { int clock_settime( \
        public static readonly long SYS_CLOCK_GETRES = 234L; // { int clock_getres(clockid_t clock_id, \
        public static readonly long SYS_KTIMER_CREATE = 235L; // { int ktimer_create(clockid_t clock_id, \
        public static readonly long SYS_KTIMER_DELETE = 236L; // { int ktimer_delete(int timerid); }
        public static readonly long SYS_KTIMER_SETTIME = 237L; // { int ktimer_settime(int timerid, int flags, \
        public static readonly long SYS_KTIMER_GETTIME = 238L; // { int ktimer_gettime(int timerid, struct \
        public static readonly long SYS_KTIMER_GETOVERRUN = 239L; // { int ktimer_getoverrun(int timerid); }
        public static readonly long SYS_NANOSLEEP = 240L; // { int nanosleep(const struct timespec *rqtp, \
        public static readonly long SYS_FFCLOCK_GETCOUNTER = 241L; // { int ffclock_getcounter(ffcounter *ffcount); }
        public static readonly long SYS_FFCLOCK_SETESTIMATE = 242L; // { int ffclock_setestimate( \
        public static readonly long SYS_FFCLOCK_GETESTIMATE = 243L; // { int ffclock_getestimate( \
        public static readonly long SYS_CLOCK_GETCPUCLOCKID2 = 247L; // { int clock_getcpuclockid2(id_t id,\
        public static readonly long SYS_NTP_GETTIME = 248L; // { int ntp_gettime(struct ntptimeval *ntvp); }
        public static readonly long SYS_MINHERIT = 250L; // { int minherit(void *addr, size_t len, \
        public static readonly long SYS_RFORK = 251L; // { int rfork(int flags); }
        public static readonly long SYS_OPENBSD_POLL = 252L; // { int openbsd_poll(struct pollfd *fds, \
        public static readonly long SYS_ISSETUGID = 253L; // { int issetugid(void); }
        public static readonly long SYS_LCHOWN = 254L; // { int lchown(char *path, int uid, int gid); }
        public static readonly long SYS_GETDENTS = 272L; // { int getdents(int fd, char *buf, \
        public static readonly long SYS_LCHMOD = 274L; // { int lchmod(char *path, mode_t mode); }
        public static readonly long SYS_LUTIMES = 276L; // { int lutimes(char *path, \
        public static readonly long SYS_NSTAT = 278L; // { int nstat(char *path, struct nstat *ub); }
        public static readonly long SYS_NFSTAT = 279L; // { int nfstat(int fd, struct nstat *sb); }
        public static readonly long SYS_NLSTAT = 280L; // { int nlstat(char *path, struct nstat *ub); }
        public static readonly long SYS_PREADV = 289L; // { ssize_t preadv(int fd, struct iovec *iovp, \
        public static readonly long SYS_PWRITEV = 290L; // { ssize_t pwritev(int fd, struct iovec *iovp, \
        public static readonly long SYS_FHOPEN = 298L; // { int fhopen(const struct fhandle *u_fhp, \
        public static readonly long SYS_FHSTAT = 299L; // { int fhstat(const struct fhandle *u_fhp, \
        public static readonly long SYS_MODNEXT = 300L; // { int modnext(int modid); }
        public static readonly long SYS_MODSTAT = 301L; // { int modstat(int modid, \
        public static readonly long SYS_MODFNEXT = 302L; // { int modfnext(int modid); }
        public static readonly long SYS_MODFIND = 303L; // { int modfind(const char *name); }
        public static readonly long SYS_KLDLOAD = 304L; // { int kldload(const char *file); }
        public static readonly long SYS_KLDUNLOAD = 305L; // { int kldunload(int fileid); }
        public static readonly long SYS_KLDFIND = 306L; // { int kldfind(const char *file); }
        public static readonly long SYS_KLDNEXT = 307L; // { int kldnext(int fileid); }
        public static readonly long SYS_KLDSTAT = 308L; // { int kldstat(int fileid, struct \
        public static readonly long SYS_KLDFIRSTMOD = 309L; // { int kldfirstmod(int fileid); }
        public static readonly long SYS_GETSID = 310L; // { int getsid(pid_t pid); }
        public static readonly long SYS_SETRESUID = 311L; // { int setresuid(uid_t ruid, uid_t euid, \
        public static readonly long SYS_SETRESGID = 312L; // { int setresgid(gid_t rgid, gid_t egid, \
        public static readonly long SYS_YIELD = 321L; // { int yield(void); }
        public static readonly long SYS_MLOCKALL = 324L; // { int mlockall(int how); }
        public static readonly long SYS_MUNLOCKALL = 325L; // { int munlockall(void); }
        public static readonly long SYS___GETCWD = 326L; // { int __getcwd(u_char *buf, u_int buflen); }
        public static readonly long SYS_SCHED_SETPARAM = 327L; // { int sched_setparam (pid_t pid, \
        public static readonly long SYS_SCHED_GETPARAM = 328L; // { int sched_getparam (pid_t pid, struct \
        public static readonly long SYS_SCHED_SETSCHEDULER = 329L; // { int sched_setscheduler (pid_t pid, int \
        public static readonly long SYS_SCHED_GETSCHEDULER = 330L; // { int sched_getscheduler (pid_t pid); }
        public static readonly long SYS_SCHED_YIELD = 331L; // { int sched_yield (void); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MAX = 332L; // { int sched_get_priority_max (int policy); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MIN = 333L; // { int sched_get_priority_min (int policy); }
        public static readonly long SYS_SCHED_RR_GET_INTERVAL = 334L; // { int sched_rr_get_interval (pid_t pid, \
        public static readonly long SYS_UTRACE = 335L; // { int utrace(const void *addr, size_t len); }
        public static readonly long SYS_KLDSYM = 337L; // { int kldsym(int fileid, int cmd, \
        public static readonly long SYS_JAIL = 338L; // { int jail(struct jail *jail); }
        public static readonly long SYS_SIGPROCMASK = 340L; // { int sigprocmask(int how, \
        public static readonly long SYS_SIGSUSPEND = 341L; // { int sigsuspend(const sigset_t *sigmask); }
        public static readonly long SYS_SIGPENDING = 343L; // { int sigpending(sigset_t *set); }
        public static readonly long SYS_SIGTIMEDWAIT = 345L; // { int sigtimedwait(const sigset_t *set, \
        public static readonly long SYS_SIGWAITINFO = 346L; // { int sigwaitinfo(const sigset_t *set, \
        public static readonly long SYS___ACL_GET_FILE = 347L; // { int __acl_get_file(const char *path, \
        public static readonly long SYS___ACL_SET_FILE = 348L; // { int __acl_set_file(const char *path, \
        public static readonly long SYS___ACL_GET_FD = 349L; // { int __acl_get_fd(int filedes, \
        public static readonly long SYS___ACL_SET_FD = 350L; // { int __acl_set_fd(int filedes, \
        public static readonly long SYS___ACL_DELETE_FILE = 351L; // { int __acl_delete_file(const char *path, \
        public static readonly long SYS___ACL_DELETE_FD = 352L; // { int __acl_delete_fd(int filedes, \
        public static readonly long SYS___ACL_ACLCHECK_FILE = 353L; // { int __acl_aclcheck_file(const char *path, \
        public static readonly long SYS___ACL_ACLCHECK_FD = 354L; // { int __acl_aclcheck_fd(int filedes, \
        public static readonly long SYS_EXTATTRCTL = 355L; // { int extattrctl(const char *path, int cmd, \
        public static readonly long SYS_EXTATTR_SET_FILE = 356L; // { ssize_t extattr_set_file( \
        public static readonly long SYS_EXTATTR_GET_FILE = 357L; // { ssize_t extattr_get_file( \
        public static readonly long SYS_EXTATTR_DELETE_FILE = 358L; // { int extattr_delete_file(const char *path, \
        public static readonly long SYS_GETRESUID = 360L; // { int getresuid(uid_t *ruid, uid_t *euid, \
        public static readonly long SYS_GETRESGID = 361L; // { int getresgid(gid_t *rgid, gid_t *egid, \
        public static readonly long SYS_KQUEUE = 362L; // { int kqueue(void); }
        public static readonly long SYS_KEVENT = 363L; // { int kevent(int fd, \
        public static readonly long SYS_EXTATTR_SET_FD = 371L; // { ssize_t extattr_set_fd(int fd, \
        public static readonly long SYS_EXTATTR_GET_FD = 372L; // { ssize_t extattr_get_fd(int fd, \
        public static readonly long SYS_EXTATTR_DELETE_FD = 373L; // { int extattr_delete_fd(int fd, \
        public static readonly long SYS___SETUGID = 374L; // { int __setugid(int flag); }
        public static readonly long SYS_EACCESS = 376L; // { int eaccess(char *path, int amode); }
        public static readonly long SYS_NMOUNT = 378L; // { int nmount(struct iovec *iovp, \
        public static readonly long SYS___MAC_GET_PROC = 384L; // { int __mac_get_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_PROC = 385L; // { int __mac_set_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_GET_FD = 386L; // { int __mac_get_fd(int fd, \
        public static readonly long SYS___MAC_GET_FILE = 387L; // { int __mac_get_file(const char *path_p, \
        public static readonly long SYS___MAC_SET_FD = 388L; // { int __mac_set_fd(int fd, \
        public static readonly long SYS___MAC_SET_FILE = 389L; // { int __mac_set_file(const char *path_p, \
        public static readonly long SYS_KENV = 390L; // { int kenv(int what, const char *name, \
        public static readonly long SYS_LCHFLAGS = 391L; // { int lchflags(const char *path, \
        public static readonly long SYS_UUIDGEN = 392L; // { int uuidgen(struct uuid *store, \
        public static readonly long SYS_SENDFILE = 393L; // { int sendfile(int fd, int s, off_t offset, \
        public static readonly long SYS_MAC_SYSCALL = 394L; // { int mac_syscall(const char *policy, \
        public static readonly long SYS_GETFSSTAT = 395L; // { int getfsstat(struct statfs *buf, \
        public static readonly long SYS_STATFS = 396L; // { int statfs(char *path, \
        public static readonly long SYS_FSTATFS = 397L; // { int fstatfs(int fd, struct statfs *buf); }
        public static readonly long SYS_FHSTATFS = 398L; // { int fhstatfs(const struct fhandle *u_fhp, \
        public static readonly long SYS___MAC_GET_PID = 409L; // { int __mac_get_pid(pid_t pid, \
        public static readonly long SYS___MAC_GET_LINK = 410L; // { int __mac_get_link(const char *path_p, \
        public static readonly long SYS___MAC_SET_LINK = 411L; // { int __mac_set_link(const char *path_p, \
        public static readonly long SYS_EXTATTR_SET_LINK = 412L; // { ssize_t extattr_set_link( \
        public static readonly long SYS_EXTATTR_GET_LINK = 413L; // { ssize_t extattr_get_link( \
        public static readonly long SYS_EXTATTR_DELETE_LINK = 414L; // { int extattr_delete_link( \
        public static readonly long SYS___MAC_EXECVE = 415L; // { int __mac_execve(char *fname, char **argv, \
        public static readonly long SYS_SIGACTION = 416L; // { int sigaction(int sig, \
        public static readonly long SYS_SIGRETURN = 417L; // { int sigreturn( \
        public static readonly long SYS_GETCONTEXT = 421L; // { int getcontext(struct __ucontext *ucp); }
        public static readonly long SYS_SETCONTEXT = 422L; // { int setcontext( \
        public static readonly long SYS_SWAPCONTEXT = 423L; // { int swapcontext(struct __ucontext *oucp, \
        public static readonly long SYS_SWAPOFF = 424L; // { int swapoff(const char *name); }
        public static readonly long SYS___ACL_GET_LINK = 425L; // { int __acl_get_link(const char *path, \
        public static readonly long SYS___ACL_SET_LINK = 426L; // { int __acl_set_link(const char *path, \
        public static readonly long SYS___ACL_DELETE_LINK = 427L; // { int __acl_delete_link(const char *path, \
        public static readonly long SYS___ACL_ACLCHECK_LINK = 428L; // { int __acl_aclcheck_link(const char *path, \
        public static readonly long SYS_SIGWAIT = 429L; // { int sigwait(const sigset_t *set, \
        public static readonly long SYS_THR_CREATE = 430L; // { int thr_create(ucontext_t *ctx, long *id, \
        public static readonly long SYS_THR_EXIT = 431L; // { void thr_exit(long *state); }
        public static readonly long SYS_THR_SELF = 432L; // { int thr_self(long *id); }
        public static readonly long SYS_THR_KILL = 433L; // { int thr_kill(long id, int sig); }
        public static readonly long SYS__UMTX_LOCK = 434L; // { int _umtx_lock(struct umtx *umtx); }
        public static readonly long SYS__UMTX_UNLOCK = 435L; // { int _umtx_unlock(struct umtx *umtx); }
        public static readonly long SYS_JAIL_ATTACH = 436L; // { int jail_attach(int jid); }
        public static readonly long SYS_EXTATTR_LIST_FD = 437L; // { ssize_t extattr_list_fd(int fd, \
        public static readonly long SYS_EXTATTR_LIST_FILE = 438L; // { ssize_t extattr_list_file( \
        public static readonly long SYS_EXTATTR_LIST_LINK = 439L; // { ssize_t extattr_list_link( \
        public static readonly long SYS_THR_SUSPEND = 442L; // { int thr_suspend( \
        public static readonly long SYS_THR_WAKE = 443L; // { int thr_wake(long id); }
        public static readonly long SYS_KLDUNLOADF = 444L; // { int kldunloadf(int fileid, int flags); }
        public static readonly long SYS_AUDIT = 445L; // { int audit(const void *record, \
        public static readonly long SYS_AUDITON = 446L; // { int auditon(int cmd, void *data, \
        public static readonly long SYS_GETAUID = 447L; // { int getauid(uid_t *auid); }
        public static readonly long SYS_SETAUID = 448L; // { int setauid(uid_t *auid); }
        public static readonly long SYS_GETAUDIT = 449L; // { int getaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_SETAUDIT = 450L; // { int setaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_GETAUDIT_ADDR = 451L; // { int getaudit_addr( \
        public static readonly long SYS_SETAUDIT_ADDR = 452L; // { int setaudit_addr( \
        public static readonly long SYS_AUDITCTL = 453L; // { int auditctl(char *path); }
        public static readonly long SYS__UMTX_OP = 454L; // { int _umtx_op(void *obj, int op, \
        public static readonly long SYS_THR_NEW = 455L; // { int thr_new(struct thr_param *param, \
        public static readonly long SYS_SIGQUEUE = 456L; // { int sigqueue(pid_t pid, int signum, void *value); }
        public static readonly long SYS_ABORT2 = 463L; // { int abort2(const char *why, int nargs, void **args); }
        public static readonly long SYS_THR_SET_NAME = 464L; // { int thr_set_name(long id, const char *name); }
        public static readonly long SYS_RTPRIO_THREAD = 466L; // { int rtprio_thread(int function, \
        public static readonly long SYS_SCTP_PEELOFF = 471L; // { int sctp_peeloff(int sd, uint32_t name); }
        public static readonly long SYS_SCTP_GENERIC_SENDMSG = 472L; // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, \
        public static readonly long SYS_SCTP_GENERIC_SENDMSG_IOV = 473L; // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, \
        public static readonly long SYS_SCTP_GENERIC_RECVMSG = 474L; // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, \
        public static readonly long SYS_PREAD = 475L; // { ssize_t pread(int fd, void *buf, \
        public static readonly long SYS_PWRITE = 476L; // { ssize_t pwrite(int fd, const void *buf, \
        public static readonly long SYS_MMAP = 477L; // { caddr_t mmap(caddr_t addr, size_t len, \
        public static readonly long SYS_LSEEK = 478L; // { off_t lseek(int fd, off_t offset, \
        public static readonly long SYS_TRUNCATE = 479L; // { int truncate(char *path, off_t length); }
        public static readonly long SYS_FTRUNCATE = 480L; // { int ftruncate(int fd, off_t length); }
        public static readonly long SYS_THR_KILL2 = 481L; // { int thr_kill2(pid_t pid, long id, int sig); }
        public static readonly long SYS_SHM_OPEN = 482L; // { int shm_open(const char *path, int flags, \
        public static readonly long SYS_SHM_UNLINK = 483L; // { int shm_unlink(const char *path); }
        public static readonly long SYS_CPUSET = 484L; // { int cpuset(cpusetid_t *setid); }
        public static readonly long SYS_CPUSET_SETID = 485L; // { int cpuset_setid(cpuwhich_t which, id_t id, \
        public static readonly long SYS_CPUSET_GETID = 486L; // { int cpuset_getid(cpulevel_t level, \
        public static readonly long SYS_CPUSET_GETAFFINITY = 487L; // { int cpuset_getaffinity(cpulevel_t level, \
        public static readonly long SYS_CPUSET_SETAFFINITY = 488L; // { int cpuset_setaffinity(cpulevel_t level, \
        public static readonly long SYS_FACCESSAT = 489L; // { int faccessat(int fd, char *path, int amode, \
        public static readonly long SYS_FCHMODAT = 490L; // { int fchmodat(int fd, char *path, mode_t mode, \
        public static readonly long SYS_FCHOWNAT = 491L; // { int fchownat(int fd, char *path, uid_t uid, \
        public static readonly long SYS_FEXECVE = 492L; // { int fexecve(int fd, char **argv, \
        public static readonly long SYS_FSTATAT = 493L; // { int fstatat(int fd, char *path, \
        public static readonly long SYS_FUTIMESAT = 494L; // { int futimesat(int fd, char *path, \
        public static readonly long SYS_LINKAT = 495L; // { int linkat(int fd1, char *path1, int fd2, \
        public static readonly long SYS_MKDIRAT = 496L; // { int mkdirat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKFIFOAT = 497L; // { int mkfifoat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKNODAT = 498L; // { int mknodat(int fd, char *path, mode_t mode, \
        public static readonly long SYS_OPENAT = 499L; // { int openat(int fd, char *path, int flag, \
        public static readonly long SYS_READLINKAT = 500L; // { int readlinkat(int fd, char *path, char *buf, \
        public static readonly long SYS_RENAMEAT = 501L; // { int renameat(int oldfd, char *old, int newfd, \
        public static readonly long SYS_SYMLINKAT = 502L; // { int symlinkat(char *path1, int fd, \
        public static readonly long SYS_UNLINKAT = 503L; // { int unlinkat(int fd, char *path, int flag); }
        public static readonly long SYS_POSIX_OPENPT = 504L; // { int posix_openpt(int flags); }
        public static readonly long SYS_JAIL_GET = 506L; // { int jail_get(struct iovec *iovp, \
        public static readonly long SYS_JAIL_SET = 507L; // { int jail_set(struct iovec *iovp, \
        public static readonly long SYS_JAIL_REMOVE = 508L; // { int jail_remove(int jid); }
        public static readonly long SYS_CLOSEFROM = 509L; // { int closefrom(int lowfd); }
        public static readonly long SYS_LPATHCONF = 513L; // { int lpathconf(char *path, int name); }
        public static readonly long SYS_CAP_NEW = 514L; // { int cap_new(int fd, uint64_t rights); }
        public static readonly long SYS_CAP_GETRIGHTS = 515L; // { int cap_getrights(int fd, \
        public static readonly long SYS_CAP_ENTER = 516L; // { int cap_enter(void); }
        public static readonly long SYS_CAP_GETMODE = 517L; // { int cap_getmode(u_int *modep); }
        public static readonly long SYS_PDFORK = 518L; // { int pdfork(int *fdp, int flags); }
        public static readonly long SYS_PDKILL = 519L; // { int pdkill(int fd, int signum); }
        public static readonly long SYS_PDGETPID = 520L; // { int pdgetpid(int fd, pid_t *pidp); }
        public static readonly long SYS_PSELECT = 522L; // { int pselect(int nd, fd_set *in, \
        public static readonly long SYS_GETLOGINCLASS = 523L; // { int getloginclass(char *namebuf, \
        public static readonly long SYS_SETLOGINCLASS = 524L; // { int setloginclass(const char *namebuf); }
        public static readonly long SYS_RCTL_GET_RACCT = 525L; // { int rctl_get_racct(const void *inbufp, \
        public static readonly long SYS_RCTL_GET_RULES = 526L; // { int rctl_get_rules(const void *inbufp, \
        public static readonly long SYS_RCTL_GET_LIMITS = 527L; // { int rctl_get_limits(const void *inbufp, \
        public static readonly long SYS_RCTL_ADD_RULE = 528L; // { int rctl_add_rule(const void *inbufp, \
        public static readonly long SYS_RCTL_REMOVE_RULE = 529L; // { int rctl_remove_rule(const void *inbufp, \
        public static readonly long SYS_POSIX_FALLOCATE = 530L; // { int posix_fallocate(int fd, \
        public static readonly long SYS_POSIX_FADVISE = 531L; // { int posix_fadvise(int fd, off_t offset, \
        public static readonly long SYS_WAIT6 = 532L; // { int wait6(idtype_t idtype, id_t id, \
        public static readonly long SYS_BINDAT = 538L; // { int bindat(int fd, int s, caddr_t name, \
        public static readonly long SYS_CONNECTAT = 539L; // { int connectat(int fd, int s, caddr_t name, \
        public static readonly long SYS_CHFLAGSAT = 540L; // { int chflagsat(int fd, const char *path, \
        public static readonly long SYS_ACCEPT4 = 541L; // { int accept4(int s, \
        public static readonly long SYS_PIPE2 = 542L; // { int pipe2(int *fildes, int flags); }
        public static readonly long SYS_PROCCTL = 544L; // { int procctl(idtype_t idtype, id_t id, \
        public static readonly long SYS_UTIMENSAT = 547L; // { int utimensat(int fd, \
    }
}
