//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:37:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface RawConn
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RawConn As<T>(in T target) => (RawConn<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RawConn As<T>(ptr<T> target_ptr) => (RawConn<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static RawConn? As(object target) =>
                typeof(RawConn<>).CreateInterfaceHandler<RawConn>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class RawConn<T> : RawConn
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public RawConn(in T target) => m_target = target;

            public RawConn(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ControlByRef(ref T value, Action<System.UIntPtr> f);
            private delegate error ControlByVal(T value, Action<System.UIntPtr> f);

            private static readonly ControlByRef s_ControlByRef;
            private static readonly ControlByVal s_ControlByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Control(Action<System.UIntPtr> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ControlByRef is null)
                    return s_ControlByVal!(target, f);

                return s_ControlByRef(ref target, f);
            }

            private delegate error ReadByRef(ref T value, Func<System.UIntPtr, bool> f);
            private delegate error ReadByVal(T value, Func<System.UIntPtr, bool> f);

            private static readonly ReadByRef s_ReadByRef;
            private static readonly ReadByVal s_ReadByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Read(Func<System.UIntPtr, bool> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ReadByRef is null)
                    return s_ReadByVal!(target, f);

                return s_ReadByRef(ref target, f);
            }

            private delegate error WriteByRef(ref T value, Func<System.UIntPtr, bool> f);
            private delegate error WriteByVal(T value, Func<System.UIntPtr, bool> f);

            private static readonly WriteByRef s_WriteByRef;
            private static readonly WriteByVal s_WriteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Write(Func<System.UIntPtr, bool> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WriteByRef is null)
                    return s_WriteByVal!(target, f);

                return s_WriteByRef(ref target, f);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static RawConn()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Control");

                if (!(extensionMethod is null))
                    s_ControlByRef = extensionMethod.CreateStaticDelegate(typeof(ControlByRef)) as ControlByRef;

                if (s_ControlByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Control");

                    if (!(extensionMethod is null))
                        s_ControlByVal = extensionMethod.CreateStaticDelegate(typeof(ControlByVal)) as ControlByVal;
                }

                if (s_ControlByRef is null && s_ControlByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RawConn.Control method", new Exception("Control"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Read");

                if (!(extensionMethod is null))
                    s_ReadByRef = extensionMethod.CreateStaticDelegate(typeof(ReadByRef)) as ReadByRef;

                if (s_ReadByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Read");

                    if (!(extensionMethod is null))
                        s_ReadByVal = extensionMethod.CreateStaticDelegate(typeof(ReadByVal)) as ReadByVal;
                }

                if (s_ReadByRef is null && s_ReadByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RawConn.Read method", new Exception("Read"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Write");

                if (!(extensionMethod is null))
                    s_WriteByRef = extensionMethod.CreateStaticDelegate(typeof(WriteByRef)) as WriteByRef;

                if (s_WriteByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Write");

                    if (!(extensionMethod is null))
                        s_WriteByVal = extensionMethod.CreateStaticDelegate(typeof(WriteByVal)) as WriteByVal;
                }

                if (s_WriteByRef is null && s_WriteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement RawConn.Write method", new Exception("Write"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator RawConn<T>(in ptr<T> target_ptr) => new RawConn<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator RawConn<T>(in T target) => new RawConn<T>(target);

            // Enable comparisons between nil and RawConn<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(RawConn<T> value, NilType nil) => Activator.CreateInstance<RawConn<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(RawConn<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, RawConn<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, RawConn<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class syscall_RawConnExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.syscall_package.RawConn target)
        {
            try
            {
                return ((go.syscall_package.RawConn<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.syscall_package.RawConn target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.syscall_package.RawConn target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.syscall_package.RawConn<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.syscall_package.RawConn target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}