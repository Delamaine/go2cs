//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:37:23 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;

namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct listener
        {
            // Constructors
            public listener(NilType _)
            {
                this.rd = default;
                this.local = default;
            }

            public listener(ref ptr<msgq> rd = default, addr local = default)
            {
                this.rd = rd;
                this.local = local;
            }

            // Enable comparisons between nil and listener struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(listener value, NilType nil) => value.Equals(default(listener));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(listener value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, listener value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, listener value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator listener(NilType nil) => default(listener);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static listener listener_cast(dynamic value)
        {
            return new listener(ref value.rd, value.local);
        }
    }
}