//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:37:23 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;

namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct netproto
        {
            // Constructors
            public netproto(NilType _)
            {
                this.bind = default;
            }

            public netproto(Func<ref netFile, Sockaddr, error> bind = default)
            {
                this.bind = bind;
            }

            // Enable comparisons between nil and netproto struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(netproto value, NilType nil) => value.Equals(default(netproto));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(netproto value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, netproto value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, netproto value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator netproto(NilType nil) => default(netproto);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static netproto netproto_cast(dynamic value)
        {
            return new netproto(value.bind);
        }
    }
}