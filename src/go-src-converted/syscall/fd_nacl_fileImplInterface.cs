//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:37:07 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using sync = go.sync_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface fileImpl
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static fileImpl As<T>(in T target) => (fileImpl<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static fileImpl As<T>(ptr<T> target_ptr) => (fileImpl<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static fileImpl? As(object target) =>
                typeof(fileImpl<>).CreateInterfaceHandler<fileImpl>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class fileImpl<T> : fileImpl
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public fileImpl(in T target) => m_target = target;

            public fileImpl(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error statByRef(ref T value, ref Stat_t _p0);
            private delegate error statByVal(T value, ref Stat_t _p0);

            private static readonly statByRef s_statByRef;
            private static readonly statByVal s_statByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error stat(ref Stat_t _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_statByRef is null)
                    return s_statByVal!(target, _p0);

                return s_statByRef(ref target, _p0);
            }

            private delegate error readByRef(ref T value, slice<byte> _p0);
            private delegate error readByVal(T value, slice<byte> _p0);

            private static readonly readByRef s_readByRef;
            private static readonly readByVal s_readByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error read(slice<byte> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_readByRef is null)
                    return s_readByVal!(target, _p0);

                return s_readByRef(ref target, _p0);
            }

            private delegate error writeByRef(ref T value, slice<byte> _p0);
            private delegate error writeByVal(T value, slice<byte> _p0);

            private static readonly writeByRef s_writeByRef;
            private static readonly writeByVal s_writeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error write(slice<byte> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_writeByRef is null)
                    return s_writeByVal!(target, _p0);

                return s_writeByRef(ref target, _p0);
            }

            private delegate error seekByRef(ref T value, long _p0, long _p0);
            private delegate error seekByVal(T value, long _p0, long _p0);

            private static readonly seekByRef s_seekByRef;
            private static readonly seekByVal s_seekByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error seek(long _p0, long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_seekByRef is null)
                    return s_seekByVal!(target, _p0, _p0);

                return s_seekByRef(ref target, _p0, _p0);
            }

            private delegate error preadByRef(ref T value, slice<byte> _p0, long _p0);
            private delegate error preadByVal(T value, slice<byte> _p0, long _p0);

            private static readonly preadByRef s_preadByRef;
            private static readonly preadByVal s_preadByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error pread(slice<byte> _p0, long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_preadByRef is null)
                    return s_preadByVal!(target, _p0, _p0);

                return s_preadByRef(ref target, _p0, _p0);
            }

            private delegate error pwriteByRef(ref T value, slice<byte> _p0, long _p0);
            private delegate error pwriteByVal(T value, slice<byte> _p0, long _p0);

            private static readonly pwriteByRef s_pwriteByRef;
            private static readonly pwriteByVal s_pwriteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error pwrite(slice<byte> _p0, long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_pwriteByRef is null)
                    return s_pwriteByVal!(target, _p0, _p0);

                return s_pwriteByRef(ref target, _p0, _p0);
            }

            private delegate error closeByRef(ref T value);
            private delegate error closeByVal(T value);

            private static readonly closeByRef s_closeByRef;
            private static readonly closeByVal s_closeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_closeByRef is null)
                    return s_closeByVal!(target);

                return s_closeByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static fileImpl()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("stat");

                if (!(extensionMethod is null))
                    s_statByRef = extensionMethod.CreateStaticDelegate(typeof(statByRef)) as statByRef;

                if (s_statByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("stat");

                    if (!(extensionMethod is null))
                        s_statByVal = extensionMethod.CreateStaticDelegate(typeof(statByVal)) as statByVal;
                }

                if (s_statByRef is null && s_statByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.stat method", new Exception("stat"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("read");

                if (!(extensionMethod is null))
                    s_readByRef = extensionMethod.CreateStaticDelegate(typeof(readByRef)) as readByRef;

                if (s_readByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("read");

                    if (!(extensionMethod is null))
                        s_readByVal = extensionMethod.CreateStaticDelegate(typeof(readByVal)) as readByVal;
                }

                if (s_readByRef is null && s_readByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.read method", new Exception("read"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("write");

                if (!(extensionMethod is null))
                    s_writeByRef = extensionMethod.CreateStaticDelegate(typeof(writeByRef)) as writeByRef;

                if (s_writeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("write");

                    if (!(extensionMethod is null))
                        s_writeByVal = extensionMethod.CreateStaticDelegate(typeof(writeByVal)) as writeByVal;
                }

                if (s_writeByRef is null && s_writeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.write method", new Exception("write"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("seek");

                if (!(extensionMethod is null))
                    s_seekByRef = extensionMethod.CreateStaticDelegate(typeof(seekByRef)) as seekByRef;

                if (s_seekByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("seek");

                    if (!(extensionMethod is null))
                        s_seekByVal = extensionMethod.CreateStaticDelegate(typeof(seekByVal)) as seekByVal;
                }

                if (s_seekByRef is null && s_seekByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.seek method", new Exception("seek"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("pread");

                if (!(extensionMethod is null))
                    s_preadByRef = extensionMethod.CreateStaticDelegate(typeof(preadByRef)) as preadByRef;

                if (s_preadByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("pread");

                    if (!(extensionMethod is null))
                        s_preadByVal = extensionMethod.CreateStaticDelegate(typeof(preadByVal)) as preadByVal;
                }

                if (s_preadByRef is null && s_preadByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.pread method", new Exception("pread"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("pwrite");

                if (!(extensionMethod is null))
                    s_pwriteByRef = extensionMethod.CreateStaticDelegate(typeof(pwriteByRef)) as pwriteByRef;

                if (s_pwriteByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("pwrite");

                    if (!(extensionMethod is null))
                        s_pwriteByVal = extensionMethod.CreateStaticDelegate(typeof(pwriteByVal)) as pwriteByVal;
                }

                if (s_pwriteByRef is null && s_pwriteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.pwrite method", new Exception("pwrite"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("close");

                if (!(extensionMethod is null))
                    s_closeByRef = extensionMethod.CreateStaticDelegate(typeof(closeByRef)) as closeByRef;

                if (s_closeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("close");

                    if (!(extensionMethod is null))
                        s_closeByVal = extensionMethod.CreateStaticDelegate(typeof(closeByVal)) as closeByVal;
                }

                if (s_closeByRef is null && s_closeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement fileImpl.close method", new Exception("close"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator fileImpl<T>(in ptr<T> target_ptr) => new fileImpl<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator fileImpl<T>(in T target) => new fileImpl<T>(target);

            // Enable comparisons between nil and fileImpl<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(fileImpl<T> value, NilType nil) => Activator.CreateInstance<fileImpl<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(fileImpl<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, fileImpl<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, fileImpl<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class syscall_fileImplExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.syscall_package.fileImpl target)
        {
            try
            {
                return ((go.syscall_package.fileImpl<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.syscall_package.fileImpl target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.syscall_package.fileImpl target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.syscall_package.fileImpl<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.syscall_package.fileImpl target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}