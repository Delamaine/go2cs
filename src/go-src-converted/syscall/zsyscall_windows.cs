// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

// package syscall -- go2cs converted at 2020 August 29 08:41:58 UTC
// import "syscall" ==> using syscall = go.syscall_package
// Original source: C:\Go\src\syscall\zsyscall_windows.go
using sysdll = go.@internal.syscall.windows.sysdll_package;
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go
{
    public static partial class syscall_package
    {
        private static unsafe.Pointer _ = default;

        // Do the interface allocations only once for common
        // Errno values.
        private static readonly long errnoERROR_IO_PENDING = 997L;

        private static error errERROR_IO_PENDING = error.As(Errno(errnoERROR_IO_PENDING));

        // errnoErr returns common boxed Errno values, to prevent
        // allocations at runtime.
        private static error errnoErr(Errno e)
        {

            if (e == 0L) 
                return error.As(null);
            else if (e == errnoERROR_IO_PENDING) 
                return error.As(errERROR_IO_PENDING);
            // TODO: add more here, after collecting data on the common
            // error values see on Windows. (perhaps when running
            // all.bat?)
            return error.As(e);
        }

        private static var modkernel32 = NewLazyDLL(sysdll.Add("kernel32.dll"));        private static var modadvapi32 = NewLazyDLL(sysdll.Add("advapi32.dll"));        private static var modshell32 = NewLazyDLL(sysdll.Add("shell32.dll"));        private static var modmswsock = NewLazyDLL(sysdll.Add("mswsock.dll"));        private static var modcrypt32 = NewLazyDLL(sysdll.Add("crypt32.dll"));        private static var modws2_32 = NewLazyDLL(sysdll.Add("ws2_32.dll"));        private static var moddnsapi = NewLazyDLL(sysdll.Add("dnsapi.dll"));        private static var modiphlpapi = NewLazyDLL(sysdll.Add("iphlpapi.dll"));        private static var modsecur32 = NewLazyDLL(sysdll.Add("secur32.dll"));        private static var modnetapi32 = NewLazyDLL(sysdll.Add("netapi32.dll"));        private static var moduserenv = NewLazyDLL(sysdll.Add("userenv.dll"));        private static var procGetLastError = modkernel32.NewProc("GetLastError");        private static var procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");        private static var procFreeLibrary = modkernel32.NewProc("FreeLibrary");        private static var procGetProcAddress = modkernel32.NewProc("GetProcAddress");        private static var procGetVersion = modkernel32.NewProc("GetVersion");        private static var procFormatMessageW = modkernel32.NewProc("FormatMessageW");        private static var procExitProcess = modkernel32.NewProc("ExitProcess");        private static var procCreateFileW = modkernel32.NewProc("CreateFileW");        private static var procReadFile = modkernel32.NewProc("ReadFile");        private static var procWriteFile = modkernel32.NewProc("WriteFile");        private static var procSetFilePointer = modkernel32.NewProc("SetFilePointer");        private static var procCloseHandle = modkernel32.NewProc("CloseHandle");        private static var procGetStdHandle = modkernel32.NewProc("GetStdHandle");        private static var procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");        private static var procFindNextFileW = modkernel32.NewProc("FindNextFileW");        private static var procFindClose = modkernel32.NewProc("FindClose");        private static var procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");        private static var procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");        private static var procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");        private static var procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");        private static var procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");        private static var procDeleteFileW = modkernel32.NewProc("DeleteFileW");        private static var procMoveFileW = modkernel32.NewProc("MoveFileW");        private static var procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");        private static var procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");        private static var procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");        private static var procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");        private static var procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");        private static var procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");        private static var procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");        private static var procCancelIo = modkernel32.NewProc("CancelIo");        private static var procCancelIoEx = modkernel32.NewProc("CancelIoEx");        private static var procCreateProcessW = modkernel32.NewProc("CreateProcessW");        private static var procCreateProcessAsUserW = modadvapi32.NewProc("CreateProcessAsUserW");        private static var procOpenProcess = modkernel32.NewProc("OpenProcess");        private static var procTerminateProcess = modkernel32.NewProc("TerminateProcess");        private static var procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");        private static var procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");        private static var procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");        private static var procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");        private static var procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");        private static var procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");        private static var procGetTempPathW = modkernel32.NewProc("GetTempPathW");        private static var procCreatePipe = modkernel32.NewProc("CreatePipe");        private static var procGetFileType = modkernel32.NewProc("GetFileType");        private static var procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");        private static var procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");        private static var procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");        private static var procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");        private static var procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");        private static var procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");        private static var procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");        private static var procSetFileTime = modkernel32.NewProc("SetFileTime");        private static var procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");        private static var procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");        private static var procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");        private static var procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");        private static var procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");        private static var procLocalFree = modkernel32.NewProc("LocalFree");        private static var procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");        private static var procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");        private static var procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");        private static var procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");        private static var procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");        private static var procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");        private static var procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");        private static var procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");        private static var procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");        private static var procVirtualLock = modkernel32.NewProc("VirtualLock");        private static var procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");        private static var procTransmitFile = modmswsock.NewProc("TransmitFile");        private static var procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");        private static var procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");        private static var procCertOpenStore = modcrypt32.NewProc("CertOpenStore");        private static var procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");        private static var procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");        private static var procCertCloseStore = modcrypt32.NewProc("CertCloseStore");        private static var procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");        private static var procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");        private static var procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");        private static var procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");        private static var procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");        private static var procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");        private static var procRegCloseKey = modadvapi32.NewProc("RegCloseKey");        private static var procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");        private static var procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");        private static var procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");        private static var procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");        private static var procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");        private static var procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");        private static var procReadConsoleW = modkernel32.NewProc("ReadConsoleW");        private static var procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");        private static var procProcess32FirstW = modkernel32.NewProc("Process32FirstW");        private static var procProcess32NextW = modkernel32.NewProc("Process32NextW");        private static var procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");        private static var procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");        private static var procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");        private static var procWSAStartup = modws2_32.NewProc("WSAStartup");        private static var procWSACleanup = modws2_32.NewProc("WSACleanup");        private static var procWSAIoctl = modws2_32.NewProc("WSAIoctl");        private static var procsocket = modws2_32.NewProc("socket");        private static var procsetsockopt = modws2_32.NewProc("setsockopt");        private static var procgetsockopt = modws2_32.NewProc("getsockopt");        private static var procbind = modws2_32.NewProc("bind");        private static var procconnect = modws2_32.NewProc("connect");        private static var procgetsockname = modws2_32.NewProc("getsockname");        private static var procgetpeername = modws2_32.NewProc("getpeername");        private static var proclisten = modws2_32.NewProc("listen");        private static var procshutdown = modws2_32.NewProc("shutdown");        private static var procclosesocket = modws2_32.NewProc("closesocket");        private static var procAcceptEx = modmswsock.NewProc("AcceptEx");        private static var procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");        private static var procWSARecv = modws2_32.NewProc("WSARecv");        private static var procWSASend = modws2_32.NewProc("WSASend");        private static var procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");        private static var procWSASendTo = modws2_32.NewProc("WSASendTo");        private static var procgethostbyname = modws2_32.NewProc("gethostbyname");        private static var procgetservbyname = modws2_32.NewProc("getservbyname");        private static var procntohs = modws2_32.NewProc("ntohs");        private static var procgetprotobyname = modws2_32.NewProc("getprotobyname");        private static var procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");        private static var procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");        private static var procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");        private static var procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");        private static var procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");        private static var procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");        private static var procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");        private static var procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");        private static var procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");        private static var procTranslateNameW = modsecur32.NewProc("TranslateNameW");        private static var procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");        private static var procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");        private static var procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");        private static var procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");        private static var procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");        private static var procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");        private static var procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");        private static var procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");        private static var procGetLengthSid = modadvapi32.NewProc("GetLengthSid");        private static var procCopySid = modadvapi32.NewProc("CopySid");        private static var procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");        private static var procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");        private static var procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");

        public static error GetLastError()
        {
            var (r0, _, _) = Syscall(procGetLastError.Addr(), 0L, 0L, 0L, 0L);
            if (r0 != 0L)
            {
                lasterr = Errno(r0);
            }
            return;
        }

        public static (Handle, error) LoadLibrary(@string libname)
        {
            ref ushort _p0 = default;
            _p0, err = UTF16PtrFromString(libname);
            if (err != null)
            {
                return;
            }
            return _LoadLibrary(_p0);
        }

        private static (Handle, error) _LoadLibrary(ref ushort libname)
        {
            var (r0, _, e1) = Syscall(procLoadLibraryW.Addr(), 1L, uintptr(@unsafe.Pointer(libname)), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error FreeLibrary(Handle handle)
        {
            var (r1, _, e1) = Syscall(procFreeLibrary.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (System.UIntPtr, error) GetProcAddress(Handle module, @string procname)
        {
            ref byte _p0 = default;
            _p0, err = BytePtrFromString(procname);
            if (err != null)
            {
                return;
            }
            return _GetProcAddress(module, _p0);
        }

        private static (System.UIntPtr, error) _GetProcAddress(Handle module, ref byte procname)
        {
            var (r0, _, e1) = Syscall(procGetProcAddress.Addr(), 2L, uintptr(module), uintptr(@unsafe.Pointer(procname)), 0L);
            proc = uintptr(r0);
            if (proc == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetVersion()
        {
            var (r0, _, e1) = Syscall(procGetVersion.Addr(), 0L, 0L, 0L, 0L);
            ver = uint32(r0);
            if (ver == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static (uint, error) formatMessage(uint flags, System.UIntPtr msgsrc, uint msgid, uint langid, slice<ushort> buf, ref byte args)
        {
            ref ushort _p0 = default;
            if (len(buf) > 0L)
            {
                _p0 = ref buf[0L];
            }
            var (r0, _, e1) = Syscall9(procFormatMessageW.Addr(), 7L, uintptr(flags), uintptr(msgsrc), uintptr(msgid), uintptr(langid), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(args)), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static void ExitProcess(uint exitcode)
        {
            Syscall(procExitProcess.Addr(), 1L, uintptr(exitcode), 0L, 0L);
            return;
        }

        public static (Handle, error) CreateFile(ref ushort name, uint access, uint mode, ref SecurityAttributes sa, uint createmode, uint attrs, int templatefile)
        {
            var (r0, _, e1) = Syscall9(procCreateFileW.Addr(), 7L, uintptr(@unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(@unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0L, 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error ReadFile(Handle handle, slice<byte> buf, ref uint done, ref Overlapped overlapped)
        {
            ref byte _p0 = default;
            if (len(buf) > 0L)
            {
                _p0 = ref buf[0L];
            }
            var (r1, _, e1) = Syscall6(procReadFile.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WriteFile(Handle handle, slice<byte> buf, ref uint done, ref Overlapped overlapped)
        {
            ref byte _p0 = default;
            if (len(buf) > 0L)
            {
                _p0 = ref buf[0L];
            }
            var (r1, _, e1) = Syscall6(procWriteFile.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) SetFilePointer(Handle handle, int lowoffset, ref int highoffsetptr, uint whence)
        {
            var (r0, _, e1) = Syscall6(procSetFilePointer.Addr(), 4L, uintptr(handle), uintptr(lowoffset), uintptr(@unsafe.Pointer(highoffsetptr)), uintptr(whence), 0L, 0L);
            newlowoffset = uint32(r0);
            if (newlowoffset == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CloseHandle(Handle handle)
        {
            var (r1, _, e1) = Syscall(procCloseHandle.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) GetStdHandle(long stdhandle)
        {
            var (r0, _, e1) = Syscall(procGetStdHandle.Addr(), 1L, uintptr(stdhandle), 0L, 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static (Handle, error) findFirstFile1(ref ushort name, ref win32finddata1 data)
        {
            var (r0, _, e1) = Syscall(procFindFirstFileW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(data)), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error findNextFile1(Handle handle, ref win32finddata1 data)
        {
            var (r1, _, e1) = Syscall(procFindNextFileW.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error FindClose(Handle handle)
        {
            var (r1, _, e1) = Syscall(procFindClose.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetFileInformationByHandle(Handle handle, ref ByHandleFileInformation data)
        {
            var (r1, _, e1) = Syscall(procGetFileInformationByHandle.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetCurrentDirectory(uint buflen, ref ushort buf)
        {
            var (r0, _, e1) = Syscall(procGetCurrentDirectoryW.Addr(), 2L, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetCurrentDirectory(ref ushort path)
        {
            var (r1, _, e1) = Syscall(procSetCurrentDirectoryW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreateDirectory(ref ushort path, ref SecurityAttributes sa)
        {
            var (r1, _, e1) = Syscall(procCreateDirectoryW.Addr(), 2L, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(sa)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error RemoveDirectory(ref ushort path)
        {
            var (r1, _, e1) = Syscall(procRemoveDirectoryW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error DeleteFile(ref ushort path)
        {
            var (r1, _, e1) = Syscall(procDeleteFileW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error MoveFile(ref ushort from, ref ushort to)
        {
            var (r1, _, e1) = Syscall(procMoveFileW.Addr(), 2L, uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(to)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetComputerName(ref ushort buf, ref uint n)
        {
            var (r1, _, e1) = Syscall(procGetComputerNameW.Addr(), 2L, uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(n)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetEndOfFile(Handle handle)
        {
            var (r1, _, e1) = Syscall(procSetEndOfFile.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static void GetSystemTimeAsFileTime(ref Filetime time)
        {
            Syscall(procGetSystemTimeAsFileTime.Addr(), 1L, uintptr(@unsafe.Pointer(time)), 0L, 0L);
            return;
        }

        public static (uint, error) GetTimeZoneInformation(ref Timezoneinformation tzi)
        {
            var (r0, _, e1) = Syscall(procGetTimeZoneInformation.Addr(), 1L, uintptr(@unsafe.Pointer(tzi)), 0L, 0L);
            rc = uint32(r0);
            if (rc == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) CreateIoCompletionPort(Handle filehandle, Handle cphandle, uint key, uint threadcnt)
        {
            var (r0, _, e1) = Syscall6(procCreateIoCompletionPort.Addr(), 4L, uintptr(filehandle), uintptr(cphandle), uintptr(key), uintptr(threadcnt), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetQueuedCompletionStatus(Handle cphandle, ref uint qty, ref uint key, ptr<ptr<Overlapped>> overlapped, uint timeout)
        {
            var (r1, _, e1) = Syscall6(procGetQueuedCompletionStatus.Addr(), 5L, uintptr(cphandle), uintptr(@unsafe.Pointer(qty)), uintptr(@unsafe.Pointer(key)), uintptr(@unsafe.Pointer(overlapped)), uintptr(timeout), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error PostQueuedCompletionStatus(Handle cphandle, uint qty, uint key, ref Overlapped overlapped)
        {
            var (r1, _, e1) = Syscall6(procPostQueuedCompletionStatus.Addr(), 4L, uintptr(cphandle), uintptr(qty), uintptr(key), uintptr(@unsafe.Pointer(overlapped)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CancelIo(Handle s)
        {
            var (r1, _, e1) = Syscall(procCancelIo.Addr(), 1L, uintptr(s), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CancelIoEx(Handle s, ref Overlapped o)
        {
            var (r1, _, e1) = Syscall(procCancelIoEx.Addr(), 2L, uintptr(s), uintptr(@unsafe.Pointer(o)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreateProcess(ref ushort appName, ref ushort commandLine, ref SecurityAttributes procSecurity, ref SecurityAttributes threadSecurity, bool inheritHandles, uint creationFlags, ref ushort env, ref ushort currentDir, ref StartupInfo startupInfo, ref ProcessInformation outProcInfo)
        {
            uint _p0 = default;
            if (inheritHandles)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }
            var (r1, _, e1) = Syscall12(procCreateProcessW.Addr(), 10L, uintptr(@unsafe.Pointer(appName)), uintptr(@unsafe.Pointer(commandLine)), uintptr(@unsafe.Pointer(procSecurity)), uintptr(@unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(@unsafe.Pointer(env)), uintptr(@unsafe.Pointer(currentDir)), uintptr(@unsafe.Pointer(startupInfo)), uintptr(@unsafe.Pointer(outProcInfo)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreateProcessAsUser(Token token, ref ushort appName, ref ushort commandLine, ref SecurityAttributes procSecurity, ref SecurityAttributes threadSecurity, bool inheritHandles, uint creationFlags, ref ushort env, ref ushort currentDir, ref StartupInfo startupInfo, ref ProcessInformation outProcInfo)
        {
            uint _p0 = default;
            if (inheritHandles)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }
            var (r1, _, e1) = Syscall12(procCreateProcessAsUserW.Addr(), 11L, uintptr(token), uintptr(@unsafe.Pointer(appName)), uintptr(@unsafe.Pointer(commandLine)), uintptr(@unsafe.Pointer(procSecurity)), uintptr(@unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(@unsafe.Pointer(env)), uintptr(@unsafe.Pointer(currentDir)), uintptr(@unsafe.Pointer(startupInfo)), uintptr(@unsafe.Pointer(outProcInfo)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) OpenProcess(uint da, bool inheritHandle, uint pid)
        {
            uint _p0 = default;
            if (inheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }
            var (r0, _, e1) = Syscall(procOpenProcess.Addr(), 3L, uintptr(da), uintptr(_p0), uintptr(pid));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error TerminateProcess(Handle handle, uint exitcode)
        {
            var (r1, _, e1) = Syscall(procTerminateProcess.Addr(), 2L, uintptr(handle), uintptr(exitcode), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetExitCodeProcess(Handle handle, ref uint exitcode)
        {
            var (r1, _, e1) = Syscall(procGetExitCodeProcess.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(exitcode)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetStartupInfo(ref StartupInfo startupInfo)
        {
            var (r1, _, e1) = Syscall(procGetStartupInfoW.Addr(), 1L, uintptr(@unsafe.Pointer(startupInfo)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) GetCurrentProcess()
        {
            var (r0, _, e1) = Syscall(procGetCurrentProcess.Addr(), 0L, 0L, 0L, 0L);
            pseudoHandle = Handle(r0);
            if (pseudoHandle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetProcessTimes(Handle handle, ref Filetime creationTime, ref Filetime exitTime, ref Filetime kernelTime, ref Filetime userTime)
        {
            var (r1, _, e1) = Syscall6(procGetProcessTimes.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(creationTime)), uintptr(@unsafe.Pointer(exitTime)), uintptr(@unsafe.Pointer(kernelTime)), uintptr(@unsafe.Pointer(userTime)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error DuplicateHandle(Handle hSourceProcessHandle, Handle hSourceHandle, Handle hTargetProcessHandle, ref Handle lpTargetHandle, uint dwDesiredAccess, bool bInheritHandle, uint dwOptions)
        {
            uint _p0 = default;
            if (bInheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }
            var (r1, _, e1) = Syscall9(procDuplicateHandle.Addr(), 7L, uintptr(hSourceProcessHandle), uintptr(hSourceHandle), uintptr(hTargetProcessHandle), uintptr(@unsafe.Pointer(lpTargetHandle)), uintptr(dwDesiredAccess), uintptr(_p0), uintptr(dwOptions), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) WaitForSingleObject(Handle handle, uint waitMilliseconds)
        {
            var (r0, _, e1) = Syscall(procWaitForSingleObject.Addr(), 2L, uintptr(handle), uintptr(waitMilliseconds), 0L);
            event = uint32(r0);
            if (event == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetTempPath(uint buflen, ref ushort buf)
        {
            var (r0, _, e1) = Syscall(procGetTempPathW.Addr(), 2L, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreatePipe(ref Handle readhandle, ref Handle writehandle, ref SecurityAttributes sa, uint size)
        {
            var (r1, _, e1) = Syscall6(procCreatePipe.Addr(), 4L, uintptr(@unsafe.Pointer(readhandle)), uintptr(@unsafe.Pointer(writehandle)), uintptr(@unsafe.Pointer(sa)), uintptr(size), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetFileType(Handle filehandle)
        {
            var (r0, _, e1) = Syscall(procGetFileType.Addr(), 1L, uintptr(filehandle), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CryptAcquireContext(ref Handle provhandle, ref ushort container, ref ushort provider, uint provtype, uint flags)
        {
            var (r1, _, e1) = Syscall6(procCryptAcquireContextW.Addr(), 5L, uintptr(@unsafe.Pointer(provhandle)), uintptr(@unsafe.Pointer(container)), uintptr(@unsafe.Pointer(provider)), uintptr(provtype), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CryptReleaseContext(Handle provhandle, uint flags)
        {
            var (r1, _, e1) = Syscall(procCryptReleaseContext.Addr(), 2L, uintptr(provhandle), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CryptGenRandom(Handle provhandle, uint buflen, ref byte buf)
        {
            var (r1, _, e1) = Syscall(procCryptGenRandom.Addr(), 3L, uintptr(provhandle), uintptr(buflen), uintptr(@unsafe.Pointer(buf)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (ref ushort, error) GetEnvironmentStrings()
        {
            var (r0, _, e1) = Syscall(procGetEnvironmentStringsW.Addr(), 0L, 0L, 0L, 0L);
            envs = (uint16.Value)(@unsafe.Pointer(r0));
            if (envs == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error FreeEnvironmentStrings(ref ushort envs)
        {
            var (r1, _, e1) = Syscall(procFreeEnvironmentStringsW.Addr(), 1L, uintptr(@unsafe.Pointer(envs)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetEnvironmentVariable(ref ushort name, ref ushort buffer, uint size)
        {
            var (r0, _, e1) = Syscall(procGetEnvironmentVariableW.Addr(), 3L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(buffer)), uintptr(size));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetEnvironmentVariable(ref ushort name, ref ushort value)
        {
            var (r1, _, e1) = Syscall(procSetEnvironmentVariableW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(value)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetFileTime(Handle handle, ref Filetime ctime, ref Filetime atime, ref Filetime wtime)
        {
            var (r1, _, e1) = Syscall6(procSetFileTime.Addr(), 4L, uintptr(handle), uintptr(@unsafe.Pointer(ctime)), uintptr(@unsafe.Pointer(atime)), uintptr(@unsafe.Pointer(wtime)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetFileAttributes(ref ushort name)
        {
            var (r0, _, e1) = Syscall(procGetFileAttributesW.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            attrs = uint32(r0);
            if (attrs == INVALID_FILE_ATTRIBUTES)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetFileAttributes(ref ushort name, uint attrs)
        {
            var (r1, _, e1) = Syscall(procSetFileAttributesW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(attrs), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetFileAttributesEx(ref ushort name, uint level, ref byte info)
        {
            var (r1, _, e1) = Syscall(procGetFileAttributesExW.Addr(), 3L, uintptr(@unsafe.Pointer(name)), uintptr(level), uintptr(@unsafe.Pointer(info)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static ref ushort GetCommandLine()
        {
            var (r0, _, _) = Syscall(procGetCommandLineW.Addr(), 0L, 0L, 0L, 0L);
            cmd = (uint16.Value)(@unsafe.Pointer(r0));
            return;
        }

        public static (ref array<ref array<ushort>>, error) CommandLineToArgv(ref ushort cmd, ref int argc)
        {
            var (r0, _, e1) = Syscall(procCommandLineToArgvW.Addr(), 2L, uintptr(@unsafe.Pointer(cmd)), uintptr(@unsafe.Pointer(argc)), 0L);
            argv = new ptr<ref array<ref array<ushort>>>(@unsafe.Pointer(r0));
            if (argv == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) LocalFree(Handle hmem)
        {
            var (r0, _, e1) = Syscall(procLocalFree.Addr(), 1L, uintptr(hmem), 0L, 0L);
            handle = Handle(r0);
            if (handle != 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error SetHandleInformation(Handle handle, uint mask, uint flags)
        {
            var (r1, _, e1) = Syscall(procSetHandleInformation.Addr(), 3L, uintptr(handle), uintptr(mask), uintptr(flags));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error FlushFileBuffers(Handle handle)
        {
            var (r1, _, e1) = Syscall(procFlushFileBuffers.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetFullPathName(ref ushort path, uint buflen, ref ushort buf, ptr<ptr<ushort>> fname)
        {
            var (r0, _, e1) = Syscall6(procGetFullPathNameW.Addr(), 4L, uintptr(@unsafe.Pointer(path)), uintptr(buflen), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(fname)), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetLongPathName(ref ushort path, ref ushort buf, uint buflen)
        {
            var (r0, _, e1) = Syscall(procGetLongPathNameW.Addr(), 3L, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(buf)), uintptr(buflen));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (uint, error) GetShortPathName(ref ushort longpath, ref ushort shortpath, uint buflen)
        {
            var (r0, _, e1) = Syscall(procGetShortPathNameW.Addr(), 3L, uintptr(@unsafe.Pointer(longpath)), uintptr(@unsafe.Pointer(shortpath)), uintptr(buflen));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) CreateFileMapping(Handle fhandle, ref SecurityAttributes sa, uint prot, uint maxSizeHigh, uint maxSizeLow, ref ushort name)
        {
            var (r0, _, e1) = Syscall6(procCreateFileMappingW.Addr(), 6L, uintptr(fhandle), uintptr(@unsafe.Pointer(sa)), uintptr(prot), uintptr(maxSizeHigh), uintptr(maxSizeLow), uintptr(@unsafe.Pointer(name)));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (System.UIntPtr, error) MapViewOfFile(Handle handle, uint access, uint offsetHigh, uint offsetLow, System.UIntPtr length)
        {
            var (r0, _, e1) = Syscall6(procMapViewOfFile.Addr(), 5L, uintptr(handle), uintptr(access), uintptr(offsetHigh), uintptr(offsetLow), uintptr(length), 0L);
            addr = uintptr(r0);
            if (addr == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error UnmapViewOfFile(System.UIntPtr addr)
        {
            var (r1, _, e1) = Syscall(procUnmapViewOfFile.Addr(), 1L, uintptr(addr), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error FlushViewOfFile(System.UIntPtr addr, System.UIntPtr length)
        {
            var (r1, _, e1) = Syscall(procFlushViewOfFile.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error VirtualLock(System.UIntPtr addr, System.UIntPtr length)
        {
            var (r1, _, e1) = Syscall(procVirtualLock.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error VirtualUnlock(System.UIntPtr addr, System.UIntPtr length)
        {
            var (r1, _, e1) = Syscall(procVirtualUnlock.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error TransmitFile(Handle s, Handle handle, uint bytesToWrite, uint bytsPerSend, ref Overlapped overlapped, ref TransmitFileBuffers transmitFileBuf, uint flags)
        {
            var (r1, _, e1) = Syscall9(procTransmitFile.Addr(), 7L, uintptr(s), uintptr(handle), uintptr(bytesToWrite), uintptr(bytsPerSend), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(transmitFileBuf)), uintptr(flags), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error ReadDirectoryChanges(Handle handle, ref byte buf, uint buflen, bool watchSubTree, uint mask, ref uint retlen, ref Overlapped overlapped, System.UIntPtr completionRoutine)
        {
            uint _p0 = default;
            if (watchSubTree)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }
            var (r1, _, e1) = Syscall9(procReadDirectoryChangesW.Addr(), 8L, uintptr(handle), uintptr(@unsafe.Pointer(buf)), uintptr(buflen), uintptr(_p0), uintptr(mask), uintptr(@unsafe.Pointer(retlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) CertOpenSystemStore(Handle hprov, ref ushort name)
        {
            var (r0, _, e1) = Syscall(procCertOpenSystemStoreW.Addr(), 2L, uintptr(hprov), uintptr(@unsafe.Pointer(name)), 0L);
            store = Handle(r0);
            if (store == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) CertOpenStore(System.UIntPtr storeProvider, uint msgAndCertEncodingType, System.UIntPtr cryptProv, uint flags, System.UIntPtr para)
        {
            var (r0, _, e1) = Syscall6(procCertOpenStore.Addr(), 5L, uintptr(storeProvider), uintptr(msgAndCertEncodingType), uintptr(cryptProv), uintptr(flags), uintptr(para), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (ref CertContext, error) CertEnumCertificatesInStore(Handle store, ref CertContext prevContext)
        {
            var (r0, _, e1) = Syscall(procCertEnumCertificatesInStore.Addr(), 2L, uintptr(store), uintptr(@unsafe.Pointer(prevContext)), 0L);
            context = (CertContext.Value)(@unsafe.Pointer(r0));
            if (context == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CertAddCertificateContextToStore(Handle store, ref CertContext certContext, uint addDisposition, ptr<ptr<CertContext>> storeContext)
        {
            var (r1, _, e1) = Syscall6(procCertAddCertificateContextToStore.Addr(), 4L, uintptr(store), uintptr(@unsafe.Pointer(certContext)), uintptr(addDisposition), uintptr(@unsafe.Pointer(storeContext)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CertCloseStore(Handle store, uint flags)
        {
            var (r1, _, e1) = Syscall(procCertCloseStore.Addr(), 2L, uintptr(store), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CertGetCertificateChain(Handle engine, ref CertContext leaf, ref Filetime time, Handle additionalStore, ref CertChainPara para, uint flags, System.UIntPtr reserved, ptr<ptr<CertChainContext>> chainCtx)
        {
            var (r1, _, e1) = Syscall9(procCertGetCertificateChain.Addr(), 8L, uintptr(engine), uintptr(@unsafe.Pointer(leaf)), uintptr(@unsafe.Pointer(time)), uintptr(additionalStore), uintptr(@unsafe.Pointer(para)), uintptr(flags), uintptr(reserved), uintptr(@unsafe.Pointer(chainCtx)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static void CertFreeCertificateChain(ref CertChainContext ctx)
        {
            Syscall(procCertFreeCertificateChain.Addr(), 1L, uintptr(@unsafe.Pointer(ctx)), 0L, 0L);
            return;
        }

        public static (ref CertContext, error) CertCreateCertificateContext(uint certEncodingType, ref byte certEncoded, uint encodedLen)
        {
            var (r0, _, e1) = Syscall(procCertCreateCertificateContext.Addr(), 3L, uintptr(certEncodingType), uintptr(@unsafe.Pointer(certEncoded)), uintptr(encodedLen));
            context = (CertContext.Value)(@unsafe.Pointer(r0));
            if (context == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CertFreeCertificateContext(ref CertContext ctx)
        {
            var (r1, _, e1) = Syscall(procCertFreeCertificateContext.Addr(), 1L, uintptr(@unsafe.Pointer(ctx)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CertVerifyCertificateChainPolicy(System.UIntPtr policyOID, ref CertChainContext chain, ref CertChainPolicyPara para, ref CertChainPolicyStatus status)
        {
            var (r1, _, e1) = Syscall6(procCertVerifyCertificateChainPolicy.Addr(), 4L, uintptr(policyOID), uintptr(@unsafe.Pointer(chain)), uintptr(@unsafe.Pointer(para)), uintptr(@unsafe.Pointer(status)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error RegOpenKeyEx(Handle key, ref ushort subkey, uint options, uint desiredAccess, ref Handle result)
        {
            var (r0, _, _) = Syscall6(procRegOpenKeyExW.Addr(), 5L, uintptr(key), uintptr(@unsafe.Pointer(subkey)), uintptr(options), uintptr(desiredAccess), uintptr(@unsafe.Pointer(result)), 0L);
            if (r0 != 0L)
            {
                regerrno = Errno(r0);
            }
            return;
        }

        public static error RegCloseKey(Handle key)
        {
            var (r0, _, _) = Syscall(procRegCloseKey.Addr(), 1L, uintptr(key), 0L, 0L);
            if (r0 != 0L)
            {
                regerrno = Errno(r0);
            }
            return;
        }

        public static error RegQueryInfoKey(Handle key, ref ushort @class, ref uint classLen, ref uint reserved, ref uint subkeysLen, ref uint maxSubkeyLen, ref uint maxClassLen, ref uint valuesLen, ref uint maxValueNameLen, ref uint maxValueLen, ref uint saLen, ref Filetime lastWriteTime)
        {
            var (r0, _, _) = Syscall12(procRegQueryInfoKeyW.Addr(), 12L, uintptr(key), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(subkeysLen)), uintptr(@unsafe.Pointer(maxSubkeyLen)), uintptr(@unsafe.Pointer(maxClassLen)), uintptr(@unsafe.Pointer(valuesLen)), uintptr(@unsafe.Pointer(maxValueNameLen)), uintptr(@unsafe.Pointer(maxValueLen)), uintptr(@unsafe.Pointer(saLen)), uintptr(@unsafe.Pointer(lastWriteTime)));
            if (r0 != 0L)
            {
                regerrno = Errno(r0);
            }
            return;
        }

        public static error RegEnumKeyEx(Handle key, uint index, ref ushort name, ref uint nameLen, ref uint reserved, ref ushort @class, ref uint classLen, ref Filetime lastWriteTime)
        {
            var (r0, _, _) = Syscall9(procRegEnumKeyExW.Addr(), 8L, uintptr(key), uintptr(index), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(lastWriteTime)), 0L);
            if (r0 != 0L)
            {
                regerrno = Errno(r0);
            }
            return;
        }

        public static error RegQueryValueEx(Handle key, ref ushort name, ref uint reserved, ref uint valtype, ref byte buf, ref uint buflen)
        {
            var (r0, _, _) = Syscall6(procRegQueryValueExW.Addr(), 6L, uintptr(key), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(valtype)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(buflen)));
            if (r0 != 0L)
            {
                regerrno = Errno(r0);
            }
            return;
        }

        private static uint getCurrentProcessId()
        {
            var (r0, _, _) = Syscall(procGetCurrentProcessId.Addr(), 0L, 0L, 0L, 0L);
            pid = uint32(r0);
            return;
        }

        public static error GetConsoleMode(Handle console, ref uint mode)
        {
            var (r1, _, e1) = Syscall(procGetConsoleMode.Addr(), 2L, uintptr(console), uintptr(@unsafe.Pointer(mode)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WriteConsole(Handle console, ref ushort buf, uint towrite, ref uint written, ref byte reserved)
        {
            var (r1, _, e1) = Syscall6(procWriteConsoleW.Addr(), 5L, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(towrite), uintptr(@unsafe.Pointer(written)), uintptr(@unsafe.Pointer(reserved)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error ReadConsole(Handle console, ref ushort buf, uint toread, ref uint read, ref byte inputControl)
        {
            var (r1, _, e1) = Syscall6(procReadConsoleW.Addr(), 5L, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(toread), uintptr(@unsafe.Pointer(read)), uintptr(@unsafe.Pointer(inputControl)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (Handle, error) CreateToolhelp32Snapshot(uint flags, uint processId)
        {
            var (r0, _, e1) = Syscall(procCreateToolhelp32Snapshot.Addr(), 2L, uintptr(flags), uintptr(processId), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error Process32First(Handle snapshot, ref ProcessEntry32 procEntry)
        {
            var (r1, _, e1) = Syscall(procProcess32FirstW.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error Process32Next(Handle snapshot, ref ProcessEntry32 procEntry)
        {
            var (r1, _, e1) = Syscall(procProcess32NextW.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error DeviceIoControl(Handle handle, uint ioControlCode, ref byte inBuffer, uint inBufferSize, ref byte outBuffer, uint outBufferSize, ref uint bytesReturned, ref Overlapped overlapped)
        {
            var (r1, _, e1) = Syscall9(procDeviceIoControl.Addr(), 8L, uintptr(handle), uintptr(ioControlCode), uintptr(@unsafe.Pointer(inBuffer)), uintptr(inBufferSize), uintptr(@unsafe.Pointer(outBuffer)), uintptr(outBufferSize), uintptr(@unsafe.Pointer(bytesReturned)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreateSymbolicLink(ref ushort symlinkfilename, ref ushort targetfilename, uint flags)
        {
            var (r1, _, e1) = Syscall(procCreateSymbolicLinkW.Addr(), 3L, uintptr(@unsafe.Pointer(symlinkfilename)), uintptr(@unsafe.Pointer(targetfilename)), uintptr(flags));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error CreateHardLink(ref ushort filename, ref ushort existingfilename, System.UIntPtr reserved)
        {
            var (r1, _, e1) = Syscall(procCreateHardLinkW.Addr(), 3L, uintptr(@unsafe.Pointer(filename)), uintptr(@unsafe.Pointer(existingfilename)), uintptr(reserved));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WSAStartup(uint verreq, ref WSAData data)
        {
            var (r0, _, _) = Syscall(procWSAStartup.Addr(), 2L, uintptr(verreq), uintptr(@unsafe.Pointer(data)), 0L);
            if (r0 != 0L)
            {
                sockerr = Errno(r0);
            }
            return;
        }

        public static error WSACleanup()
        {
            var (r1, _, e1) = Syscall(procWSACleanup.Addr(), 0L, 0L, 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WSAIoctl(Handle s, uint iocc, ref byte inbuf, uint cbif, ref byte outbuf, uint cbob, ref uint cbbr, ref Overlapped overlapped, System.UIntPtr completionRoutine)
        {
            var (r1, _, e1) = Syscall9(procWSAIoctl.Addr(), 9L, uintptr(s), uintptr(iocc), uintptr(@unsafe.Pointer(inbuf)), uintptr(cbif), uintptr(@unsafe.Pointer(outbuf)), uintptr(cbob), uintptr(@unsafe.Pointer(cbbr)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static (Handle, error) socket(int af, int typ, int protocol)
        {
            var (r0, _, e1) = Syscall(procsocket.Addr(), 3L, uintptr(af), uintptr(typ), uintptr(protocol));
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error Setsockopt(Handle s, int level, int optname, ref byte optval, int optlen)
        {
            var (r1, _, e1) = Syscall6(procsetsockopt.Addr(), 5L, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(optlen), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error Getsockopt(Handle s, int level, int optname, ref byte optval, ref int optlen)
        {
            var (r1, _, e1) = Syscall6(procgetsockopt.Addr(), 5L, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(@unsafe.Pointer(optlen)), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error bind(Handle s, unsafe.Pointer name, int namelen)
        {
            var (r1, _, e1) = Syscall(procbind.Addr(), 3L, uintptr(s), uintptr(name), uintptr(namelen));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error connect(Handle s, unsafe.Pointer name, int namelen)
        {
            var (r1, _, e1) = Syscall(procconnect.Addr(), 3L, uintptr(s), uintptr(name), uintptr(namelen));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error getsockname(Handle s, ref RawSockaddrAny rsa, ref int addrlen)
        {
            var (r1, _, e1) = Syscall(procgetsockname.Addr(), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error getpeername(Handle s, ref RawSockaddrAny rsa, ref int addrlen)
        {
            var (r1, _, e1) = Syscall(procgetpeername.Addr(), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error listen(Handle s, int backlog)
        {
            var (r1, _, e1) = Syscall(proclisten.Addr(), 2L, uintptr(s), uintptr(backlog), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        private static error shutdown(Handle s, int how)
        {
            var (r1, _, e1) = Syscall(procshutdown.Addr(), 2L, uintptr(s), uintptr(how), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error Closesocket(Handle s)
        {
            var (r1, _, e1) = Syscall(procclosesocket.Addr(), 1L, uintptr(s), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error AcceptEx(Handle ls, Handle @as, ref byte buf, uint rxdatalen, uint laddrlen, uint raddrlen, ref uint recvd, ref Overlapped overlapped)
        {
            var (r1, _, e1) = Syscall9(procAcceptEx.Addr(), 8L, uintptr(ls), uintptr(as), uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static void GetAcceptExSockaddrs(ref byte buf, uint rxdatalen, uint laddrlen, uint raddrlen, ptr<ptr<RawSockaddrAny>> lrsa, ref int lrsalen, ptr<ptr<RawSockaddrAny>> rrsa, ref int rrsalen)
        {
            Syscall9(procGetAcceptExSockaddrs.Addr(), 8L, uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(lrsa)), uintptr(@unsafe.Pointer(lrsalen)), uintptr(@unsafe.Pointer(rrsa)), uintptr(@unsafe.Pointer(rrsalen)), 0L);
            return;
        }

        public static error WSARecv(Handle s, ref WSABuf bufs, uint bufcnt, ref uint recvd, ref uint flags, ref Overlapped overlapped, ref byte croutine)
        {
            var (r1, _, e1) = Syscall9(procWSARecv.Addr(), 7L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WSASend(Handle s, ref WSABuf bufs, uint bufcnt, ref uint sent, uint flags, ref Overlapped overlapped, ref byte croutine)
        {
            var (r1, _, e1) = Syscall9(procWSASend.Addr(), 7L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WSARecvFrom(Handle s, ref WSABuf bufs, uint bufcnt, ref uint recvd, ref uint flags, ref RawSockaddrAny from, ref int fromlen, ref Overlapped overlapped, ref byte croutine)
        {
            var (r1, _, e1) = Syscall9(procWSARecvFrom.Addr(), 9L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error WSASendTo(Handle s, ref WSABuf bufs, uint bufcnt, ref uint sent, uint flags, ref RawSockaddrAny to, int tolen, ref Overlapped overlapped, ref byte croutine)
        {
            var (r1, _, e1) = Syscall9(procWSASendTo.Addr(), 9L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(to)), uintptr(tolen), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (ref Hostent, error) GetHostByName(@string name)
        {
            ref byte _p0 = default;
            _p0, err = BytePtrFromString(name);
            if (err != null)
            {
                return;
            }
            return _GetHostByName(_p0);
        }

        private static (ref Hostent, error) _GetHostByName(ref byte name)
        {
            var (r0, _, e1) = Syscall(procgethostbyname.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            h = (Hostent.Value)(@unsafe.Pointer(r0));
            if (h == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (ref Servent, error) GetServByName(@string name, @string proto)
        {
            ref byte _p0 = default;
            _p0, err = BytePtrFromString(name);
            if (err != null)
            {
                return;
            }
            ref byte _p1 = default;
            _p1, err = BytePtrFromString(proto);
            if (err != null)
            {
                return;
            }
            return _GetServByName(_p0, _p1);
        }

        private static (ref Servent, error) _GetServByName(ref byte name, ref byte proto)
        {
            var (r0, _, e1) = Syscall(procgetservbyname.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(proto)), 0L);
            s = (Servent.Value)(@unsafe.Pointer(r0));
            if (s == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static ushort Ntohs(ushort netshort)
        {
            var (r0, _, _) = Syscall(procntohs.Addr(), 1L, uintptr(netshort), 0L, 0L);
            u = uint16(r0);
            return;
        }

        public static (ref Protoent, error) GetProtoByName(@string name)
        {
            ref byte _p0 = default;
            _p0, err = BytePtrFromString(name);
            if (err != null)
            {
                return;
            }
            return _GetProtoByName(_p0);
        }

        private static (ref Protoent, error) _GetProtoByName(ref byte name)
        {
            var (r0, _, e1) = Syscall(procgetprotobyname.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            p = (Protoent.Value)(@unsafe.Pointer(r0));
            if (p == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error DnsQuery(@string name, ushort qtype, uint options, ref byte extra, ptr<ptr<DNSRecord>> qrs, ref byte pr)
        {
            ref ushort _p0 = default;
            _p0, status = UTF16PtrFromString(name);
            if (status != null)
            {
                return;
            }
            return error.As(_DnsQuery(_p0, qtype, options, extra, qrs, pr));
        }

        private static error _DnsQuery(ref ushort name, ushort qtype, uint options, ref byte extra, ptr<ptr<DNSRecord>> qrs, ref byte pr)
        {
            var (r0, _, _) = Syscall6(procDnsQuery_W.Addr(), 6L, uintptr(@unsafe.Pointer(name)), uintptr(qtype), uintptr(options), uintptr(@unsafe.Pointer(extra)), uintptr(@unsafe.Pointer(qrs)), uintptr(@unsafe.Pointer(pr)));
            if (r0 != 0L)
            {
                status = Errno(r0);
            }
            return;
        }

        public static void DnsRecordListFree(ref DNSRecord rl, uint freetype)
        {
            Syscall(procDnsRecordListFree.Addr(), 2L, uintptr(@unsafe.Pointer(rl)), uintptr(freetype), 0L);
            return;
        }

        public static bool DnsNameCompare(ref ushort name1, ref ushort name2)
        {
            var (r0, _, _) = Syscall(procDnsNameCompare_W.Addr(), 2L, uintptr(@unsafe.Pointer(name1)), uintptr(@unsafe.Pointer(name2)), 0L);
            same = r0 != 0L;
            return;
        }

        public static error GetAddrInfoW(ref ushort nodename, ref ushort servicename, ref AddrinfoW hints, ptr<ptr<AddrinfoW>> result)
        {
            var (r0, _, _) = Syscall6(procGetAddrInfoW.Addr(), 4L, uintptr(@unsafe.Pointer(nodename)), uintptr(@unsafe.Pointer(servicename)), uintptr(@unsafe.Pointer(hints)), uintptr(@unsafe.Pointer(result)), 0L, 0L);
            if (r0 != 0L)
            {
                sockerr = Errno(r0);
            }
            return;
        }

        public static void FreeAddrInfoW(ref AddrinfoW addrinfo)
        {
            Syscall(procFreeAddrInfoW.Addr(), 1L, uintptr(@unsafe.Pointer(addrinfo)), 0L, 0L);
            return;
        }

        public static error GetIfEntry(ref MibIfRow pIfRow)
        {
            var (r0, _, _) = Syscall(procGetIfEntry.Addr(), 1L, uintptr(@unsafe.Pointer(pIfRow)), 0L, 0L);
            if (r0 != 0L)
            {
                errcode = Errno(r0);
            }
            return;
        }

        public static error GetAdaptersInfo(ref IpAdapterInfo ai, ref uint ol)
        {
            var (r0, _, _) = Syscall(procGetAdaptersInfo.Addr(), 2L, uintptr(@unsafe.Pointer(ai)), uintptr(@unsafe.Pointer(ol)), 0L);
            if (r0 != 0L)
            {
                errcode = Errno(r0);
            }
            return;
        }

        public static error SetFileCompletionNotificationModes(Handle handle, byte flags)
        {
            var (r1, _, e1) = Syscall(procSetFileCompletionNotificationModes.Addr(), 2L, uintptr(handle), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static (int, error) WSAEnumProtocols(ref int protocols, ref WSAProtocolInfo protocolBuffer, ref uint bufferLength)
        {
            var (r0, _, e1) = Syscall(procWSAEnumProtocolsW.Addr(), 3L, uintptr(@unsafe.Pointer(protocols)), uintptr(@unsafe.Pointer(protocolBuffer)), uintptr(@unsafe.Pointer(bufferLength)));
            n = int32(r0);
            if (n == -1L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error TranslateName(ref ushort accName, uint accNameFormat, uint desiredNameFormat, ref ushort translatedName, ref uint nSize)
        {
            var (r1, _, e1) = Syscall6(procTranslateNameW.Addr(), 5L, uintptr(@unsafe.Pointer(accName)), uintptr(accNameFormat), uintptr(desiredNameFormat), uintptr(@unsafe.Pointer(translatedName)), uintptr(@unsafe.Pointer(nSize)), 0L);
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetUserNameEx(uint nameFormat, ref ushort nameBuffre, ref uint nSize)
        {
            var (r1, _, e1) = Syscall(procGetUserNameExW.Addr(), 3L, uintptr(nameFormat), uintptr(@unsafe.Pointer(nameBuffre)), uintptr(@unsafe.Pointer(nSize)));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error NetUserGetInfo(ref ushort serverName, ref ushort userName, uint level, ptr<ptr<byte>> buf)
        {
            var (r0, _, _) = Syscall6(procNetUserGetInfo.Addr(), 4L, uintptr(@unsafe.Pointer(serverName)), uintptr(@unsafe.Pointer(userName)), uintptr(level), uintptr(@unsafe.Pointer(buf)), 0L, 0L);
            if (r0 != 0L)
            {
                neterr = Errno(r0);
            }
            return;
        }

        public static error NetGetJoinInformation(ref ushort server, ptr<ptr<ushort>> name, ref uint bufType)
        {
            var (r0, _, _) = Syscall(procNetGetJoinInformation.Addr(), 3L, uintptr(@unsafe.Pointer(server)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(bufType)));
            if (r0 != 0L)
            {
                neterr = Errno(r0);
            }
            return;
        }

        public static error NetApiBufferFree(ref byte buf)
        {
            var (r0, _, _) = Syscall(procNetApiBufferFree.Addr(), 1L, uintptr(@unsafe.Pointer(buf)), 0L, 0L);
            if (r0 != 0L)
            {
                neterr = Errno(r0);
            }
            return;
        }

        public static error LookupAccountSid(ref ushort systemName, ref SID sid, ref ushort name, ref uint nameLen, ref ushort refdDomainName, ref uint refdDomainNameLen, ref uint use)
        {
            var (r1, _, e1) = Syscall9(procLookupAccountSidW.Addr(), 7L, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error LookupAccountName(ref ushort systemName, ref ushort accountName, ref SID sid, ref uint sidLen, ref ushort refdDomainName, ref uint refdDomainNameLen, ref uint use)
        {
            var (r1, _, e1) = Syscall9(procLookupAccountNameW.Addr(), 7L, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(accountName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(sidLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error ConvertSidToStringSid(ref SID sid, ptr<ptr<ushort>> stringSid)
        {
            var (r1, _, e1) = Syscall(procConvertSidToStringSidW.Addr(), 2L, uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(stringSid)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error ConvertStringSidToSid(ref ushort stringSid, ptr<ptr<SID>> sid)
        {
            var (r1, _, e1) = Syscall(procConvertStringSidToSidW.Addr(), 2L, uintptr(@unsafe.Pointer(stringSid)), uintptr(@unsafe.Pointer(sid)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static uint GetLengthSid(ref SID sid)
        {
            var (r0, _, _) = Syscall(procGetLengthSid.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            len = uint32(r0);
            return;
        }

        public static error CopySid(uint destSidLen, ref SID destSid, ref SID srcSid)
        {
            var (r1, _, e1) = Syscall(procCopySid.Addr(), 3L, uintptr(destSidLen), uintptr(@unsafe.Pointer(destSid)), uintptr(@unsafe.Pointer(srcSid)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error OpenProcessToken(Handle h, uint access, ref Token token)
        {
            var (r1, _, e1) = Syscall(procOpenProcessToken.Addr(), 3L, uintptr(h), uintptr(access), uintptr(@unsafe.Pointer(token)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetTokenInformation(Token t, uint infoClass, ref byte info, uint infoLen, ref uint returnedLen)
        {
            var (r1, _, e1) = Syscall6(procGetTokenInformation.Addr(), 5L, uintptr(t), uintptr(infoClass), uintptr(@unsafe.Pointer(info)), uintptr(infoLen), uintptr(@unsafe.Pointer(returnedLen)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }

        public static error GetUserProfileDirectory(Token t, ref ushort dir, ref uint dirLen)
        {
            var (r1, _, e1) = Syscall(procGetUserProfileDirectoryW.Addr(), 3L, uintptr(t), uintptr(@unsafe.Pointer(dir)), uintptr(@unsafe.Pointer(dirLen)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = EINVAL;
                }
            }
            return;
        }
    }
}
