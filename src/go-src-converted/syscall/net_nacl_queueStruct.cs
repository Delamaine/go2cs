//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:37:23 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;

namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(sync.Mutex))]
        private partial struct queue
        {
            // Mutex structure promotion - sourced from value copy
            private readonly ptr<Mutex> m_MutexRef;

            private ref Mutex Mutex_val => ref m_MutexRef.Value;

            public ref int state => ref m_MutexRef.Value.state;

            public ref uint sema => ref m_MutexRef.Value.sema;

            // Constructors
            public queue(NilType _)
            {
                this.m_MutexRef = new ptr<sync.Mutex>(new sync.Mutex(nil));
                this.canRead = default;
                this.canWrite = default;
                this.rtimer = default;
                this.wtimer = default;
                this.r = default;
                this.w = default;
                this.m = default;
                this.closed = default;
            }

            public queue(sync.Mutex Mutex = default, sync.Cond canRead = default, sync.Cond canWrite = default, ref ptr<timer> rtimer = default, ref ptr<timer> wtimer = default, long r = default, long w = default, long m = default, bool closed = default)
            {
                this.m_MutexRef = new ptr<sync.Mutex>(Mutex);
                this.canRead = canRead;
                this.canWrite = canWrite;
                this.rtimer = rtimer;
                this.wtimer = wtimer;
                this.r = r;
                this.w = w;
                this.m = m;
                this.closed = closed;
            }

            // Enable comparisons between nil and queue struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(queue value, NilType nil) => value.Equals(default(queue));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(queue value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, queue value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, queue value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator queue(NilType nil) => default(queue);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static queue queue_cast(dynamic value)
        {
            return new queue(value.Mutex, value.canRead, value.canWrite, ref value.rtimer, ref value.wtimer, value.r, value.w, value.m, value.closed);
        }
    }
}