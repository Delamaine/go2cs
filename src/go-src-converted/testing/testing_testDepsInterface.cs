//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:05:57 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using errors = go.errors_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using race = go.@internal.race_package;
using io = go.io_package;
using os = go.os_package;
using runtime = go.runtime_package;
using debug = go.runtime.debug_package;
using trace = go.runtime.trace_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class testing_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface testDeps
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static testDeps As<T>(in T target) => (testDeps<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static testDeps As<T>(ptr<T> target_ptr) => (testDeps<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static testDeps? As(object target) =>
                typeof(testDeps<>).CreateInterfaceHandler<testDeps>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class testDeps<T> : testDeps
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public testDeps(in T target) => m_target = target;

            public testDeps(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ImportPathByRef(ref T value);
            private delegate error ImportPathByVal(T value);

            private static readonly ImportPathByRef s_ImportPathByRef;
            private static readonly ImportPathByVal s_ImportPathByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ImportPath()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ImportPathByRef is null)
                    return s_ImportPathByVal!(target);

                return s_ImportPathByRef(ref target);
            }

            private delegate error MatchStringByRef(ref T value, @string pat, @string str);
            private delegate error MatchStringByVal(T value, @string pat, @string str);

            private static readonly MatchStringByRef s_MatchStringByRef;
            private static readonly MatchStringByVal s_MatchStringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error MatchString(@string pat, @string str)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_MatchStringByRef is null)
                    return s_MatchStringByVal!(target, pat, str);

                return s_MatchStringByRef(ref target, pat, str);
            }

            private delegate error StartCPUProfileByRef(ref T value, io.Writer _p0);
            private delegate error StartCPUProfileByVal(T value, io.Writer _p0);

            private static readonly StartCPUProfileByRef s_StartCPUProfileByRef;
            private static readonly StartCPUProfileByVal s_StartCPUProfileByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error StartCPUProfile(io.Writer _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StartCPUProfileByRef is null)
                    return s_StartCPUProfileByVal!(target, _p0);

                return s_StartCPUProfileByRef(ref target, _p0);
            }

            private delegate error StopCPUProfileByRef(ref T value);
            private delegate error StopCPUProfileByVal(T value);

            private static readonly StopCPUProfileByRef s_StopCPUProfileByRef;
            private static readonly StopCPUProfileByVal s_StopCPUProfileByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error StopCPUProfile()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StopCPUProfileByRef is null)
                    return s_StopCPUProfileByVal!(target);

                return s_StopCPUProfileByRef(ref target);
            }

            private delegate error StartTestLogByRef(ref T value, io.Writer _p0);
            private delegate error StartTestLogByVal(T value, io.Writer _p0);

            private static readonly StartTestLogByRef s_StartTestLogByRef;
            private static readonly StartTestLogByVal s_StartTestLogByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error StartTestLog(io.Writer _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StartTestLogByRef is null)
                    return s_StartTestLogByVal!(target, _p0);

                return s_StartTestLogByRef(ref target, _p0);
            }

            private delegate error StopTestLogByRef(ref T value);
            private delegate error StopTestLogByVal(T value);

            private static readonly StopTestLogByRef s_StopTestLogByRef;
            private static readonly StopTestLogByVal s_StopTestLogByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error StopTestLog()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StopTestLogByRef is null)
                    return s_StopTestLogByVal!(target);

                return s_StopTestLogByRef(ref target);
            }

            private delegate error WriteHeapProfileByRef(ref T value, io.Writer _p0);
            private delegate error WriteHeapProfileByVal(T value, io.Writer _p0);

            private static readonly WriteHeapProfileByRef s_WriteHeapProfileByRef;
            private static readonly WriteHeapProfileByVal s_WriteHeapProfileByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error WriteHeapProfile(io.Writer _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WriteHeapProfileByRef is null)
                    return s_WriteHeapProfileByVal!(target, _p0);

                return s_WriteHeapProfileByRef(ref target, _p0);
            }

            private delegate error WriteProfileToByRef(ref T value, @string _p0, io.Writer _p0, long _p0);
            private delegate error WriteProfileToByVal(T value, @string _p0, io.Writer _p0, long _p0);

            private static readonly WriteProfileToByRef s_WriteProfileToByRef;
            private static readonly WriteProfileToByVal s_WriteProfileToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error WriteProfileTo(@string _p0, io.Writer _p0, long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WriteProfileToByRef is null)
                    return s_WriteProfileToByVal!(target, _p0, _p0, _p0);

                return s_WriteProfileToByRef(ref target, _p0, _p0, _p0);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static testDeps()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("ImportPath");

                if (!(extensionMethod is null))
                    s_ImportPathByRef = extensionMethod.CreateStaticDelegate(typeof(ImportPathByRef)) as ImportPathByRef;

                if (s_ImportPathByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ImportPath");

                    if (!(extensionMethod is null))
                        s_ImportPathByVal = extensionMethod.CreateStaticDelegate(typeof(ImportPathByVal)) as ImportPathByVal;
                }

                if (s_ImportPathByRef is null && s_ImportPathByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.ImportPath method", new Exception("ImportPath"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("MatchString");

                if (!(extensionMethod is null))
                    s_MatchStringByRef = extensionMethod.CreateStaticDelegate(typeof(MatchStringByRef)) as MatchStringByRef;

                if (s_MatchStringByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("MatchString");

                    if (!(extensionMethod is null))
                        s_MatchStringByVal = extensionMethod.CreateStaticDelegate(typeof(MatchStringByVal)) as MatchStringByVal;
                }

                if (s_MatchStringByRef is null && s_MatchStringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.MatchString method", new Exception("MatchString"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StartCPUProfile");

                if (!(extensionMethod is null))
                    s_StartCPUProfileByRef = extensionMethod.CreateStaticDelegate(typeof(StartCPUProfileByRef)) as StartCPUProfileByRef;

                if (s_StartCPUProfileByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StartCPUProfile");

                    if (!(extensionMethod is null))
                        s_StartCPUProfileByVal = extensionMethod.CreateStaticDelegate(typeof(StartCPUProfileByVal)) as StartCPUProfileByVal;
                }

                if (s_StartCPUProfileByRef is null && s_StartCPUProfileByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.StartCPUProfile method", new Exception("StartCPUProfile"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StopCPUProfile");

                if (!(extensionMethod is null))
                    s_StopCPUProfileByRef = extensionMethod.CreateStaticDelegate(typeof(StopCPUProfileByRef)) as StopCPUProfileByRef;

                if (s_StopCPUProfileByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StopCPUProfile");

                    if (!(extensionMethod is null))
                        s_StopCPUProfileByVal = extensionMethod.CreateStaticDelegate(typeof(StopCPUProfileByVal)) as StopCPUProfileByVal;
                }

                if (s_StopCPUProfileByRef is null && s_StopCPUProfileByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.StopCPUProfile method", new Exception("StopCPUProfile"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StartTestLog");

                if (!(extensionMethod is null))
                    s_StartTestLogByRef = extensionMethod.CreateStaticDelegate(typeof(StartTestLogByRef)) as StartTestLogByRef;

                if (s_StartTestLogByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StartTestLog");

                    if (!(extensionMethod is null))
                        s_StartTestLogByVal = extensionMethod.CreateStaticDelegate(typeof(StartTestLogByVal)) as StartTestLogByVal;
                }

                if (s_StartTestLogByRef is null && s_StartTestLogByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.StartTestLog method", new Exception("StartTestLog"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("StopTestLog");

                if (!(extensionMethod is null))
                    s_StopTestLogByRef = extensionMethod.CreateStaticDelegate(typeof(StopTestLogByRef)) as StopTestLogByRef;

                if (s_StopTestLogByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("StopTestLog");

                    if (!(extensionMethod is null))
                        s_StopTestLogByVal = extensionMethod.CreateStaticDelegate(typeof(StopTestLogByVal)) as StopTestLogByVal;
                }

                if (s_StopTestLogByRef is null && s_StopTestLogByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.StopTestLog method", new Exception("StopTestLog"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("WriteHeapProfile");

                if (!(extensionMethod is null))
                    s_WriteHeapProfileByRef = extensionMethod.CreateStaticDelegate(typeof(WriteHeapProfileByRef)) as WriteHeapProfileByRef;

                if (s_WriteHeapProfileByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("WriteHeapProfile");

                    if (!(extensionMethod is null))
                        s_WriteHeapProfileByVal = extensionMethod.CreateStaticDelegate(typeof(WriteHeapProfileByVal)) as WriteHeapProfileByVal;
                }

                if (s_WriteHeapProfileByRef is null && s_WriteHeapProfileByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.WriteHeapProfile method", new Exception("WriteHeapProfile"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("WriteProfileTo");

                if (!(extensionMethod is null))
                    s_WriteProfileToByRef = extensionMethod.CreateStaticDelegate(typeof(WriteProfileToByRef)) as WriteProfileToByRef;

                if (s_WriteProfileToByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("WriteProfileTo");

                    if (!(extensionMethod is null))
                        s_WriteProfileToByVal = extensionMethod.CreateStaticDelegate(typeof(WriteProfileToByVal)) as WriteProfileToByVal;
                }

                if (s_WriteProfileToByRef is null && s_WriteProfileToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement testDeps.WriteProfileTo method", new Exception("WriteProfileTo"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator testDeps<T>(in ptr<T> target_ptr) => new testDeps<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator testDeps<T>(in T target) => new testDeps<T>(target);

            // Enable comparisons between nil and testDeps<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(testDeps<T> value, NilType nil) => Activator.CreateInstance<testDeps<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(testDeps<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, testDeps<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, testDeps<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class testing_testDepsExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.testing_package.testDeps target)
        {
            try
            {
                return ((go.testing_package.testDeps<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.testing_package.testDeps target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.testing_package.testDeps target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.testing_package.testDeps<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.testing_package.testDeps target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}