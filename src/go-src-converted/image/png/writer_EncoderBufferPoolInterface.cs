//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 10:10:30 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using zlib = go.compress.zlib_package;
using crc32 = go.hash.crc32_package;
using image = go.image_package;
using color = go.image.color_package;
using io = go.io_package;
using strconv = go.strconv_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace image
{
    public static partial class png_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface EncoderBufferPool
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static EncoderBufferPool As<T>(in T target) => (EncoderBufferPool<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static EncoderBufferPool As<T>(ptr<T> target_ptr) => (EncoderBufferPool<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static EncoderBufferPool? As(object target) =>
                typeof(EncoderBufferPool<>).CreateInterfaceHandler<EncoderBufferPool>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class EncoderBufferPool<T> : EncoderBufferPool
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public EncoderBufferPool(in T target) => m_target = target;

            public EncoderBufferPool(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate ref EncoderBuffer GetByRef(ref T value);
            private delegate ref EncoderBuffer GetByVal(T value);

            private static readonly GetByRef s_GetByRef;
            private static readonly GetByVal s_GetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref EncoderBuffer Get()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_GetByRef is null)
                    return s_GetByVal!(target);

                return s_GetByRef(ref target);
            }

            private delegate ref EncoderBuffer PutByRef(ref T value, ref EncoderBuffer _p0);
            private delegate ref EncoderBuffer PutByVal(T value, ref EncoderBuffer _p0);

            private static readonly PutByRef s_PutByRef;
            private static readonly PutByVal s_PutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref EncoderBuffer Put(ref EncoderBuffer _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PutByRef is null)
                    return s_PutByVal!(target, _p0);

                return s_PutByRef(ref target, _p0);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static EncoderBufferPool()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Get");

                if (!(extensionMethod is null))
                    s_GetByRef = extensionMethod.CreateStaticDelegate(typeof(GetByRef)) as GetByRef;

                if (s_GetByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Get");

                    if (!(extensionMethod is null))
                        s_GetByVal = extensionMethod.CreateStaticDelegate(typeof(GetByVal)) as GetByVal;
                }

                if (s_GetByRef is null && s_GetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement EncoderBufferPool.Get method", new Exception("Get"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Put");

                if (!(extensionMethod is null))
                    s_PutByRef = extensionMethod.CreateStaticDelegate(typeof(PutByRef)) as PutByRef;

                if (s_PutByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Put");

                    if (!(extensionMethod is null))
                        s_PutByVal = extensionMethod.CreateStaticDelegate(typeof(PutByVal)) as PutByVal;
                }

                if (s_PutByRef is null && s_PutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement EncoderBufferPool.Put method", new Exception("Put"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator EncoderBufferPool<T>(in ptr<T> target_ptr) => new EncoderBufferPool<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator EncoderBufferPool<T>(in T target) => new EncoderBufferPool<T>(target);

            // Enable comparisons between nil and EncoderBufferPool<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(EncoderBufferPool<T> value, NilType nil) => Activator.CreateInstance<EncoderBufferPool<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(EncoderBufferPool<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, EncoderBufferPool<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, EncoderBufferPool<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class png_EncoderBufferPoolExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.image.png_package.EncoderBufferPool target)
        {
            try
            {
                return ((go.image.png_package.EncoderBufferPool<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.image.png_package.EncoderBufferPool target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.image.png_package.EncoderBufferPool target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.image.png_package.EncoderBufferPool<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.image.png_package.EncoderBufferPool target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}