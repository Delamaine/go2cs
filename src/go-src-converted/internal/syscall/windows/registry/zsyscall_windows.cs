// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

// package registry -- go2cs converted at 2020 August 29 08:22:42 UTC
// import "internal/syscall/windows/registry" ==> using registry = go.@internal.syscall.windows.registry_package
// Original source: C:\Go\src\internal\syscall\windows\registry\zsyscall_windows.go
using sysdll = go.@internal.syscall.windows.sysdll_package;
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace @internal {
namespace syscall {
namespace windows
{
    public static partial class registry_package
    {
        private static unsafe.Pointer _ = default;

        // Do the interface allocations only once for common
        // Errno values.
        private static readonly long errnoERROR_IO_PENDING = 997L;

        private static error errERROR_IO_PENDING = error.As(syscall.Errno(errnoERROR_IO_PENDING));

        // errnoErr returns common boxed Errno values, to prevent
        // allocations at runtime.
        private static error errnoErr(syscall.Errno e)
        {

            if (e == 0L) 
                return error.As(null);
            else if (e == errnoERROR_IO_PENDING) 
                return error.As(errERROR_IO_PENDING);
            // TODO: add more here, after collecting data on the common
            // error values see on Windows. (perhaps when running
            // all.bat?)
            return error.As(e);
        }

        private static var modadvapi32 = syscall.NewLazyDLL(sysdll.Add("advapi32.dll"));        private static var modkernel32 = syscall.NewLazyDLL(sysdll.Add("kernel32.dll"));        private static var procRegCreateKeyExW = modadvapi32.NewProc("RegCreateKeyExW");        private static var procRegDeleteKeyW = modadvapi32.NewProc("RegDeleteKeyW");        private static var procRegSetValueExW = modadvapi32.NewProc("RegSetValueExW");        private static var procRegEnumValueW = modadvapi32.NewProc("RegEnumValueW");        private static var procRegDeleteValueW = modadvapi32.NewProc("RegDeleteValueW");        private static var procRegLoadMUIStringW = modadvapi32.NewProc("RegLoadMUIStringW");        private static var procExpandEnvironmentStringsW = modkernel32.NewProc("ExpandEnvironmentStringsW");

        private static error regCreateKeyEx(syscall.Handle key, ref ushort subkey, uint reserved, ref ushort @class, uint options, uint desired, ref syscall.SecurityAttributes sa, ref syscall.Handle result, ref uint disposition)
        {
            var (r0, _, _) = syscall.Syscall9(procRegCreateKeyExW.Addr(), 9L, uintptr(key), uintptr(@unsafe.Pointer(subkey)), uintptr(reserved), uintptr(@unsafe.Pointer(class)), uintptr(options), uintptr(desired), uintptr(@unsafe.Pointer(sa)), uintptr(@unsafe.Pointer(result)), uintptr(@unsafe.Pointer(disposition)));
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static error regDeleteKey(syscall.Handle key, ref ushort subkey)
        {
            var (r0, _, _) = syscall.Syscall(procRegDeleteKeyW.Addr(), 2L, uintptr(key), uintptr(@unsafe.Pointer(subkey)), 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static error regSetValueEx(syscall.Handle key, ref ushort valueName, uint reserved, uint vtype, ref byte buf, uint bufsize)
        {
            var (r0, _, _) = syscall.Syscall6(procRegSetValueExW.Addr(), 6L, uintptr(key), uintptr(@unsafe.Pointer(valueName)), uintptr(reserved), uintptr(vtype), uintptr(@unsafe.Pointer(buf)), uintptr(bufsize));
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static error regEnumValue(syscall.Handle key, uint index, ref ushort name, ref uint nameLen, ref uint reserved, ref uint valtype, ref byte buf, ref uint buflen)
        {
            var (r0, _, _) = syscall.Syscall9(procRegEnumValueW.Addr(), 8L, uintptr(key), uintptr(index), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(valtype)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(buflen)), 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static error regDeleteValue(syscall.Handle key, ref ushort name)
        {
            var (r0, _, _) = syscall.Syscall(procRegDeleteValueW.Addr(), 2L, uintptr(key), uintptr(@unsafe.Pointer(name)), 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static error regLoadMUIString(syscall.Handle key, ref ushort name, ref ushort buf, uint buflen, ref uint buflenCopied, uint flags, ref ushort dir)
        {
            var (r0, _, _) = syscall.Syscall9(procRegLoadMUIStringW.Addr(), 7L, uintptr(key), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(buf)), uintptr(buflen), uintptr(@unsafe.Pointer(buflenCopied)), uintptr(flags), uintptr(@unsafe.Pointer(dir)), 0L, 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }
            return;
        }

        private static (uint, error) expandEnvironmentStrings(ref ushort src, ref ushort dst, uint size)
        {
            var (r0, _, e1) = syscall.Syscall(procExpandEnvironmentStringsW.Addr(), 3L, uintptr(@unsafe.Pointer(src)), uintptr(@unsafe.Pointer(dst)), uintptr(size));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }
            }
            return;
        }
    }
}}}}
