//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:24:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using io = go.io_package;
using syntax = go.regexp.syntax_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct regexpRO
        {
            // Constructors
            public regexpRO(NilType _)
            {
                this.expr = default;
                this.prog = default;
                this.onepass = default;
                this.prefix = default;
                this.prefixBytes = default;
                this.prefixComplete = default;
                this.prefixRune = default;
                this.prefixEnd = default;
                this.cond = default;
                this.numSubexp = default;
                this.subexpNames = default;
                this.longest = default;
            }

            public regexpRO(@string expr = default, ref ptr<syntax.Prog> prog = default, ref ptr<onePassProg> onepass = default, @string prefix = default, slice<byte> prefixBytes = default, bool prefixComplete = default, int prefixRune = default, uint prefixEnd = default, syntax.EmptyOp cond = default, long numSubexp = default, slice<@string> subexpNames = default, bool longest = default)
            {
                this.expr = expr;
                this.prog = prog;
                this.onepass = onepass;
                this.prefix = prefix;
                this.prefixBytes = prefixBytes;
                this.prefixComplete = prefixComplete;
                this.prefixRune = prefixRune;
                this.prefixEnd = prefixEnd;
                this.cond = cond;
                this.numSubexp = numSubexp;
                this.subexpNames = subexpNames;
                this.longest = longest;
            }

            // Enable comparisons between nil and regexpRO struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(regexpRO value, NilType nil) => value.Equals(default(regexpRO));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(regexpRO value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, regexpRO value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, regexpRO value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator regexpRO(NilType nil) => default(regexpRO);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static regexpRO regexpRO_cast(dynamic value)
        {
            return new regexpRO(value.expr, ref value.prog, ref value.onepass, value.prefix, value.prefixBytes, value.prefixComplete, value.prefixRune, value.prefixEnd, value.cond, value.numSubexp, value.subexpNames, value.longest);
        }
    }
}