//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:24:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using io = go.io_package;
using syntax = go.regexp.syntax_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(regexpRO))]
        public partial struct Regexp
        {
            // regexpRO structure promotion - sourced from value copy
            private readonly ptr<regexpRO> m_regexpRORef;

            private ref regexpRO regexpRO_val => ref m_regexpRORef.Value;

            public ref @string expr => ref m_regexpRORef.Value.expr;

            public ref ptr<syntax.Prog> prog => ref m_regexpRORef.Value.prog;

            public ref ptr<onePassProg> onepass => ref m_regexpRORef.Value.onepass;

            public ref @string prefix => ref m_regexpRORef.Value.prefix;

            public ref slice<byte> prefixBytes => ref m_regexpRORef.Value.prefixBytes;

            public ref bool prefixComplete => ref m_regexpRORef.Value.prefixComplete;

            public ref int prefixRune => ref m_regexpRORef.Value.prefixRune;

            public ref uint prefixEnd => ref m_regexpRORef.Value.prefixEnd;

            public ref syntax.EmptyOp cond => ref m_regexpRORef.Value.cond;

            public ref long numSubexp => ref m_regexpRORef.Value.numSubexp;

            public ref slice<@string> subexpNames => ref m_regexpRORef.Value.subexpNames;

            public ref bool longest => ref m_regexpRORef.Value.longest;

            // Constructors
            public Regexp(NilType _)
            {
                this.m_regexpRORef = new ptr<regexpRO>(new regexpRO(nil));
                this.mu = default;
                this.machine = default;
            }

            public Regexp(regexpRO regexpRO = default, sync.Mutex mu = default, slice<ref machine> machine = default)
            {
                this.m_regexpRORef = new ptr<regexpRO>(regexpRO);
                this.mu = mu;
                this.machine = machine;
            }

            // Enable comparisons between nil and Regexp struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Regexp value, NilType nil) => value.Equals(default(Regexp));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Regexp value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Regexp value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Regexp value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Regexp(NilType nil) => default(Regexp);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Regexp Regexp_cast(dynamic value)
        {
            return new Regexp(value.regexpRO, value.mu, value.machine);
        }
    }
}