//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:36:32 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using template = go.html.template_package;
using http = go.net.http_package;
using sort = go.sort_package;
using go;

namespace go {
namespace net
{
    public static partial class rpc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(Server))]
        private partial struct debugHTTP
        {
            // Server structure promotion - sourced from pointer
            private readonly ptr<Server> m_ServerRef;

            private ref Server Server_ptr => ref m_ServerRef.Value;

            public ref @string Addr => ref m_ServerRef.Value.Addr;

            public ref Handler Handler => ref m_ServerRef.Value.Handler;

            public ref ptr<tls.Config> TLSConfig => ref m_ServerRef.Value.TLSConfig;

            public ref time.Duration ReadTimeout => ref m_ServerRef.Value.ReadTimeout;

            public ref time.Duration ReadHeaderTimeout => ref m_ServerRef.Value.ReadHeaderTimeout;

            public ref time.Duration WriteTimeout => ref m_ServerRef.Value.WriteTimeout;

            public ref time.Duration IdleTimeout => ref m_ServerRef.Value.IdleTimeout;

            public ref long MaxHeaderBytes => ref m_ServerRef.Value.MaxHeaderBytes;

            public ref map<@string, Action<ref Server, ref tls.Conn, Handler>> TLSNextProto => ref m_ServerRef.Value.TLSNextProto;

            public ref Action<net.Conn, ConnState> ConnState => ref m_ServerRef.Value.ConnState;

            public ref ptr<log.Logger> ErrorLog => ref m_ServerRef.Value.ErrorLog;

            public ref int disableKeepAlives => ref m_ServerRef.Value.disableKeepAlives;

            public ref int inShutdown => ref m_ServerRef.Value.inShutdown;

            public ref sync.Once nextProtoOnce => ref m_ServerRef.Value.nextProtoOnce;

            public ref error nextProtoErr => ref m_ServerRef.Value.nextProtoErr;

            public ref sync.Mutex mu => ref m_ServerRef.Value.mu;

            public ref channel<object> doneChan => ref m_ServerRef.Value.doneChan;

            public ref slice<Action> onShutdown => ref m_ServerRef.Value.onShutdown;

            // Constructors
            public debugHTTP(NilType _)
            {
                this.m_ServerRef = new ptr<Server>(new Server(nil));
            }

            public debugHTTP(ref Server Server = default)
            {
                this.m_ServerRef = new ptr<Server>(ref Server);
            }

            // Enable comparisons between nil and debugHTTP struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(debugHTTP value, NilType nil) => value.Equals(default(debugHTTP));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(debugHTTP value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, debugHTTP value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, debugHTTP value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator debugHTTP(NilType nil) => default(debugHTTP);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static debugHTTP debugHTTP_cast(dynamic value)
        {
            return new debugHTTP(ref value.Server);
        }
    }
}}