//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:27:07 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using poll = go.@internal.poll_package;
using io = go.io_package;
using os = go.os_package;
using syscall = go.syscall_package;
using time = go.time_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class net_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Error
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Error As<T>(in T target) => (Error<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Error As<T>(ptr<T> target_ptr) => (Error<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Error? As(object target) =>
                typeof(Error<>).CreateInterfaceHandler<Error>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Error<T> : Error
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Error(in T target) => m_target = target;

            public Error(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate bool TimeoutByRef(ref T value);
            private delegate bool TimeoutByVal(T value);

            private static readonly TimeoutByRef s_TimeoutByRef;
            private static readonly TimeoutByVal s_TimeoutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Timeout()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_TimeoutByRef is null)
                    return s_TimeoutByVal!(target);

                return s_TimeoutByRef(ref target);
            }

            private delegate bool TemporaryByRef(ref T value);
            private delegate bool TemporaryByVal(T value);

            private static readonly TemporaryByRef s_TemporaryByRef;
            private static readonly TemporaryByVal s_TemporaryByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Temporary()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_TemporaryByRef is null)
                    return s_TemporaryByVal!(target);

                return s_TemporaryByRef(ref target);
            }

            private delegate @string ErrorByRef(ref T value);
            private delegate @string ErrorByVal(T value);

            private static readonly ErrorByRef s_ErrorByRef;
            private static readonly ErrorByVal s_ErrorByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string Error()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ErrorByRef is null)
                    return s_ErrorByVal!(target);

                return s_ErrorByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Error()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Timeout");

                if (!(extensionMethod is null))
                    s_TimeoutByRef = extensionMethod.CreateStaticDelegate(typeof(TimeoutByRef)) as TimeoutByRef;

                if (s_TimeoutByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Timeout");

                    if (!(extensionMethod is null))
                        s_TimeoutByVal = extensionMethod.CreateStaticDelegate(typeof(TimeoutByVal)) as TimeoutByVal;
                }

                if (s_TimeoutByRef is null && s_TimeoutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Error.Timeout method", new Exception("Timeout"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Temporary");

                if (!(extensionMethod is null))
                    s_TemporaryByRef = extensionMethod.CreateStaticDelegate(typeof(TemporaryByRef)) as TemporaryByRef;

                if (s_TemporaryByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Temporary");

                    if (!(extensionMethod is null))
                        s_TemporaryByVal = extensionMethod.CreateStaticDelegate(typeof(TemporaryByVal)) as TemporaryByVal;
                }

                if (s_TemporaryByRef is null && s_TemporaryByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Error.Temporary method", new Exception("Temporary"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Error");

                if (!(extensionMethod is null))
                    s_ErrorByRef = extensionMethod.CreateStaticDelegate(typeof(ErrorByRef)) as ErrorByRef;

                if (s_ErrorByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Error");

                    if (!(extensionMethod is null))
                        s_ErrorByVal = extensionMethod.CreateStaticDelegate(typeof(ErrorByVal)) as ErrorByVal;
                }

                if (s_ErrorByRef is null && s_ErrorByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Error.Error method", new Exception("Error"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Error<T>(in ptr<T> target_ptr) => new Error<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Error<T>(in T target) => new Error<T>(target);

            // Enable comparisons between nil and Error<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Error<T> value, NilType nil) => Activator.CreateInstance<Error<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Error<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Error<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Error<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class net_ErrorExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.net_package.Error target)
        {
            try
            {
                return ((go.net_package.Error<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.net_package.Error target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.net_package.Error target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.net_package.Error<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.net_package.Error target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}