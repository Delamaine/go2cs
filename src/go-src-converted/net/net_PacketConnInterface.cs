//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:27:07 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using poll = go.@internal.poll_package;
using io = go.io_package;
using os = go.os_package;
using syscall = go.syscall_package;
using time = go.time_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class net_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface PacketConn
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static PacketConn As<T>(in T target) => (PacketConn<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static PacketConn As<T>(ptr<T> target_ptr) => (PacketConn<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static PacketConn? As(object target) =>
                typeof(PacketConn<>).CreateInterfaceHandler<PacketConn>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class PacketConn<T> : PacketConn
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public PacketConn(in T target) => m_target = target;

            public PacketConn(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ReadFromByRef(ref T value, slice<byte> b);
            private delegate error ReadFromByVal(T value, slice<byte> b);

            private static readonly ReadFromByRef s_ReadFromByRef;
            private static readonly ReadFromByVal s_ReadFromByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ReadFrom(slice<byte> b)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ReadFromByRef is null)
                    return s_ReadFromByVal!(target, b);

                return s_ReadFromByRef(ref target, b);
            }

            private delegate error WriteToByRef(ref T value, slice<byte> b, Addr addr);
            private delegate error WriteToByVal(T value, slice<byte> b, Addr addr);

            private static readonly WriteToByRef s_WriteToByRef;
            private static readonly WriteToByVal s_WriteToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error WriteTo(slice<byte> b, Addr addr)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WriteToByRef is null)
                    return s_WriteToByVal!(target, b, addr);

                return s_WriteToByRef(ref target, b, addr);
            }

            private delegate error CloseByRef(ref T value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByRef s_CloseByRef;
            private static readonly CloseByVal s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_CloseByRef is null)
                    return s_CloseByVal!(target);

                return s_CloseByRef(ref target);
            }

            private delegate error LocalAddrByRef(ref T value);
            private delegate error LocalAddrByVal(T value);

            private static readonly LocalAddrByRef s_LocalAddrByRef;
            private static readonly LocalAddrByVal s_LocalAddrByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error LocalAddr()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_LocalAddrByRef is null)
                    return s_LocalAddrByVal!(target);

                return s_LocalAddrByRef(ref target);
            }

            private delegate error SetDeadlineByRef(ref T value, time.Time t);
            private delegate error SetDeadlineByVal(T value, time.Time t);

            private static readonly SetDeadlineByRef s_SetDeadlineByRef;
            private static readonly SetDeadlineByVal s_SetDeadlineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error SetDeadline(time.Time t)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SetDeadlineByRef is null)
                    return s_SetDeadlineByVal!(target, t);

                return s_SetDeadlineByRef(ref target, t);
            }

            private delegate error SetReadDeadlineByRef(ref T value, time.Time t);
            private delegate error SetReadDeadlineByVal(T value, time.Time t);

            private static readonly SetReadDeadlineByRef s_SetReadDeadlineByRef;
            private static readonly SetReadDeadlineByVal s_SetReadDeadlineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error SetReadDeadline(time.Time t)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SetReadDeadlineByRef is null)
                    return s_SetReadDeadlineByVal!(target, t);

                return s_SetReadDeadlineByRef(ref target, t);
            }

            private delegate error SetWriteDeadlineByRef(ref T value, time.Time t);
            private delegate error SetWriteDeadlineByVal(T value, time.Time t);

            private static readonly SetWriteDeadlineByRef s_SetWriteDeadlineByRef;
            private static readonly SetWriteDeadlineByVal s_SetWriteDeadlineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error SetWriteDeadline(time.Time t)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SetWriteDeadlineByRef is null)
                    return s_SetWriteDeadlineByVal!(target, t);

                return s_SetWriteDeadlineByRef(ref target, t);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static PacketConn()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("ReadFrom");

                if (!(extensionMethod is null))
                    s_ReadFromByRef = extensionMethod.CreateStaticDelegate(typeof(ReadFromByRef)) as ReadFromByRef;

                if (s_ReadFromByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("ReadFrom");

                    if (!(extensionMethod is null))
                        s_ReadFromByVal = extensionMethod.CreateStaticDelegate(typeof(ReadFromByVal)) as ReadFromByVal;
                }

                if (s_ReadFromByRef is null && s_ReadFromByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.ReadFrom method", new Exception("ReadFrom"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("WriteTo");

                if (!(extensionMethod is null))
                    s_WriteToByRef = extensionMethod.CreateStaticDelegate(typeof(WriteToByRef)) as WriteToByRef;

                if (s_WriteToByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("WriteTo");

                    if (!(extensionMethod is null))
                        s_WriteToByVal = extensionMethod.CreateStaticDelegate(typeof(WriteToByVal)) as WriteToByVal;
                }

                if (s_WriteToByRef is null && s_WriteToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.WriteTo method", new Exception("WriteTo"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByRef = extensionMethod.CreateStaticDelegate(typeof(CloseByRef)) as CloseByRef;

                if (s_CloseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Close");

                    if (!(extensionMethod is null))
                        s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;
                }

                if (s_CloseByRef is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.Close method", new Exception("Close"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("LocalAddr");

                if (!(extensionMethod is null))
                    s_LocalAddrByRef = extensionMethod.CreateStaticDelegate(typeof(LocalAddrByRef)) as LocalAddrByRef;

                if (s_LocalAddrByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("LocalAddr");

                    if (!(extensionMethod is null))
                        s_LocalAddrByVal = extensionMethod.CreateStaticDelegate(typeof(LocalAddrByVal)) as LocalAddrByVal;
                }

                if (s_LocalAddrByRef is null && s_LocalAddrByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.LocalAddr method", new Exception("LocalAddr"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("SetDeadline");

                if (!(extensionMethod is null))
                    s_SetDeadlineByRef = extensionMethod.CreateStaticDelegate(typeof(SetDeadlineByRef)) as SetDeadlineByRef;

                if (s_SetDeadlineByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SetDeadline");

                    if (!(extensionMethod is null))
                        s_SetDeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(SetDeadlineByVal)) as SetDeadlineByVal;
                }

                if (s_SetDeadlineByRef is null && s_SetDeadlineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.SetDeadline method", new Exception("SetDeadline"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("SetReadDeadline");

                if (!(extensionMethod is null))
                    s_SetReadDeadlineByRef = extensionMethod.CreateStaticDelegate(typeof(SetReadDeadlineByRef)) as SetReadDeadlineByRef;

                if (s_SetReadDeadlineByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SetReadDeadline");

                    if (!(extensionMethod is null))
                        s_SetReadDeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(SetReadDeadlineByVal)) as SetReadDeadlineByVal;
                }

                if (s_SetReadDeadlineByRef is null && s_SetReadDeadlineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.SetReadDeadline method", new Exception("SetReadDeadline"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("SetWriteDeadline");

                if (!(extensionMethod is null))
                    s_SetWriteDeadlineByRef = extensionMethod.CreateStaticDelegate(typeof(SetWriteDeadlineByRef)) as SetWriteDeadlineByRef;

                if (s_SetWriteDeadlineByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SetWriteDeadline");

                    if (!(extensionMethod is null))
                        s_SetWriteDeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(SetWriteDeadlineByVal)) as SetWriteDeadlineByVal;
                }

                if (s_SetWriteDeadlineByRef is null && s_SetWriteDeadlineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement PacketConn.SetWriteDeadline method", new Exception("SetWriteDeadline"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator PacketConn<T>(in ptr<T> target_ptr) => new PacketConn<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator PacketConn<T>(in T target) => new PacketConn<T>(target);

            // Enable comparisons between nil and PacketConn<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(PacketConn<T> value, NilType nil) => Activator.CreateInstance<PacketConn<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(PacketConn<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, PacketConn<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, PacketConn<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class net_PacketConnExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.net_package.PacketConn target)
        {
            try
            {
                return ((go.net_package.PacketConn<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.net_package.PacketConn target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.net_package.PacketConn target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.net_package.PacketConn<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.net_package.PacketConn target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}