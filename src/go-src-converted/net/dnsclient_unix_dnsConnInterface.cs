//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:25:58 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using io = go.io_package;
using rand = go.math.rand_package;
using os = go.os_package;
using sync = go.sync_package;
using time = go.time_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class net_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface dnsConn
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static dnsConn As<T>(in T target) => (dnsConn<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static dnsConn As<T>(ptr<T> target_ptr) => (dnsConn<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static dnsConn? As(object target) =>
                typeof(dnsConn<>).CreateInterfaceHandler<dnsConn>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class dnsConn<T> : dnsConn
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public dnsConn(in T target) => m_target = target;

            public dnsConn(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ref dnsMsg, error) SetDeadlineByRef(ref T value, time.Time _p0);
            private delegate (ref dnsMsg, error) SetDeadlineByVal(T value, time.Time _p0);

            private static readonly SetDeadlineByRef s_SetDeadlineByRef;
            private static readonly SetDeadlineByVal s_SetDeadlineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dnsMsg, error) SetDeadline(time.Time _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SetDeadlineByRef is null)
                    return s_SetDeadlineByVal!(target, _p0);

                return s_SetDeadlineByRef(ref target, _p0);
            }

            private delegate (ref dnsMsg, error) dnsRoundTripByRef(ref T value, ref dnsMsg query);
            private delegate (ref dnsMsg, error) dnsRoundTripByVal(T value, ref dnsMsg query);

            private static readonly dnsRoundTripByRef s_dnsRoundTripByRef;
            private static readonly dnsRoundTripByVal s_dnsRoundTripByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ref dnsMsg, error) dnsRoundTrip(ref dnsMsg query)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_dnsRoundTripByRef is null)
                    return s_dnsRoundTripByVal!(target, query);

                return s_dnsRoundTripByRef(ref target, query);
            }

            private delegate error CloseByRef(ref T value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByRef s_CloseByRef;
            private static readonly CloseByVal s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_CloseByRef is null)
                    return s_CloseByVal!(target);

                return s_CloseByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static dnsConn()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("SetDeadline");

                if (!(extensionMethod is null))
                    s_SetDeadlineByRef = extensionMethod.CreateStaticDelegate(typeof(SetDeadlineByRef)) as SetDeadlineByRef;

                if (s_SetDeadlineByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("SetDeadline");

                    if (!(extensionMethod is null))
                        s_SetDeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(SetDeadlineByVal)) as SetDeadlineByVal;
                }

                if (s_SetDeadlineByRef is null && s_SetDeadlineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement dnsConn.SetDeadline method", new Exception("SetDeadline"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("dnsRoundTrip");

                if (!(extensionMethod is null))
                    s_dnsRoundTripByRef = extensionMethod.CreateStaticDelegate(typeof(dnsRoundTripByRef)) as dnsRoundTripByRef;

                if (s_dnsRoundTripByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("dnsRoundTrip");

                    if (!(extensionMethod is null))
                        s_dnsRoundTripByVal = extensionMethod.CreateStaticDelegate(typeof(dnsRoundTripByVal)) as dnsRoundTripByVal;
                }

                if (s_dnsRoundTripByRef is null && s_dnsRoundTripByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement dnsConn.dnsRoundTrip method", new Exception("dnsRoundTrip"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByRef = extensionMethod.CreateStaticDelegate(typeof(CloseByRef)) as CloseByRef;

                if (s_CloseByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Close");

                    if (!(extensionMethod is null))
                        s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;
                }

                if (s_CloseByRef is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement dnsConn.Close method", new Exception("Close"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator dnsConn<T>(in ptr<T> target_ptr) => new dnsConn<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator dnsConn<T>(in T target) => new dnsConn<T>(target);

            // Enable comparisons between nil and dnsConn<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(dnsConn<T> value, NilType nil) => Activator.CreateInstance<dnsConn<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(dnsConn<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, dnsConn<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, dnsConn<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class net_dnsConnExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.net_package.dnsConn target)
        {
            try
            {
                return ((go.net_package.dnsConn<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.net_package.dnsConn target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.net_package.dnsConn target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.net_package.dnsConn<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.net_package.dnsConn target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}