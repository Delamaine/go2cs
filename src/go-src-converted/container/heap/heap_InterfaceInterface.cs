//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:47:39 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using sort = go.sort_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace container
{
    public static partial class heap_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Interface
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Interface As<T>(in T target) => (Interface<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Interface As<T>(ptr<T> target_ptr) => (Interface<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Interface? As(object target) =>
                typeof(Interface<>).CreateInterfaceHandler<Interface>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Interface<T> : Interface
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Interface(in T target) => m_target = target;

            public Interface(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate void PushByRef(ref T value, object x);
            private delegate void PushByVal(T value, object x);

            private static readonly PushByRef s_PushByRef;
            private static readonly PushByVal s_PushByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Push(object x)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PushByRef is null)
                {
                    s_PushByVal!(target, x);
                    return;
                }

                s_PushByRef(ref target, x);
                return;
                
            }

            private delegate void PopByRef(ref T value);
            private delegate void PopByVal(T value);

            private static readonly PopByRef s_PopByRef;
            private static readonly PopByVal s_PopByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Pop()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PopByRef is null)
                {
                    s_PopByVal!(target);
                    return;
                }

                s_PopByRef(ref target);
                return;
                
            }

            private delegate bool LenByRef(ref T value);
            private delegate bool LenByVal(T value);

            private static readonly LenByRef s_LenByRef;
            private static readonly LenByVal s_LenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Len()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_LenByRef is null)
                    return s_LenByVal!(target);

                return s_LenByRef(ref target);
            }

            private delegate bool LessByRef(ref T value, long i, long j);
            private delegate bool LessByVal(T value, long i, long j);

            private static readonly LessByRef s_LessByRef;
            private static readonly LessByVal s_LessByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Less(long i, long j)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_LessByRef is null)
                    return s_LessByVal!(target, i, j);

                return s_LessByRef(ref target, i, j);
            }

            private delegate bool SwapByRef(ref T value, long i, long j);
            private delegate bool SwapByVal(T value, long i, long j);

            private static readonly SwapByRef s_SwapByRef;
            private static readonly SwapByVal s_SwapByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Swap(long i, long j)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SwapByRef is null)
                    return s_SwapByVal!(target, i, j);

                return s_SwapByRef(ref target, i, j);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Interface()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Push");

                if (!(extensionMethod is null))
                    s_PushByRef = extensionMethod.CreateStaticDelegate(typeof(PushByRef)) as PushByRef;

                if (s_PushByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Push");

                    if (!(extensionMethod is null))
                        s_PushByVal = extensionMethod.CreateStaticDelegate(typeof(PushByVal)) as PushByVal;
                }

                if (s_PushByRef is null && s_PushByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Interface.Push method", new Exception("Push"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Pop");

                if (!(extensionMethod is null))
                    s_PopByRef = extensionMethod.CreateStaticDelegate(typeof(PopByRef)) as PopByRef;

                if (s_PopByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Pop");

                    if (!(extensionMethod is null))
                        s_PopByVal = extensionMethod.CreateStaticDelegate(typeof(PopByVal)) as PopByVal;
                }

                if (s_PopByRef is null && s_PopByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Interface.Pop method", new Exception("Pop"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Len");

                if (!(extensionMethod is null))
                    s_LenByRef = extensionMethod.CreateStaticDelegate(typeof(LenByRef)) as LenByRef;

                if (s_LenByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Len");

                    if (!(extensionMethod is null))
                        s_LenByVal = extensionMethod.CreateStaticDelegate(typeof(LenByVal)) as LenByVal;
                }

                if (s_LenByRef is null && s_LenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Interface.Len method", new Exception("Len"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Less");

                if (!(extensionMethod is null))
                    s_LessByRef = extensionMethod.CreateStaticDelegate(typeof(LessByRef)) as LessByRef;

                if (s_LessByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Less");

                    if (!(extensionMethod is null))
                        s_LessByVal = extensionMethod.CreateStaticDelegate(typeof(LessByVal)) as LessByVal;
                }

                if (s_LessByRef is null && s_LessByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Interface.Less method", new Exception("Less"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Swap");

                if (!(extensionMethod is null))
                    s_SwapByRef = extensionMethod.CreateStaticDelegate(typeof(SwapByRef)) as SwapByRef;

                if (s_SwapByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Swap");

                    if (!(extensionMethod is null))
                        s_SwapByVal = extensionMethod.CreateStaticDelegate(typeof(SwapByVal)) as SwapByVal;
                }

                if (s_SwapByRef is null && s_SwapByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Interface.Swap method", new Exception("Swap"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Interface<T>(in ptr<T> target_ptr) => new Interface<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Interface<T>(in T target) => new Interface<T>(target);

            // Enable comparisons between nil and Interface<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Interface<T> value, NilType nil) => Activator.CreateInstance<Interface<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Interface<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Interface<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Interface<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class heap_InterfaceExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.container.heap_package.Interface target)
        {
            try
            {
                return ((go.container.heap_package.Interface<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.container.heap_package.Interface target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.container.heap_package.Interface target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.container.heap_package.Interface<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.container.heap_package.Interface target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}