//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:21:37 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct version_key
        {
            // Constructors
            public version_key(NilType _)
            {
                this.version = default;
                this.ver_hash = default;
            }

            public version_key(@string version = default, uint ver_hash = default)
            {
                this.version = version;
                this.ver_hash = ver_hash;
            }

            // Enable comparisons between nil and version_key struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(version_key value, NilType nil) => value.Equals(default(version_key));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(version_key value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, version_key value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, version_key value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator version_key(NilType nil) => default(version_key);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static version_key version_key_cast(dynamic value)
        {
            return new version_key(value.version, value.ver_hash);
        }
    }
}