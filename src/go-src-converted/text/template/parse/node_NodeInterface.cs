//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:34:38 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace text {
namespace template
{
    public static partial class parse_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Node
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node As<T>(in T target) => (Node<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node As<T>(ptr<T> target_ptr) => (Node<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node? As(object target) =>
                typeof(Node<>).CreateInterfaceHandler<Node>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Node<T> : Node
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Node(in T target) => m_target = target;

            public Node(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate ref Tree TypeByRef(ref T value);
            private delegate ref Tree TypeByVal(T value);

            private static readonly TypeByRef s_TypeByRef;
            private static readonly TypeByVal s_TypeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref Tree Type()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_TypeByRef is null)
                    return s_TypeByVal!(target);

                return s_TypeByRef(ref target);
            }

            private delegate ref Tree StringByRef(ref T value);
            private delegate ref Tree StringByVal(T value);

            private static readonly StringByRef s_StringByRef;
            private static readonly StringByVal s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref Tree String()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringByRef is null)
                    return s_StringByVal!(target);

                return s_StringByRef(ref target);
            }

            private delegate ref Tree CopyByRef(ref T value);
            private delegate ref Tree CopyByVal(T value);

            private static readonly CopyByRef s_CopyByRef;
            private static readonly CopyByVal s_CopyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref Tree Copy()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_CopyByRef is null)
                    return s_CopyByVal!(target);

                return s_CopyByRef(ref target);
            }

            private delegate ref Tree PositionByRef(ref T value);
            private delegate ref Tree PositionByVal(T value);

            private static readonly PositionByRef s_PositionByRef;
            private static readonly PositionByVal s_PositionByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref Tree Position()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PositionByRef is null)
                    return s_PositionByVal!(target);

                return s_PositionByRef(ref target);
            }

            private delegate ref Tree treeByRef(ref T value);
            private delegate ref Tree treeByVal(T value);

            private static readonly treeByRef s_treeByRef;
            private static readonly treeByVal s_treeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ref Tree tree()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_treeByRef is null)
                    return s_treeByVal!(target);

                return s_treeByRef(ref target);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Node()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Type");

                if (!(extensionMethod is null))
                    s_TypeByRef = extensionMethod.CreateStaticDelegate(typeof(TypeByRef)) as TypeByRef;

                if (s_TypeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Type");

                    if (!(extensionMethod is null))
                        s_TypeByVal = extensionMethod.CreateStaticDelegate(typeof(TypeByVal)) as TypeByVal;
                }

                if (s_TypeByRef is null && s_TypeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Type method", new Exception("Type"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByRef = extensionMethod.CreateStaticDelegate(typeof(StringByRef)) as StringByRef;

                if (s_StringByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("String");

                    if (!(extensionMethod is null))
                        s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;
                }

                if (s_StringByRef is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.String method", new Exception("String"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Copy");

                if (!(extensionMethod is null))
                    s_CopyByRef = extensionMethod.CreateStaticDelegate(typeof(CopyByRef)) as CopyByRef;

                if (s_CopyByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Copy");

                    if (!(extensionMethod is null))
                        s_CopyByVal = extensionMethod.CreateStaticDelegate(typeof(CopyByVal)) as CopyByVal;
                }

                if (s_CopyByRef is null && s_CopyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Copy method", new Exception("Copy"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Position");

                if (!(extensionMethod is null))
                    s_PositionByRef = extensionMethod.CreateStaticDelegate(typeof(PositionByRef)) as PositionByRef;

                if (s_PositionByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Position");

                    if (!(extensionMethod is null))
                        s_PositionByVal = extensionMethod.CreateStaticDelegate(typeof(PositionByVal)) as PositionByVal;
                }

                if (s_PositionByRef is null && s_PositionByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Position method", new Exception("Position"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("tree");

                if (!(extensionMethod is null))
                    s_treeByRef = extensionMethod.CreateStaticDelegate(typeof(treeByRef)) as treeByRef;

                if (s_treeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("tree");

                    if (!(extensionMethod is null))
                        s_treeByVal = extensionMethod.CreateStaticDelegate(typeof(treeByVal)) as treeByVal;
                }

                if (s_treeByRef is null && s_treeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.tree method", new Exception("tree"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Node<T>(in ptr<T> target_ptr) => new Node<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Node<T>(in T target) => new Node<T>(target);

            // Enable comparisons between nil and Node<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Node<T> value, NilType nil) => Activator.CreateInstance<Node<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Node<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Node<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Node<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class parse_NodeExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.text.template.parse_package.Node target)
        {
            try
            {
                return ((go.text.template.parse_package.Node<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.text.template.parse_package.Node target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.text.template.parse_package.Node target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.text.template.parse_package.Node<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.text.template.parse_package.Node target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}