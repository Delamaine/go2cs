//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:47:45 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using constant = go.go.constant_package;
using token = go.go.token_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace go
{
    public static partial class types_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Object
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Object As<T>(in T target) => (Object<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Object As<T>(ptr<T> target_ptr) => (Object<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Object? As(object target) =>
                typeof(Object<>).CreateInterfaceHandler<Object>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Object<T> : Object
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Object(in T target) => m_target = target;

            public Object(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate token.Pos ParentByRef(ref T value);
            private delegate token.Pos ParentByVal(T value);

            private static readonly ParentByRef s_ParentByRef;
            private static readonly ParentByVal s_ParentByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Parent()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ParentByRef is null)
                    return s_ParentByVal!(target);

                return s_ParentByRef(ref target);
            }

            private delegate token.Pos PosByRef(ref T value);
            private delegate token.Pos PosByVal(T value);

            private static readonly PosByRef s_PosByRef;
            private static readonly PosByVal s_PosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Pos()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PosByRef is null)
                    return s_PosByVal!(target);

                return s_PosByRef(ref target);
            }

            private delegate token.Pos PkgByRef(ref T value);
            private delegate token.Pos PkgByVal(T value);

            private static readonly PkgByRef s_PkgByRef;
            private static readonly PkgByVal s_PkgByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Pkg()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_PkgByRef is null)
                    return s_PkgByVal!(target);

                return s_PkgByRef(ref target);
            }

            private delegate token.Pos NameByRef(ref T value);
            private delegate token.Pos NameByVal(T value);

            private static readonly NameByRef s_NameByRef;
            private static readonly NameByVal s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Name()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_NameByRef is null)
                    return s_NameByVal!(target);

                return s_NameByRef(ref target);
            }

            private delegate token.Pos TypeByRef(ref T value);
            private delegate token.Pos TypeByVal(T value);

            private static readonly TypeByRef s_TypeByRef;
            private static readonly TypeByVal s_TypeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Type()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_TypeByRef is null)
                    return s_TypeByVal!(target);

                return s_TypeByRef(ref target);
            }

            private delegate token.Pos ExportedByRef(ref T value);
            private delegate token.Pos ExportedByVal(T value);

            private static readonly ExportedByRef s_ExportedByRef;
            private static readonly ExportedByVal s_ExportedByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Exported()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ExportedByRef is null)
                    return s_ExportedByVal!(target);

                return s_ExportedByRef(ref target);
            }

            private delegate token.Pos IdByRef(ref T value);
            private delegate token.Pos IdByVal(T value);

            private static readonly IdByRef s_IdByRef;
            private static readonly IdByVal s_IdByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos Id()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_IdByRef is null)
                    return s_IdByVal!(target);

                return s_IdByRef(ref target);
            }

            private delegate token.Pos StringByRef(ref T value);
            private delegate token.Pos StringByVal(T value);

            private static readonly StringByRef s_StringByRef;
            private static readonly StringByVal s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos String()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_StringByRef is null)
                    return s_StringByVal!(target);

                return s_StringByRef(ref target);
            }

            private delegate token.Pos orderByRef(ref T value);
            private delegate token.Pos orderByVal(T value);

            private static readonly orderByRef s_orderByRef;
            private static readonly orderByVal s_orderByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos order()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_orderByRef is null)
                    return s_orderByVal!(target);

                return s_orderByRef(ref target);
            }

            private delegate token.Pos setOrderByRef(ref T value, uint _p0);
            private delegate token.Pos setOrderByVal(T value, uint _p0);

            private static readonly setOrderByRef s_setOrderByRef;
            private static readonly setOrderByVal s_setOrderByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos setOrder(uint _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_setOrderByRef is null)
                    return s_setOrderByVal!(target, _p0);

                return s_setOrderByRef(ref target, _p0);
            }

            private delegate token.Pos setParentByRef(ref T value, ref Scope _p0);
            private delegate token.Pos setParentByVal(T value, ref Scope _p0);

            private static readonly setParentByRef s_setParentByRef;
            private static readonly setParentByVal s_setParentByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos setParent(ref Scope _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_setParentByRef is null)
                    return s_setParentByVal!(target, _p0);

                return s_setParentByRef(ref target, _p0);
            }

            private delegate token.Pos sameIdByRef(ref T value, ref Package pkg, @string name);
            private delegate token.Pos sameIdByVal(T value, ref Package pkg, @string name);

            private static readonly sameIdByRef s_sameIdByRef;
            private static readonly sameIdByVal s_sameIdByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos sameId(ref Package pkg, @string name)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_sameIdByRef is null)
                    return s_sameIdByVal!(target, pkg, name);

                return s_sameIdByRef(ref target, pkg, name);
            }

            private delegate token.Pos scopePosByRef(ref T value);
            private delegate token.Pos scopePosByVal(T value);

            private static readonly scopePosByRef s_scopePosByRef;
            private static readonly scopePosByVal s_scopePosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos scopePos()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_scopePosByRef is null)
                    return s_scopePosByVal!(target);

                return s_scopePosByRef(ref target);
            }

            private delegate token.Pos setScopePosByRef(ref T value, token.Pos pos);
            private delegate token.Pos setScopePosByVal(T value, token.Pos pos);

            private static readonly setScopePosByRef s_setScopePosByRef;
            private static readonly setScopePosByVal s_setScopePosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public token.Pos setScopePos(token.Pos pos)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_setScopePosByRef is null)
                    return s_setScopePosByVal!(target, pos);

                return s_setScopePosByRef(ref target, pos);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Object()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Parent");

                if (!(extensionMethod is null))
                    s_ParentByRef = extensionMethod.CreateStaticDelegate(typeof(ParentByRef)) as ParentByRef;

                if (s_ParentByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Parent");

                    if (!(extensionMethod is null))
                        s_ParentByVal = extensionMethod.CreateStaticDelegate(typeof(ParentByVal)) as ParentByVal;
                }

                if (s_ParentByRef is null && s_ParentByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Parent method", new Exception("Parent"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Pos");

                if (!(extensionMethod is null))
                    s_PosByRef = extensionMethod.CreateStaticDelegate(typeof(PosByRef)) as PosByRef;

                if (s_PosByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Pos");

                    if (!(extensionMethod is null))
                        s_PosByVal = extensionMethod.CreateStaticDelegate(typeof(PosByVal)) as PosByVal;
                }

                if (s_PosByRef is null && s_PosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Pos method", new Exception("Pos"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Pkg");

                if (!(extensionMethod is null))
                    s_PkgByRef = extensionMethod.CreateStaticDelegate(typeof(PkgByRef)) as PkgByRef;

                if (s_PkgByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Pkg");

                    if (!(extensionMethod is null))
                        s_PkgByVal = extensionMethod.CreateStaticDelegate(typeof(PkgByVal)) as PkgByVal;
                }

                if (s_PkgByRef is null && s_PkgByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Pkg method", new Exception("Pkg"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Name");

                if (!(extensionMethod is null))
                    s_NameByRef = extensionMethod.CreateStaticDelegate(typeof(NameByRef)) as NameByRef;

                if (s_NameByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Name");

                    if (!(extensionMethod is null))
                        s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;
                }

                if (s_NameByRef is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Name method", new Exception("Name"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Type");

                if (!(extensionMethod is null))
                    s_TypeByRef = extensionMethod.CreateStaticDelegate(typeof(TypeByRef)) as TypeByRef;

                if (s_TypeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Type");

                    if (!(extensionMethod is null))
                        s_TypeByVal = extensionMethod.CreateStaticDelegate(typeof(TypeByVal)) as TypeByVal;
                }

                if (s_TypeByRef is null && s_TypeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Type method", new Exception("Type"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Exported");

                if (!(extensionMethod is null))
                    s_ExportedByRef = extensionMethod.CreateStaticDelegate(typeof(ExportedByRef)) as ExportedByRef;

                if (s_ExportedByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Exported");

                    if (!(extensionMethod is null))
                        s_ExportedByVal = extensionMethod.CreateStaticDelegate(typeof(ExportedByVal)) as ExportedByVal;
                }

                if (s_ExportedByRef is null && s_ExportedByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Exported method", new Exception("Exported"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Id");

                if (!(extensionMethod is null))
                    s_IdByRef = extensionMethod.CreateStaticDelegate(typeof(IdByRef)) as IdByRef;

                if (s_IdByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Id");

                    if (!(extensionMethod is null))
                        s_IdByVal = extensionMethod.CreateStaticDelegate(typeof(IdByVal)) as IdByVal;
                }

                if (s_IdByRef is null && s_IdByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.Id method", new Exception("Id"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByRef = extensionMethod.CreateStaticDelegate(typeof(StringByRef)) as StringByRef;

                if (s_StringByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("String");

                    if (!(extensionMethod is null))
                        s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;
                }

                if (s_StringByRef is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.String method", new Exception("String"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("order");

                if (!(extensionMethod is null))
                    s_orderByRef = extensionMethod.CreateStaticDelegate(typeof(orderByRef)) as orderByRef;

                if (s_orderByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("order");

                    if (!(extensionMethod is null))
                        s_orderByVal = extensionMethod.CreateStaticDelegate(typeof(orderByVal)) as orderByVal;
                }

                if (s_orderByRef is null && s_orderByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.order method", new Exception("order"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("setOrder");

                if (!(extensionMethod is null))
                    s_setOrderByRef = extensionMethod.CreateStaticDelegate(typeof(setOrderByRef)) as setOrderByRef;

                if (s_setOrderByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("setOrder");

                    if (!(extensionMethod is null))
                        s_setOrderByVal = extensionMethod.CreateStaticDelegate(typeof(setOrderByVal)) as setOrderByVal;
                }

                if (s_setOrderByRef is null && s_setOrderByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.setOrder method", new Exception("setOrder"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("setParent");

                if (!(extensionMethod is null))
                    s_setParentByRef = extensionMethod.CreateStaticDelegate(typeof(setParentByRef)) as setParentByRef;

                if (s_setParentByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("setParent");

                    if (!(extensionMethod is null))
                        s_setParentByVal = extensionMethod.CreateStaticDelegate(typeof(setParentByVal)) as setParentByVal;
                }

                if (s_setParentByRef is null && s_setParentByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.setParent method", new Exception("setParent"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("sameId");

                if (!(extensionMethod is null))
                    s_sameIdByRef = extensionMethod.CreateStaticDelegate(typeof(sameIdByRef)) as sameIdByRef;

                if (s_sameIdByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("sameId");

                    if (!(extensionMethod is null))
                        s_sameIdByVal = extensionMethod.CreateStaticDelegate(typeof(sameIdByVal)) as sameIdByVal;
                }

                if (s_sameIdByRef is null && s_sameIdByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.sameId method", new Exception("sameId"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("scopePos");

                if (!(extensionMethod is null))
                    s_scopePosByRef = extensionMethod.CreateStaticDelegate(typeof(scopePosByRef)) as scopePosByRef;

                if (s_scopePosByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("scopePos");

                    if (!(extensionMethod is null))
                        s_scopePosByVal = extensionMethod.CreateStaticDelegate(typeof(scopePosByVal)) as scopePosByVal;
                }

                if (s_scopePosByRef is null && s_scopePosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.scopePos method", new Exception("scopePos"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("setScopePos");

                if (!(extensionMethod is null))
                    s_setScopePosByRef = extensionMethod.CreateStaticDelegate(typeof(setScopePosByRef)) as setScopePosByRef;

                if (s_setScopePosByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("setScopePos");

                    if (!(extensionMethod is null))
                        s_setScopePosByVal = extensionMethod.CreateStaticDelegate(typeof(setScopePosByVal)) as setScopePosByVal;
                }

                if (s_setScopePosByRef is null && s_setScopePosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Object.setScopePos method", new Exception("setScopePos"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Object<T>(in ptr<T> target_ptr) => new Object<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Object<T>(in T target) => new Object<T>(target);

            // Enable comparisons between nil and Object<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Object<T> value, NilType nil) => Activator.CreateInstance<Object<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Object<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Object<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Object<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class types_ObjectExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.go.types_package.Object target)
        {
            try
            {
                return ((go.go.types_package.Object<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.go.types_package.Object target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.go.types_package.Object target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.go.types_package.Object<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.go.types_package.Object target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}