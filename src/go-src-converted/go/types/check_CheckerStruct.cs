//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:47:24 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using ast = go.go.ast_package;
using constant = go.go.constant_package;
using token = go.go.token_package;
using go;

namespace go {
namespace go
{
    public static partial class types_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(context))]
        public partial struct Checker
        {
            // context structure promotion - sourced from value copy
            private readonly ptr<context> m_contextRef;

            private ref context context_val => ref m_contextRef.Value;

            public ref ptr<declInfo> decl => ref m_contextRef.Value.decl;

            public ref ptr<Scope> scope => ref m_contextRef.Value.scope;

            public ref constant.Value iota => ref m_contextRef.Value.iota;

            public ref ptr<Signature> sig => ref m_contextRef.Value.sig;

            public ref bool hasLabel => ref m_contextRef.Value.hasLabel;

            public ref bool hasCallOrRecv => ref m_contextRef.Value.hasCallOrRecv;

            // Constructors
            public Checker(NilType _)
            {
                this.conf = default;
                this.fset = default;
                this.pkg = default;
                this.Info = default;
                this.objMap = default;
                this.impMap = default;
                this.files = default;
                this.unusedDotImports = default;
                this.firstErr = default;
                this.methods = default;
                this.untyped = default;
                this.funcs = default;
                this.delayed = default;
                this.m_contextRef = new ptr<context>(new context(nil));
                this.pos = default;
                this.indent = default;
            }

            public Checker(ref ptr<Config> conf = default, ref ptr<token.FileSet> fset = default, ref ptr<Package> pkg = default, ref Info Info = default, map<Object, ref declInfo> objMap = default, map<importKey, ref Package> impMap = default, slice<ref ast.File> files = default, map<ref Scope, map<ref Package, token.Pos>> unusedDotImports = default, error firstErr = default, map<@string, slice<ref Func>> methods = default, map<ast.Expr, exprInfo> untyped = default, slice<funcInfo> funcs = default, slice<Action> delayed = default, context context = default, token.Pos pos = default, long indent = default)
            {
                this.conf = conf;
                this.fset = fset;
                this.pkg = pkg;
                this.Info = Info;
                this.objMap = objMap;
                this.impMap = impMap;
                this.files = files;
                this.unusedDotImports = unusedDotImports;
                this.firstErr = firstErr;
                this.methods = methods;
                this.untyped = untyped;
                this.funcs = funcs;
                this.delayed = delayed;
                this.m_contextRef = new ptr<context>(context);
                this.pos = pos;
                this.indent = indent;
            }

            // Enable comparisons between nil and Checker struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Checker value, NilType nil) => value.Equals(default(Checker));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Checker value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Checker value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Checker value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Checker(NilType nil) => default(Checker);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Checker Checker_cast(dynamic value)
        {
            return new Checker(ref value.conf, ref value.fset, ref value.pkg, ref value.Info, value.objMap, value.impMap, value.files, value.unusedDotImports, value.firstErr, value.methods, value.untyped, value.funcs, value.delayed, value.context, value.pos, value.indent);
        }
    }
}}