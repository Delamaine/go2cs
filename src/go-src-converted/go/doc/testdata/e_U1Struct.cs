//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:47:12 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

using go;

namespace go {
namespace go
{
    public static partial class e_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(U1))]
        public partial struct U1
        {
            // U1 structure promotion - sourced from pointer
            private readonly ptr<U1> m_U1Ref;

            private ref U1 U1_ptr => ref m_U1Ref.Value;

            // Constructors
            public U1(NilType _)
            {
                this.m_U1Ref = new ptr<U1>(new U1(nil));
            }

            public U1(ref U1 U1 = default)
            {
                this.m_U1Ref = new ptr<U1>(ref U1);
            }

            // Enable comparisons between nil and U1 struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(U1 value, NilType nil) => value.Equals(default(U1));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(U1 value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, U1 value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, U1 value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator U1(NilType nil) => default(U1);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static U1 U1_cast(dynamic value)
        {
            return new U1(ref value.U1);
        }
    }
}}