//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:47:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using ast = go.go.ast_package;
using token = go.go.token_package;
using go;

namespace go {
namespace go
{
    public static partial class doc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Type
        {
            // Constructors
            public Type(NilType _)
            {
                this.Doc = default;
                this.Name = default;
                this.Decl = default;
                this.Consts = default;
                this.Vars = default;
                this.Funcs = default;
                this.Methods = default;
            }

            public Type(@string Doc = default, @string Name = default, ref ptr<ast.GenDecl> Decl = default, slice<ref Value> Consts = default, slice<ref Value> Vars = default, slice<ref Func> Funcs = default, slice<ref Func> Methods = default)
            {
                this.Doc = Doc;
                this.Name = Name;
                this.Decl = Decl;
                this.Consts = Consts;
                this.Vars = Vars;
                this.Funcs = Funcs;
                this.Methods = Methods;
            }

            // Enable comparisons between nil and Type struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Type value, NilType nil) => value.Equals(default(Type));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Type value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Type value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Type value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Type(NilType nil) => default(Type);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Type Type_cast(dynamic value)
        {
            return new Type(value.Doc, value.Name, ref value.Decl, value.Consts, value.Vars, value.Funcs, value.Methods);
        }
    }
}}