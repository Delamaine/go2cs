//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 August 29 08:23:12 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;

#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class hash_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Hash
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash As<T>(in T target) => (Hash<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash As<T>(ptr<T> target_ptr) => (Hash<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash? As(object target) =>
                typeof(Hash<>).CreateInterfaceHandler<Hash>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Hash<T> : Hash
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.Value;

                    return ref m_target;
                }
            }

            public Hash(in T target) => m_target = target;

            public Hash(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate long SumByRef(ref T value, slice<byte> b);
            private delegate long SumByVal(T value, slice<byte> b);

            private static readonly SumByRef s_SumByRef;
            private static readonly SumByVal s_SumByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Sum(slice<byte> b)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SumByRef is null)
                    return s_SumByVal!(target, b);

                return s_SumByRef(ref target, b);
            }

            private delegate long ResetByRef(ref T value);
            private delegate long ResetByVal(T value);

            private static readonly ResetByRef s_ResetByRef;
            private static readonly ResetByVal s_ResetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Reset()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_ResetByRef is null)
                    return s_ResetByVal!(target);

                return s_ResetByRef(ref target);
            }

            private delegate long SizeByRef(ref T value);
            private delegate long SizeByVal(T value);

            private static readonly SizeByRef s_SizeByRef;
            private static readonly SizeByVal s_SizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Size()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_SizeByRef is null)
                    return s_SizeByVal!(target);

                return s_SizeByRef(ref target);
            }

            private delegate long BlockSizeByRef(ref T value);
            private delegate long BlockSizeByVal(T value);

            private static readonly BlockSizeByRef s_BlockSizeByRef;
            private static readonly BlockSizeByVal s_BlockSizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long BlockSize()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_BlockSizeByRef is null)
                    return s_BlockSizeByVal!(target);

                return s_BlockSizeByRef(ref target);
            }

            private delegate (long, error) WriteByRef(ref T value, slice<byte> p);
            private delegate (long, error) WriteByVal(T value, slice<byte> p);

            private static readonly WriteByRef s_WriteByRef;
            private static readonly WriteByVal s_WriteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) Write(slice<byte> p)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.Value;
                if (s_WriteByRef is null)
                    return s_WriteByVal!(target, p);

                return s_WriteByRef(ref target, p);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Hash()
            {
                Type targetType = typeof(T);
                Type targetTypeByRef = targetType.MakeByRefType();
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByRef.GetExtensionMethod("Sum");

                if (!(extensionMethod is null))
                    s_SumByRef = extensionMethod.CreateStaticDelegate(typeof(SumByRef)) as SumByRef;

                if (s_SumByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Sum");

                    if (!(extensionMethod is null))
                        s_SumByVal = extensionMethod.CreateStaticDelegate(typeof(SumByVal)) as SumByVal;
                }

                if (s_SumByRef is null && s_SumByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash.Sum method", new Exception("Sum"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Reset");

                if (!(extensionMethod is null))
                    s_ResetByRef = extensionMethod.CreateStaticDelegate(typeof(ResetByRef)) as ResetByRef;

                if (s_ResetByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Reset");

                    if (!(extensionMethod is null))
                        s_ResetByVal = extensionMethod.CreateStaticDelegate(typeof(ResetByVal)) as ResetByVal;
                }

                if (s_ResetByRef is null && s_ResetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash.Reset method", new Exception("Reset"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByRef = extensionMethod.CreateStaticDelegate(typeof(SizeByRef)) as SizeByRef;

                if (s_SizeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Size");

                    if (!(extensionMethod is null))
                        s_SizeByVal = extensionMethod.CreateStaticDelegate(typeof(SizeByVal)) as SizeByVal;
                }

                if (s_SizeByRef is null && s_SizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash.Size method", new Exception("Size"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("BlockSize");

                if (!(extensionMethod is null))
                    s_BlockSizeByRef = extensionMethod.CreateStaticDelegate(typeof(BlockSizeByRef)) as BlockSizeByRef;

                if (s_BlockSizeByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("BlockSize");

                    if (!(extensionMethod is null))
                        s_BlockSizeByVal = extensionMethod.CreateStaticDelegate(typeof(BlockSizeByVal)) as BlockSizeByVal;
                }

                if (s_BlockSizeByRef is null && s_BlockSizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash.BlockSize method", new Exception("BlockSize"));

               extensionMethod = targetTypeByRef.GetExtensionMethod("Write");

                if (!(extensionMethod is null))
                    s_WriteByRef = extensionMethod.CreateStaticDelegate(typeof(WriteByRef)) as WriteByRef;

                if (s_WriteByRef is null)
                {
                    extensionMethod = targetType.GetExtensionMethod("Write");

                    if (!(extensionMethod is null))
                        s_WriteByVal = extensionMethod.CreateStaticDelegate(typeof(WriteByVal)) as WriteByVal;
                }

                if (s_WriteByRef is null && s_WriteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash.Write method", new Exception("Write"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Hash<T>(in ptr<T> target_ptr) => new Hash<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Hash<T>(in T target) => new Hash<T>(target);

            // Enable comparisons between nil and Hash<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Hash<T> value, NilType nil) => Activator.CreateInstance<Hash<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Hash<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Hash<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Hash<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class hash_HashExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.hash_package.Hash target)
        {
            try
            {
                return ((go.hash_package.Hash<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.hash_package.Hash target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.hash_package.Hash target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.hash_package.Hash<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.hash_package.Hash target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}